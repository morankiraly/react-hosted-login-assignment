{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { LoginFlow, LoginStep } from './interfaces';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst loginState = {\n  flow: LoginFlow.Login,\n  step: LoginStep.preLogin,\n  loading: false,\n  email: '',\n  tenants: []\n};\nconst reducers = {\n  setLoginState: typeReducerForKey('loginState'),\n  resetLoginState: resetStateByKey('loginState', {\n    loginState\n  })\n};\nconst actions = {\n  requestAuthorize: createAction(`${authStoreName}/requestAuthorize`, function () {\n    let payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return {\n      payload\n    };\n  }),\n  requestAuthorizeSSR: createAction(`${authStoreName}/requestAuthorizeSSR`, payload => ({\n    payload\n  })),\n  requestHostedLoginAuthorize: createAction(`${authStoreName}/requestHostedLoginAuthorize`, payload => ({\n    payload\n  })),\n  handleHostedLoginCallback: createAction(`${authStoreName}/handleHostedLoginCallback`, payload => ({\n    payload\n  })),\n  afterAuthNavigation: createAction(`${authStoreName}/afterAuthNavigation`),\n  preLogin: createAction(`${authStoreName}/preLogin`, payload => ({\n    payload\n  })),\n  postLogin: createAction(`${authStoreName}/postLogin`, payload => ({\n    payload\n  })),\n  login: createAction(`${authStoreName}/login`, payload => ({\n    payload\n  })),\n  loginWithMfa: createAction(`${authStoreName}/loginWithMfa`, payload => ({\n    payload\n  })),\n  recoverMfa: createAction(`${authStoreName}/recoverMfa`, payload => ({\n    payload\n  })),\n  logout: createAction(`${authStoreName}/logout`, payload => ({\n    payload\n  })),\n  silentLogout: createAction(`${authStoreName}/silentLogout`, payload => ({\n    payload\n  })),\n  checkIfAllowToRememberMfaDevice: createAction(`${authStoreName}/checkIfAllowToRememberMfaDevice`, payload => ({\n    payload\n  })),\n  changePhoneNumberWithVerification: createAction(`${authStoreName}/changePhoneNumberWithVerification`, payload => ({\n    payload\n  })),\n  verifyChangePhoneNumber: createAction(`${authStoreName}/verifyChangePhoneNumber`, payload => ({\n    payload\n  })),\n  quickSmsPasswordlessPreLogin: createAction(`${authStoreName}/quickSmsPasswordlessPreLogin`, payload => ({\n    payload\n  })),\n  passwordlessPreLogin: createAction(`${authStoreName}/passwordlessPreLogin`, payload => ({\n    payload\n  })),\n  passwordlessPostLogin: createAction(`${authStoreName}/passwordlessPostLogin`, payload => ({\n    payload\n  })),\n  verifyInviteToken: createAction(`${authStoreName}/verifyInviteToken`, payload => ({\n    payload\n  })),\n  webAuthnPrelogin: createAction(`${authStoreName}/webAuthnPrelogin`, payload => ({\n    payload\n  })),\n  webAuthnPostLogin: createAction(`${authStoreName}/webAuthnPostLogin`, payload => ({\n    payload\n  })),\n  webAuthnCreateNewDeviceSession: createAction(`${authStoreName}/webAuthnCreateNewDeviceSession`, payload => ({\n    payload\n  })),\n  webAuthnVerifyNewDeviceSession: createAction(`${authStoreName}/webAuthnVerifyNewDeviceSession`, payload => ({\n    payload\n  })),\n  getUserIP: createAction(`${authStoreName}/getUserIP`, payload => ({\n    payload\n  })),\n  preEnrollMFAWebAuthnForLogin: createAction(`${authStoreName}/preEnrollWebAuthNForLogin`, payload => ({\n    payload\n  })),\n  enrollMFAWebAuthnForLogin: createAction(`${authStoreName}/enrollWebAuthNForLogin`, payload => ({\n    payload\n  })),\n  enrollMFAAuthenticatorAppForLogin: createAction(`${authStoreName}/enrollMFAAuthenticatorAppForLogin`, payload => ({\n    payload\n  })),\n  preEnrollMFASMSForLogin: createAction(`${authStoreName}/preEnrollMFASMSForLogin`, payload => ({\n    payload\n  })),\n  enrollMFASMSForLogin: createAction(`${authStoreName}/enrollMFASMSForLogin`, payload => ({\n    payload\n  })),\n  preVerifyMFAWebAuthnForLogin: createAction(`${authStoreName}/preVerifyMFAWebAuthnForLogin`, payload => ({\n    payload\n  })),\n  verifyMFAWebAuthnForLogin: createAction(`${authStoreName}/verifyMFAWebAuthnForLogin`, payload => ({\n    payload\n  })),\n  preVerifyMFASMSForLogin: createAction(`${authStoreName}/preVerifyMFASMSForLogin`, payload => ({\n    payload\n  })),\n  verifyMFASMSForLogin: createAction(`${authStoreName}/verifyMFASMSForLogin`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { loginState, reducers as loginReducers, actions as loginActions };","map":{"version":3,"names":["createAction","LoginFlow","LoginStep","resetStateByKey","typeReducerForKey","authStoreName","loginState","flow","Login","step","preLogin","loading","email","tenants","reducers","setLoginState","resetLoginState","actions","requestAuthorize","payload","requestAuthorizeSSR","requestHostedLoginAuthorize","handleHostedLoginCallback","afterAuthNavigation","postLogin","login","loginWithMfa","recoverMfa","logout","silentLogout","checkIfAllowToRememberMfaDevice","changePhoneNumberWithVerification","verifyChangePhoneNumber","quickSmsPasswordlessPreLogin","passwordlessPreLogin","passwordlessPostLogin","verifyInviteToken","webAuthnPrelogin","webAuthnPostLogin","webAuthnCreateNewDeviceSession","webAuthnVerifyNewDeviceSession","getUserIP","preEnrollMFAWebAuthnForLogin","enrollMFAWebAuthnForLogin","enrollMFAAuthenticatorAppForLogin","preEnrollMFASMSForLogin","enrollMFASMSForLogin","preVerifyMFAWebAuthnForLogin","verifyMFAWebAuthnForLogin","preVerifyMFASMSForLogin","verifyMFASMSForLogin","Matcher","loginReducers","loginActions"],"sources":["/Users/morank/Documents/react-hosted-login-assignment/my-app/node_modules/@frontegg/redux-store/auth/LoginState/index.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { LoginFlow, LoginStep } from './interfaces';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst loginState = {\n  flow: LoginFlow.Login,\n  step: LoginStep.preLogin,\n  loading: false,\n  email: '',\n  tenants: []\n};\nconst reducers = {\n  setLoginState: typeReducerForKey('loginState'),\n  resetLoginState: resetStateByKey('loginState', {\n    loginState\n  })\n};\nconst actions = {\n  requestAuthorize: createAction(`${authStoreName}/requestAuthorize`, (payload = false) => ({\n    payload\n  })),\n  requestAuthorizeSSR: createAction(`${authStoreName}/requestAuthorizeSSR`, payload => ({\n    payload\n  })),\n  requestHostedLoginAuthorize: createAction(`${authStoreName}/requestHostedLoginAuthorize`, payload => ({\n    payload\n  })),\n  handleHostedLoginCallback: createAction(`${authStoreName}/handleHostedLoginCallback`, payload => ({\n    payload\n  })),\n  afterAuthNavigation: createAction(`${authStoreName}/afterAuthNavigation`),\n  preLogin: createAction(`${authStoreName}/preLogin`, payload => ({\n    payload\n  })),\n  postLogin: createAction(`${authStoreName}/postLogin`, payload => ({\n    payload\n  })),\n  login: createAction(`${authStoreName}/login`, payload => ({\n    payload\n  })),\n  loginWithMfa: createAction(`${authStoreName}/loginWithMfa`, payload => ({\n    payload\n  })),\n  recoverMfa: createAction(`${authStoreName}/recoverMfa`, payload => ({\n    payload\n  })),\n  logout: createAction(`${authStoreName}/logout`, payload => ({\n    payload\n  })),\n  silentLogout: createAction(`${authStoreName}/silentLogout`, payload => ({\n    payload\n  })),\n  checkIfAllowToRememberMfaDevice: createAction(`${authStoreName}/checkIfAllowToRememberMfaDevice`, payload => ({\n    payload\n  })),\n  changePhoneNumberWithVerification: createAction(`${authStoreName}/changePhoneNumberWithVerification`, payload => ({\n    payload\n  })),\n  verifyChangePhoneNumber: createAction(`${authStoreName}/verifyChangePhoneNumber`, payload => ({\n    payload\n  })),\n  quickSmsPasswordlessPreLogin: createAction(`${authStoreName}/quickSmsPasswordlessPreLogin`, payload => ({\n    payload\n  })),\n  passwordlessPreLogin: createAction(`${authStoreName}/passwordlessPreLogin`, payload => ({\n    payload\n  })),\n  passwordlessPostLogin: createAction(`${authStoreName}/passwordlessPostLogin`, payload => ({\n    payload\n  })),\n  verifyInviteToken: createAction(`${authStoreName}/verifyInviteToken`, payload => ({\n    payload\n  })),\n  webAuthnPrelogin: createAction(`${authStoreName}/webAuthnPrelogin`, payload => ({\n    payload\n  })),\n  webAuthnPostLogin: createAction(`${authStoreName}/webAuthnPostLogin`, payload => ({\n    payload\n  })),\n  webAuthnCreateNewDeviceSession: createAction(`${authStoreName}/webAuthnCreateNewDeviceSession`, payload => ({\n    payload\n  })),\n  webAuthnVerifyNewDeviceSession: createAction(`${authStoreName}/webAuthnVerifyNewDeviceSession`, payload => ({\n    payload\n  })),\n  getUserIP: createAction(`${authStoreName}/getUserIP`, payload => ({\n    payload\n  })),\n  preEnrollMFAWebAuthnForLogin: createAction(`${authStoreName}/preEnrollWebAuthNForLogin`, payload => ({\n    payload\n  })),\n  enrollMFAWebAuthnForLogin: createAction(`${authStoreName}/enrollWebAuthNForLogin`, payload => ({\n    payload\n  })),\n  enrollMFAAuthenticatorAppForLogin: createAction(`${authStoreName}/enrollMFAAuthenticatorAppForLogin`, payload => ({\n    payload\n  })),\n  preEnrollMFASMSForLogin: createAction(`${authStoreName}/preEnrollMFASMSForLogin`, payload => ({\n    payload\n  })),\n  enrollMFASMSForLogin: createAction(`${authStoreName}/enrollMFASMSForLogin`, payload => ({\n    payload\n  })),\n  preVerifyMFAWebAuthnForLogin: createAction(`${authStoreName}/preVerifyMFAWebAuthnForLogin`, payload => ({\n    payload\n  })),\n  verifyMFAWebAuthnForLogin: createAction(`${authStoreName}/verifyMFAWebAuthnForLogin`, payload => ({\n    payload\n  })),\n  preVerifyMFASMSForLogin: createAction(`${authStoreName}/preVerifyMFASMSForLogin`, payload => ({\n    payload\n  })),\n  verifyMFASMSForLogin: createAction(`${authStoreName}/verifyMFASMSForLogin`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { loginState, reducers as loginReducers, actions as loginActions };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
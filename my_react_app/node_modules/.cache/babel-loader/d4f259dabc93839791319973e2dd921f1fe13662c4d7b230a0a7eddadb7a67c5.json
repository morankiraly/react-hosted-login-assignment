{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { impersonationStoreName } from '../../constants';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { ImpersonateStep } from './interfaces';\nconst impersonateState = {\n  step: ImpersonateStep.impersonating,\n  loading: false\n};\nconst reducers = {\n  setImpersonateState: typeReducerForKey('impersonateState'),\n  resetImpersonateState: resetStateByKey('impersonateState', {\n    impersonateState\n  })\n};\nconst actions = {\n  impersonate: createAction(`${impersonationStoreName}/impersonate`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { impersonateState, reducers as impersonateReducers, actions as impersonateActions };","map":{"version":3,"names":["createAction","impersonationStoreName","resetStateByKey","typeReducerForKey","ImpersonateStep","impersonateState","step","impersonating","loading","reducers","setImpersonateState","resetImpersonateState","actions","impersonate","payload","Matcher","impersonateReducers","impersonateActions"],"sources":["/Users/morank/Documents/my-app/node_modules/@frontegg/redux-store/auth/ImpersonationState/index.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { impersonationStoreName } from '../../constants';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { ImpersonateStep } from './interfaces';\nconst impersonateState = {\n  step: ImpersonateStep.impersonating,\n  loading: false\n};\nconst reducers = {\n  setImpersonateState: typeReducerForKey('impersonateState'),\n  resetImpersonateState: resetStateByKey('impersonateState', {\n    impersonateState\n  })\n};\nconst actions = {\n  impersonate: createAction(`${impersonationStoreName}/impersonate`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { impersonateState, reducers as impersonateReducers, actions as impersonateActions };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,UAAU;AAC7D,SAASC,eAAe,QAAQ,cAAc;AAC9C,MAAMC,gBAAgB,GAAG;EACvBC,IAAI,EAAEF,eAAe,CAACG,aAAa;EACnCC,OAAO,EAAE;AACX,CAAC;AACD,MAAMC,QAAQ,GAAG;EACfC,mBAAmB,EAAEP,iBAAiB,CAAC,kBAAkB,CAAC;EAC1DQ,qBAAqB,EAAET,eAAe,CAAC,kBAAkB,EAAE;IACzDG;EACF,CAAC;AACH,CAAC;AACD,MAAMO,OAAO,GAAG;EACdC,WAAW,EAAEb,YAAY,CAAE,GAAEC,sBAAuB,cAAa,EAAEa,OAAO,KAAK;IAC7EA;EACF,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,CAAC,CAAC;AAClB,SAASV,gBAAgB,EAAEI,QAAQ,IAAIO,mBAAmB,EAAEJ,OAAO,IAAIK,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
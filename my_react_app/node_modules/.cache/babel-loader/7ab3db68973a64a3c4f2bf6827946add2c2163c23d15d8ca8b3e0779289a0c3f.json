{"ast":null,"code":"import { Get } from '../fetch';\nasync function getMetadata(body) {\n  var _data$rows, _data$rows2;\n  const data = await Get('/metadata', body);\n  if (data != null && (_data$rows = data.rows) != null && _data$rows[0]) return data == null ? void 0 : (_data$rows2 = data.rows) == null ? void 0 : _data$rows2[0];\n  throw new Error(`metadata not found: ${body.entityName}`);\n}\nasync function getIpMetadata(ip) {\n  const data = await Get(`/metadata/ip/${ip}`);\n  if (data) return data;\n  throw new Error(`ip metadata not found`);\n}\nexport async function getCurrentUserIpMetadata() {\n  const data = await Get(`/metadata/ipme`);\n  if (data) return data;\n  throw new Error(`ip metadata not found`);\n}\nexport const getNotificationsMetadata = async () => getMetadata({\n  entityName: 'notifications'\n});\nexport const getSamlMetadata = async () => getMetadata({\n  entityName: 'saml'\n});\nexport const getAuditsMetadata = async () => getMetadata({\n  entityName: 'audits'\n});\nexport const getIpAdressMetadata = async ip => getIpMetadata(ip);","map":{"version":3,"names":["Get","getMetadata","body","_data$rows","_data$rows2","data","rows","Error","entityName","getIpMetadata","ip","getCurrentUserIpMetadata","getNotificationsMetadata","getSamlMetadata","getAuditsMetadata","getIpAdressMetadata"],"sources":["/Users/sagiittah/Downloads/my-app/node_modules/@frontegg/rest-api/metadata/index.js"],"sourcesContent":["import { Get } from '../fetch';\n\nasync function getMetadata(body) {\n  var _data$rows, _data$rows2;\n\n  const data = await Get('/metadata', body);\n  if (data != null && (_data$rows = data.rows) != null && _data$rows[0]) return data == null ? void 0 : (_data$rows2 = data.rows) == null ? void 0 : _data$rows2[0];\n  throw new Error(`metadata not found: ${body.entityName}`);\n}\n\nasync function getIpMetadata(ip) {\n  const data = await Get(`/metadata/ip/${ip}`);\n  if (data) return data;\n  throw new Error(`ip metadata not found`);\n}\n\nexport async function getCurrentUserIpMetadata() {\n  const data = await Get(`/metadata/ipme`);\n  if (data) return data;\n  throw new Error(`ip metadata not found`);\n}\nexport const getNotificationsMetadata = async () => getMetadata({\n  entityName: 'notifications'\n});\nexport const getSamlMetadata = async () => getMetadata({\n  entityName: 'saml'\n});\nexport const getAuditsMetadata = async () => getMetadata({\n  entityName: 'audits'\n});\nexport const getIpAdressMetadata = async ip => getIpMetadata(ip);"],"mappings":"AAAA,SAASA,GAAG,QAAQ,UAAU;AAE9B,eAAeC,WAAW,CAACC,IAAI,EAAE;EAC/B,IAAIC,UAAU,EAAEC,WAAW;EAE3B,MAAMC,IAAI,GAAG,MAAML,GAAG,CAAC,WAAW,EAAEE,IAAI,CAAC;EACzC,IAAIG,IAAI,IAAI,IAAI,IAAI,CAACF,UAAU,GAAGE,IAAI,CAACC,IAAI,KAAK,IAAI,IAAIH,UAAU,CAAC,CAAC,CAAC,EAAE,OAAOE,IAAI,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAACD,WAAW,GAAGC,IAAI,CAACC,IAAI,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGF,WAAW,CAAC,CAAC,CAAC;EACjK,MAAM,IAAIG,KAAK,CAAE,uBAAsBL,IAAI,CAACM,UAAW,EAAC,CAAC;AAC3D;AAEA,eAAeC,aAAa,CAACC,EAAE,EAAE;EAC/B,MAAML,IAAI,GAAG,MAAML,GAAG,CAAE,gBAAeU,EAAG,EAAC,CAAC;EAC5C,IAAIL,IAAI,EAAE,OAAOA,IAAI;EACrB,MAAM,IAAIE,KAAK,CAAE,uBAAsB,CAAC;AAC1C;AAEA,OAAO,eAAeI,wBAAwB,GAAG;EAC/C,MAAMN,IAAI,GAAG,MAAML,GAAG,CAAE,gBAAe,CAAC;EACxC,IAAIK,IAAI,EAAE,OAAOA,IAAI;EACrB,MAAM,IAAIE,KAAK,CAAE,uBAAsB,CAAC;AAC1C;AACA,OAAO,MAAMK,wBAAwB,GAAG,YAAYX,WAAW,CAAC;EAC9DO,UAAU,EAAE;AACd,CAAC,CAAC;AACF,OAAO,MAAMK,eAAe,GAAG,YAAYZ,WAAW,CAAC;EACrDO,UAAU,EAAE;AACd,CAAC,CAAC;AACF,OAAO,MAAMM,iBAAiB,GAAG,YAAYb,WAAW,CAAC;EACvDO,UAAU,EAAE;AACd,CAAC,CAAC;AACF,OAAO,MAAMO,mBAAmB,GAAG,MAAML,EAAE,IAAID,aAAa,CAACC,EAAE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst accountSettingsState = {\n  loading: false\n};\nconst reducers = {\n  setAccountSettingsState: typeReducerForKey('accountSettingsState'),\n  resetAccountSettingsState: resetStateByKey('accountSettingsState', {\n    accountSettingsState\n  })\n};\nconst actions = {\n  loadAccountSettings: createAction(`${authStoreName}/loadAccountSettings`, payload => ({\n    payload\n  })),\n  saveAccountSettings: createAction(`${authStoreName}/saveAccountSettings`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { accountSettingsState, reducers as accountSettingsReducers, actions as accountSettingsActions };","map":{"version":3,"names":["createAction","resetStateByKey","typeReducerForKey","authStoreName","accountSettingsState","loading","reducers","setAccountSettingsState","resetAccountSettingsState","actions","loadAccountSettings","payload","saveAccountSettings","Matcher","accountSettingsReducers","accountSettingsActions"],"sources":["/Users/morank/Documents/my-app/node_modules/@frontegg/redux-store/auth/AccountSettingsState/index.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst accountSettingsState = {\n  loading: false\n};\nconst reducers = {\n  setAccountSettingsState: typeReducerForKey('accountSettingsState'),\n  resetAccountSettingsState: resetStateByKey('accountSettingsState', {\n    accountSettingsState\n  })\n};\nconst actions = {\n  loadAccountSettings: createAction(`${authStoreName}/loadAccountSettings`, payload => ({\n    payload\n  })),\n  saveAccountSettings: createAction(`${authStoreName}/saveAccountSettings`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { accountSettingsState, reducers as accountSettingsReducers, actions as accountSettingsActions };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,UAAU;AAC7D,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,MAAMC,oBAAoB,GAAG;EAC3BC,OAAO,EAAE;AACX,CAAC;AACD,MAAMC,QAAQ,GAAG;EACfC,uBAAuB,EAAEL,iBAAiB,CAAC,sBAAsB,CAAC;EAClEM,yBAAyB,EAAEP,eAAe,CAAC,sBAAsB,EAAE;IACjEG;EACF,CAAC;AACH,CAAC;AACD,MAAMK,OAAO,GAAG;EACdC,mBAAmB,EAAEV,YAAY,CAAE,GAAEG,aAAc,sBAAqB,EAAEQ,OAAO,KAAK;IACpFA;EACF,CAAC,CAAC,CAAC;EACHC,mBAAmB,EAAEZ,YAAY,CAAE,GAAEG,aAAc,sBAAqB,EAAEQ,OAAO,KAAK;IACpFA;EACF,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAME,OAAO,GAAG,CAAC,CAAC;AAClB,SAAST,oBAAoB,EAAEE,QAAQ,IAAIQ,uBAAuB,EAAEL,OAAO,IAAIM,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"callback\", \"samlVendor\"],\n  _excluded2 = [\"callback\", \"samlVendor\"];\nimport { all, call, put, select, takeEvery } from 'redux-saga/effects';\nimport { api } from '@frontegg/rest-api';\nimport { actions } from '../reducer';\nimport { SamlVendors } from './interfaces';\nimport { omitProps, readFileAsText } from '../../helpers';\nimport { delay } from '../utils';\nimport { samlConfigurationDemo, samlMetadataDemo, ssoStateDemo } from '../dummy';\nimport { refreshToken } from '../LoginState/saga';\nfunction* loadSSOConfigurations() {\n  try {\n    var _samlMetadata$configu, _samlMetadata$configu2;\n    yield put(actions.setSSOState({\n      loading: true\n    }));\n    const samlConfiguration = yield call(api.auth.getSamlConfiguration);\n    const oidcConfiguration = yield call(api.auth.getOidcConfiguration);\n    const samlMetadata = yield call(api.metadata.getSamlMetadata);\n    samlConfiguration.acsUrl = samlMetadata == null ? void 0 : (_samlMetadata$configu = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu.acsUrl;\n    samlConfiguration.spEntityId = samlMetadata == null ? void 0 : (_samlMetadata$configu2 = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu2.spEntityId;\n    samlConfiguration.isSamlActive = samlMetadata == null ? void 0 : samlMetadata.isActive;\n    yield put(actions.setSSOState({\n      samlConfiguration,\n      oidcConfiguration,\n      loading: false,\n      firstLoad: false\n    }));\n  } catch (e) {\n    yield put(actions.setSSOState({\n      error: e.message,\n      loading: false\n    }));\n  }\n}\nfunction saveSSOConfigurationsFile(_ref) {\n  let {\n    payload: configFile\n  } = _ref;\n  return function* () {\n    const oldSamlConfiguration = yield select(state => state.auth.ssoState.samlConfiguration);\n    const loaderKey = 'saving';\n    yield put(actions.setSSOState({\n      error: undefined,\n      [loaderKey]: true\n    }));\n    try {\n      const metadata = yield readFileAsText(configFile[0]);\n      const newSamlConfiguration = yield call(api.auth.updateSamlVendorMetadata, {\n        metadata\n      });\n      newSamlConfiguration.isSamlActive = oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.isSamlActive;\n      yield put(actions.setSSOState({\n        samlConfiguration: newSamlConfiguration,\n        error: undefined,\n        [loaderKey]: false\n      }));\n    } catch (e) {\n      yield put(actions.setSSOState({\n        samlConfiguration: oldSamlConfiguration,\n        error: e.message,\n        [loaderKey]: false\n      }));\n    }\n  }();\n}\nfunction saveSSOConfigurationsFileWithCallback(_ref2) {\n  let {\n    payload\n  } = _ref2;\n  return function* () {\n    const {\n      configFile,\n      callback\n    } = payload;\n    const oldSamlConfiguration = yield select(state => state.auth.ssoState.samlConfiguration);\n    const loaderKey = 'saving';\n    yield put(actions.setSSOState({\n      error: undefined,\n      [loaderKey]: true\n    }));\n    try {\n      const metadata = yield readFileAsText(configFile);\n      const newSamlConfiguration = yield call(api.auth.updateSamlVendorMetadata, {\n        metadata\n      });\n      newSamlConfiguration.isSamlActive = oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.isSamlActive;\n      yield put(actions.setSSOState({\n        samlConfiguration: newSamlConfiguration,\n        error: undefined,\n        [loaderKey]: false\n      }));\n      callback == null ? void 0 : callback(true);\n    } catch (e) {\n      yield put(actions.setSSOState({\n        samlConfiguration: oldSamlConfiguration,\n        error: e.message,\n        [loaderKey]: false\n      }));\n      callback == null ? void 0 : callback(null, e);\n    }\n  }();\n}\nfunction saveSSOConfigurations(_ref3) {\n  let {\n    payload\n  } = _ref3;\n  return function* () {\n    const {\n        callback,\n        samlVendor\n      } = payload,\n      newSamlConfiguration = _objectWithoutPropertiesLoose(payload, _excluded);\n    const oldSamlConfiguration = yield select(state => state.auth.ssoState.samlConfiguration);\n    const samlConfiguration = _extends({}, oldSamlConfiguration, newSamlConfiguration);\n    let loaderKey = 'saving';\n    if ((samlConfiguration == null ? void 0 : samlConfiguration.enabled) !== oldSamlConfiguration.enabled) {\n      loaderKey = 'loading';\n    }\n    try {\n      const firstTimeConfigure = !(samlConfiguration != null && samlConfiguration.domain);\n      if (firstTimeConfigure) {\n        yield put(actions.setSSOState({\n          samlConfiguration: _extends({}, oldSamlConfiguration, samlConfiguration)\n        }));\n        return;\n      } else {\n        yield put(actions.setSSOState({\n          error: undefined,\n          [loaderKey]: true\n        }));\n      }\n      if (payload.type === SamlVendors.Saml) {\n        var _samlMetadata$configu3, _samlMetadata$configu4;\n        const samlMetadata = yield call(api.metadata.getSamlMetadata);\n        samlConfiguration.acsUrl = samlMetadata == null ? void 0 : (_samlMetadata$configu3 = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu3.acsUrl;\n        samlConfiguration.spEntityId = samlMetadata == null ? void 0 : (_samlMetadata$configu4 = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu4.spEntityId;\n      }\n      const updateSamlConfiguration = omitProps(samlConfiguration, ['validated', 'generatedVerification', 'createdAt', 'updatedAt']);\n      if ((oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.domain) !== (updateSamlConfiguration == null ? void 0 : updateSamlConfiguration.domain)) {\n        updateSamlConfiguration.ssoEndpoint = '';\n        updateSamlConfiguration.publicCertificate = '';\n        updateSamlConfiguration.signRequest = false;\n      }\n      updateSamlConfiguration.type = samlVendor == null ? void 0 : samlVendor.toLowerCase();\n      const newSamlConfiguration = yield call(api.auth.updateSamlConfiguration, updateSamlConfiguration);\n      newSamlConfiguration.isSamlActive = oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.isSamlActive;\n      yield put(actions.setSSOState({\n        samlConfiguration: newSamlConfiguration,\n        error: undefined,\n        [loaderKey]: false\n      }));\n      callback == null ? void 0 : callback(true);\n    } catch (e) {\n      yield put(actions.setSSOState({\n        samlConfiguration: oldSamlConfiguration,\n        error: e.message,\n        [loaderKey]: false\n      }));\n      callback == null ? void 0 : callback(null, e);\n    }\n  }();\n}\nfunction validateSSODomain(_ref4) {\n  let {\n    payload: {\n      callback\n    } = {}\n  } = _ref4;\n  return function* () {\n    const samlConfiguration = yield select(state => state.auth.ssoState.samlConfiguration);\n    try {\n      yield put(actions.setSSOState({\n        error: undefined,\n        saving: true\n      }));\n      yield call(api.auth.validateSamlDomain);\n      yield put(actions.setSSOState({\n        samlConfiguration: _extends({}, samlConfiguration, {\n          validated: true\n        }),\n        error: undefined,\n        saving: false\n      }));\n      callback == null ? void 0 : callback(true);\n    } catch (e) {\n      yield put(actions.setSSOState({\n        samlConfiguration: _extends({}, samlConfiguration, {\n          validated: false\n        }),\n        error: e.message,\n        saving: false\n      }));\n      callback == null ? void 0 : callback(null, e);\n    }\n  }();\n}\nfunction* getAuthorizationRoles() {\n  try {\n    const data = yield call(api.auth.getSamlRoles);\n    const groupsData = yield call(api.auth.getSamlRolesGroups);\n    yield put(actions.setSSOState({\n      authorizationRoles: data.roleIds,\n      rolesGroups: groupsData,\n      error: undefined\n    }));\n  } catch (e) {\n    yield put(actions.setSSOState({\n      error: e.message\n    }));\n  }\n}\nfunction* updateRolesGroups(groups) {\n  try {\n    yield all(groups.map(group => call(api.auth.updateSamlGroup, {\n      id: group.id,\n      roleIds: group.roleIds,\n      group: group.group\n    })));\n  } catch (e) {\n    yield put(actions.setSSOState({\n      error: e.message\n    }));\n  }\n}\nfunction updateAuthorizationRoles(_ref5) {\n  let {\n    payload: {\n      callback,\n      authorizationRoles,\n      groups\n    }\n  } = _ref5;\n  return function* () {\n    try {\n      yield put(actions.setSSOState({\n        error: undefined,\n        saving: true\n      }));\n      yield call(api.auth.updateSamlRoles, {\n        roleIds: authorizationRoles\n      });\n      if (groups) {\n        yield updateRolesGroups(groups);\n      }\n      yield getAuthorizationRoles();\n      yield put(actions.setSSOState({\n        error: undefined,\n        saving: false\n      }));\n      callback == null ? void 0 : callback(true);\n    } catch (e) {\n      yield put(actions.setSSOState({\n        error: e.message,\n        saving: false\n      }));\n      callback == null ? void 0 : callback(null, e);\n    }\n  }();\n}\nfunction deleteSamlGroupFunction(_ref6) {\n  let {\n    payload: {\n      callback,\n      id\n    }\n  } = _ref6;\n  return function* () {\n    try {\n      yield put(actions.setSSOState({\n        error: undefined,\n        saving: true\n      }));\n      yield call(api.auth.deleteSamlGroup, {\n        id\n      });\n      yield getAuthorizationRoles();\n      yield put(actions.setSSOState({\n        error: undefined,\n        saving: false\n      }));\n      callback == null ? void 0 : callback(true);\n    } catch (e) {\n      yield put(actions.setSSOState({\n        error: e.message,\n        saving: false\n      }));\n      callback == null ? void 0 : callback(null, e);\n    }\n  }();\n}\nfunction createSamlGroupFunction(_ref7) {\n  let {\n    payload: {\n      group,\n      roleIds,\n      callback\n    }\n  } = _ref7;\n  return function* () {\n    try {\n      yield put(actions.setSSOState({\n        error: undefined,\n        saving: true\n      }));\n      yield call(api.auth.createSamlGroup, {\n        group,\n        roleIds\n      });\n      yield getAuthorizationRoles();\n      yield put(actions.setSSOState({\n        error: undefined,\n        saving: false\n      }));\n      callback == null ? void 0 : callback(true);\n    } catch (e) {\n      yield put(actions.setSSOState({\n        error: e.message,\n        saving: false\n      }));\n      callback == null ? void 0 : callback(null, e);\n    }\n  }();\n}\nfunction oidcPostloginFunction(_ref8) {\n  let {\n    payload\n  } = _ref8;\n  return function* () {\n    const data = {\n      code: payload.code,\n      redirectUri: payload.redirectUri,\n      RelayState: payload.state\n    };\n    try {\n      yield put(actions.setSSOState({\n        loading: true\n      }));\n      yield call(api.auth.oidcPostLoginV2, data);\n      yield call(refreshToken);\n      yield put(actions.setSSOState({\n        loading: false\n      }));\n    } catch (e) {\n      var _e$message;\n      yield put(actions.setSSOState({\n        loading: false,\n        error: (_e$message = e.message) != null ? _e$message : 'Failed to authenticate',\n        firstLoad: false\n      }));\n    }\n  }();\n}\nexport function* ssoSagas() {\n  yield takeEvery(actions.loadSSOConfigurations, loadSSOConfigurations);\n  yield takeEvery(actions.saveSSOConfigurations, saveSSOConfigurations);\n  yield takeEvery(actions.saveSSOConfigurationsFile, saveSSOConfigurationsFile);\n  yield takeEvery(actions.saveSSOConfigurationsFileWithCallback, saveSSOConfigurationsFileWithCallback);\n  yield takeEvery(actions.validateSSODomain, validateSSODomain);\n  yield takeEvery(actions.loadSSOAuthorizationRoles, getAuthorizationRoles);\n  yield takeEvery(actions.updateSSOAuthorizationRoles, updateAuthorizationRoles);\n  yield takeEvery(actions.deleteSamlGroup, deleteSamlGroupFunction);\n  yield takeEvery(actions.createSamlGroup, createSamlGroupFunction);\n  yield takeEvery(actions.oidcPostlogin, oidcPostloginFunction);\n}\n/*********************************\n *  Preview Sagas\n *********************************/\n\nfunction* loadSSOConfigurationsMock() {\n  yield put(actions.setSSOState({\n    loading: true\n  }));\n  yield delay();\n  yield put(actions.setSSOState({\n    samlConfiguration: samlConfigurationDemo,\n    loading: false,\n    firstLoad: false\n  }));\n}\nfunction saveSSOConfigurationsFileMock(_ref9) {\n  let {\n    payload: configFile\n  } = _ref9;\n  return function* () {\n    const loaderKey = 'saving';\n    yield put(actions.setSSOState({\n      error: undefined,\n      [loaderKey]: true\n    }));\n    const oldSamlConfiguration = yield select(state => state.auth.ssoState.samlConfiguration);\n    const newSamlConfiguration = _extends({}, oldSamlConfiguration, {\n      enabled: true\n    }, configFile[0]);\n    yield put(actions.setSSOState({\n      samlConfiguration: newSamlConfiguration,\n      error: undefined,\n      [loaderKey]: false\n    }));\n  }();\n}\nfunction saveSSOConfigurationsMock(_ref10) {\n  let {\n    payload\n  } = _ref10;\n  return function* () {\n    var _samlMetadataDemo$con, _samlMetadataDemo$con2;\n    const {\n        callback,\n        samlVendor\n      } = payload,\n      newSamlConfiguration = _objectWithoutPropertiesLoose(payload, _excluded2);\n    const oldSamlConfiguration = ssoStateDemo.samlConfiguration;\n    const samlConfiguration = _extends({}, oldSamlConfiguration, newSamlConfiguration);\n    let loaderKey = 'saving';\n    if ((samlConfiguration == null ? void 0 : samlConfiguration.enabled) !== oldSamlConfiguration.enabled) {\n      loaderKey = 'loading';\n    }\n    const firstTimeConfigure = !(samlConfiguration != null && samlConfiguration.domain);\n    if (firstTimeConfigure) {\n      yield put(actions.setSSOState({\n        samlConfiguration: _extends({}, oldSamlConfiguration, samlConfiguration)\n      }));\n      return;\n    } else {\n      yield put(actions.setSSOState({\n        error: undefined,\n        [loaderKey]: true\n      }));\n    }\n    yield delay();\n    samlConfiguration.acsUrl = samlMetadataDemo == null ? void 0 : (_samlMetadataDemo$con = samlMetadataDemo.configuration) == null ? void 0 : _samlMetadataDemo$con.acsUrl;\n    samlConfiguration.spEntityId = samlMetadataDemo == null ? void 0 : (_samlMetadataDemo$con2 = samlMetadataDemo.configuration) == null ? void 0 : _samlMetadataDemo$con2.spEntityId;\n    const updateSamlConfiguration = omitProps(samlConfiguration, ['validated', 'generatedVerification', 'createdAt', 'updatedAt']);\n    if ((oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.domain) !== (updateSamlConfiguration == null ? void 0 : updateSamlConfiguration.domain)) {\n      updateSamlConfiguration.ssoEndpoint = '';\n      updateSamlConfiguration.publicCertificate = '';\n      updateSamlConfiguration.signRequest = false;\n    }\n    updateSamlConfiguration.type = samlVendor == null ? void 0 : samlVendor.toLowerCase();\n    yield delay();\n    yield put(actions.setSSOState({\n      samlConfiguration: updateSamlConfiguration,\n      error: undefined,\n      [loaderKey]: false\n    }));\n    callback == null ? void 0 : callback(true);\n  }();\n}\nfunction validateSSODomainMock(_ref11) {\n  let {\n    payload: {\n      callback\n    } = {}\n  } = _ref11;\n  return function* () {\n    const samlConfiguration = ssoStateDemo.samlConfiguration;\n    yield put(actions.setSSOState({\n      error: undefined,\n      saving: true\n    }));\n    yield delay();\n    yield put(actions.setSSOState({\n      samlConfiguration: _extends({}, samlConfiguration, {\n        validated: true\n      }),\n      error: undefined,\n      saving: false\n    }));\n    callback == null ? void 0 : callback(true);\n  }();\n}\nfunction* getAuthorizationRolesMock() {\n  yield delay();\n  const data = {\n    roleIds: ['1', '2', '3']\n  };\n  yield put(actions.setSSOState({\n    authorizationRoles: data.roleIds,\n    error: undefined\n  }));\n}\nfunction updateAuthorizationRolesMock(_ref12) {\n  let {\n    payload: {\n      callback,\n      authorizationRoles\n    }\n  } = _ref12;\n  return function* () {\n    yield put(actions.setSSOState({\n      error: undefined,\n      saving: true\n    }));\n    yield delay();\n    yield put(actions.setSSOState({\n      authorizationRoles,\n      error: undefined,\n      saving: false\n    }));\n    callback == null ? void 0 : callback(true);\n  }();\n}\nexport function* ssoSagasMock() {\n  yield takeEvery(actions.loadSSOConfigurations, loadSSOConfigurationsMock);\n  yield takeEvery(actions.saveSSOConfigurations, saveSSOConfigurationsMock);\n  yield takeEvery(actions.saveSSOConfigurationsFile, saveSSOConfigurationsFileMock);\n  yield takeEvery(actions.validateSSODomain, validateSSODomainMock);\n  yield takeEvery(actions.loadSSOAuthorizationRoles, getAuthorizationRolesMock);\n  yield takeEvery(actions.updateSSOAuthorizationRoles, updateAuthorizationRolesMock);\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","all","call","put","select","takeEvery","api","actions","SamlVendors","omitProps","readFileAsText","delay","samlConfigurationDemo","samlMetadataDemo","ssoStateDemo","refreshToken","loadSSOConfigurations","_samlMetadata$configu","_samlMetadata$configu2","setSSOState","loading","samlConfiguration","auth","getSamlConfiguration","oidcConfiguration","getOidcConfiguration","samlMetadata","metadata","getSamlMetadata","acsUrl","configuration","spEntityId","isSamlActive","isActive","firstLoad","e","error","message","saveSSOConfigurationsFile","payload","configFile","oldSamlConfiguration","state","ssoState","loaderKey","undefined","newSamlConfiguration","updateSamlVendorMetadata","saveSSOConfigurationsFileWithCallback","callback","saveSSOConfigurations","samlVendor","enabled","firstTimeConfigure","domain","type","Saml","_samlMetadata$configu3","_samlMetadata$configu4","updateSamlConfiguration","ssoEndpoint","publicCertificate","signRequest","toLowerCase","validateSSODomain","saving","validateSamlDomain","validated","getAuthorizationRoles","data","getSamlRoles","groupsData","getSamlRolesGroups","authorizationRoles","roleIds","rolesGroups","updateRolesGroups","groups","map","group","updateSamlGroup","id","updateAuthorizationRoles","updateSamlRoles","deleteSamlGroupFunction","deleteSamlGroup","createSamlGroupFunction","createSamlGroup","oidcPostloginFunction","code","redirectUri","RelayState","oidcPostLoginV2","_e$message","ssoSagas","loadSSOAuthorizationRoles","updateSSOAuthorizationRoles","oidcPostlogin","loadSSOConfigurationsMock","saveSSOConfigurationsFileMock","saveSSOConfigurationsMock","_samlMetadataDemo$con","_samlMetadataDemo$con2","validateSSODomainMock","getAuthorizationRolesMock","updateAuthorizationRolesMock","ssoSagasMock"],"sources":["/Users/morank/Documents/my-app/node_modules/@frontegg/redux-store/auth/SSOState/saga.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"callback\", \"samlVendor\"],\n      _excluded2 = [\"callback\", \"samlVendor\"];\nimport { all, call, put, select, takeEvery } from 'redux-saga/effects';\nimport { api } from '@frontegg/rest-api';\nimport { actions } from '../reducer';\nimport { SamlVendors } from './interfaces';\nimport { omitProps, readFileAsText } from '../../helpers';\nimport { delay } from '../utils';\nimport { samlConfigurationDemo, samlMetadataDemo, ssoStateDemo } from '../dummy';\nimport { refreshToken } from '../LoginState/saga';\n\nfunction* loadSSOConfigurations() {\n  try {\n    var _samlMetadata$configu, _samlMetadata$configu2;\n\n    yield put(actions.setSSOState({\n      loading: true\n    }));\n    const samlConfiguration = yield call(api.auth.getSamlConfiguration);\n    const oidcConfiguration = yield call(api.auth.getOidcConfiguration);\n    const samlMetadata = yield call(api.metadata.getSamlMetadata);\n    samlConfiguration.acsUrl = samlMetadata == null ? void 0 : (_samlMetadata$configu = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu.acsUrl;\n    samlConfiguration.spEntityId = samlMetadata == null ? void 0 : (_samlMetadata$configu2 = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu2.spEntityId;\n    samlConfiguration.isSamlActive = samlMetadata == null ? void 0 : samlMetadata.isActive;\n    yield put(actions.setSSOState({\n      samlConfiguration,\n      oidcConfiguration,\n      loading: false,\n      firstLoad: false\n    }));\n  } catch (e) {\n    yield put(actions.setSSOState({\n      error: e.message,\n      loading: false\n    }));\n  }\n}\n\nfunction* saveSSOConfigurationsFile({\n  payload: configFile\n}) {\n  const oldSamlConfiguration = yield select(state => state.auth.ssoState.samlConfiguration);\n  const loaderKey = 'saving';\n  yield put(actions.setSSOState({\n    error: undefined,\n    [loaderKey]: true\n  }));\n\n  try {\n    const metadata = yield readFileAsText(configFile[0]);\n    const newSamlConfiguration = yield call(api.auth.updateSamlVendorMetadata, {\n      metadata\n    });\n    newSamlConfiguration.isSamlActive = oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.isSamlActive;\n    yield put(actions.setSSOState({\n      samlConfiguration: newSamlConfiguration,\n      error: undefined,\n      [loaderKey]: false\n    }));\n  } catch (e) {\n    yield put(actions.setSSOState({\n      samlConfiguration: oldSamlConfiguration,\n      error: e.message,\n      [loaderKey]: false\n    }));\n  }\n}\n\nfunction* saveSSOConfigurationsFileWithCallback({\n  payload\n}) {\n  const {\n    configFile,\n    callback\n  } = payload;\n  const oldSamlConfiguration = yield select(state => state.auth.ssoState.samlConfiguration);\n  const loaderKey = 'saving';\n  yield put(actions.setSSOState({\n    error: undefined,\n    [loaderKey]: true\n  }));\n\n  try {\n    const metadata = yield readFileAsText(configFile);\n    const newSamlConfiguration = yield call(api.auth.updateSamlVendorMetadata, {\n      metadata\n    });\n    newSamlConfiguration.isSamlActive = oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.isSamlActive;\n    yield put(actions.setSSOState({\n      samlConfiguration: newSamlConfiguration,\n      error: undefined,\n      [loaderKey]: false\n    }));\n    callback == null ? void 0 : callback(true);\n  } catch (e) {\n    yield put(actions.setSSOState({\n      samlConfiguration: oldSamlConfiguration,\n      error: e.message,\n      [loaderKey]: false\n    }));\n    callback == null ? void 0 : callback(null, e);\n  }\n}\n\nfunction* saveSSOConfigurations({\n  payload\n}) {\n  const {\n    callback,\n    samlVendor\n  } = payload,\n        newSamlConfiguration = _objectWithoutPropertiesLoose(payload, _excluded);\n\n  const oldSamlConfiguration = yield select(state => state.auth.ssoState.samlConfiguration);\n\n  const samlConfiguration = _extends({}, oldSamlConfiguration, newSamlConfiguration);\n\n  let loaderKey = 'saving';\n\n  if ((samlConfiguration == null ? void 0 : samlConfiguration.enabled) !== oldSamlConfiguration.enabled) {\n    loaderKey = 'loading';\n  }\n\n  try {\n    const firstTimeConfigure = !(samlConfiguration != null && samlConfiguration.domain);\n\n    if (firstTimeConfigure) {\n      yield put(actions.setSSOState({\n        samlConfiguration: _extends({}, oldSamlConfiguration, samlConfiguration)\n      }));\n      return;\n    } else {\n      yield put(actions.setSSOState({\n        error: undefined,\n        [loaderKey]: true\n      }));\n    }\n\n    if (payload.type === SamlVendors.Saml) {\n      var _samlMetadata$configu3, _samlMetadata$configu4;\n\n      const samlMetadata = yield call(api.metadata.getSamlMetadata);\n      samlConfiguration.acsUrl = samlMetadata == null ? void 0 : (_samlMetadata$configu3 = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu3.acsUrl;\n      samlConfiguration.spEntityId = samlMetadata == null ? void 0 : (_samlMetadata$configu4 = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu4.spEntityId;\n    }\n\n    const updateSamlConfiguration = omitProps(samlConfiguration, ['validated', 'generatedVerification', 'createdAt', 'updatedAt']);\n\n    if ((oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.domain) !== (updateSamlConfiguration == null ? void 0 : updateSamlConfiguration.domain)) {\n      updateSamlConfiguration.ssoEndpoint = '';\n      updateSamlConfiguration.publicCertificate = '';\n      updateSamlConfiguration.signRequest = false;\n    }\n\n    updateSamlConfiguration.type = samlVendor == null ? void 0 : samlVendor.toLowerCase();\n    const newSamlConfiguration = yield call(api.auth.updateSamlConfiguration, updateSamlConfiguration);\n    newSamlConfiguration.isSamlActive = oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.isSamlActive;\n    yield put(actions.setSSOState({\n      samlConfiguration: newSamlConfiguration,\n      error: undefined,\n      [loaderKey]: false\n    }));\n    callback == null ? void 0 : callback(true);\n  } catch (e) {\n    yield put(actions.setSSOState({\n      samlConfiguration: oldSamlConfiguration,\n      error: e.message,\n      [loaderKey]: false\n    }));\n    callback == null ? void 0 : callback(null, e);\n  }\n}\n\nfunction* validateSSODomain({\n  payload: {\n    callback\n  } = {}\n}) {\n  const samlConfiguration = yield select(state => state.auth.ssoState.samlConfiguration);\n\n  try {\n    yield put(actions.setSSOState({\n      error: undefined,\n      saving: true\n    }));\n    yield call(api.auth.validateSamlDomain);\n    yield put(actions.setSSOState({\n      samlConfiguration: _extends({}, samlConfiguration, {\n        validated: true\n      }),\n      error: undefined,\n      saving: false\n    }));\n    callback == null ? void 0 : callback(true);\n  } catch (e) {\n    yield put(actions.setSSOState({\n      samlConfiguration: _extends({}, samlConfiguration, {\n        validated: false\n      }),\n      error: e.message,\n      saving: false\n    }));\n    callback == null ? void 0 : callback(null, e);\n  }\n}\n\nfunction* getAuthorizationRoles() {\n  try {\n    const data = yield call(api.auth.getSamlRoles);\n    const groupsData = yield call(api.auth.getSamlRolesGroups);\n    yield put(actions.setSSOState({\n      authorizationRoles: data.roleIds,\n      rolesGroups: groupsData,\n      error: undefined\n    }));\n  } catch (e) {\n    yield put(actions.setSSOState({\n      error: e.message\n    }));\n  }\n}\n\nfunction* updateRolesGroups(groups) {\n  try {\n    yield all(groups.map(group => call(api.auth.updateSamlGroup, {\n      id: group.id,\n      roleIds: group.roleIds,\n      group: group.group\n    })));\n  } catch (e) {\n    yield put(actions.setSSOState({\n      error: e.message\n    }));\n  }\n}\n\nfunction* updateAuthorizationRoles({\n  payload: {\n    callback,\n    authorizationRoles,\n    groups\n  }\n}) {\n  try {\n    yield put(actions.setSSOState({\n      error: undefined,\n      saving: true\n    }));\n    yield call(api.auth.updateSamlRoles, {\n      roleIds: authorizationRoles\n    });\n\n    if (groups) {\n      yield updateRolesGroups(groups);\n    }\n\n    yield getAuthorizationRoles();\n    yield put(actions.setSSOState({\n      error: undefined,\n      saving: false\n    }));\n    callback == null ? void 0 : callback(true);\n  } catch (e) {\n    yield put(actions.setSSOState({\n      error: e.message,\n      saving: false\n    }));\n    callback == null ? void 0 : callback(null, e);\n  }\n}\n\nfunction* deleteSamlGroupFunction({\n  payload: {\n    callback,\n    id\n  }\n}) {\n  try {\n    yield put(actions.setSSOState({\n      error: undefined,\n      saving: true\n    }));\n    yield call(api.auth.deleteSamlGroup, {\n      id\n    });\n    yield getAuthorizationRoles();\n    yield put(actions.setSSOState({\n      error: undefined,\n      saving: false\n    }));\n    callback == null ? void 0 : callback(true);\n  } catch (e) {\n    yield put(actions.setSSOState({\n      error: e.message,\n      saving: false\n    }));\n    callback == null ? void 0 : callback(null, e);\n  }\n}\n\nfunction* createSamlGroupFunction({\n  payload: {\n    group,\n    roleIds,\n    callback\n  }\n}) {\n  try {\n    yield put(actions.setSSOState({\n      error: undefined,\n      saving: true\n    }));\n    yield call(api.auth.createSamlGroup, {\n      group,\n      roleIds\n    });\n    yield getAuthorizationRoles();\n    yield put(actions.setSSOState({\n      error: undefined,\n      saving: false\n    }));\n    callback == null ? void 0 : callback(true);\n  } catch (e) {\n    yield put(actions.setSSOState({\n      error: e.message,\n      saving: false\n    }));\n    callback == null ? void 0 : callback(null, e);\n  }\n}\n\nfunction* oidcPostloginFunction({\n  payload\n}) {\n  const data = {\n    code: payload.code,\n    redirectUri: payload.redirectUri,\n    RelayState: payload.state\n  };\n\n  try {\n    yield put(actions.setSSOState({\n      loading: true\n    }));\n    yield call(api.auth.oidcPostLoginV2, data);\n    yield call(refreshToken);\n    yield put(actions.setSSOState({\n      loading: false\n    }));\n  } catch (e) {\n    var _e$message;\n\n    yield put(actions.setSSOState({\n      loading: false,\n      error: (_e$message = e.message) != null ? _e$message : 'Failed to authenticate',\n      firstLoad: false\n    }));\n  }\n}\n\nexport function* ssoSagas() {\n  yield takeEvery(actions.loadSSOConfigurations, loadSSOConfigurations);\n  yield takeEvery(actions.saveSSOConfigurations, saveSSOConfigurations);\n  yield takeEvery(actions.saveSSOConfigurationsFile, saveSSOConfigurationsFile);\n  yield takeEvery(actions.saveSSOConfigurationsFileWithCallback, saveSSOConfigurationsFileWithCallback);\n  yield takeEvery(actions.validateSSODomain, validateSSODomain);\n  yield takeEvery(actions.loadSSOAuthorizationRoles, getAuthorizationRoles);\n  yield takeEvery(actions.updateSSOAuthorizationRoles, updateAuthorizationRoles);\n  yield takeEvery(actions.deleteSamlGroup, deleteSamlGroupFunction);\n  yield takeEvery(actions.createSamlGroup, createSamlGroupFunction);\n  yield takeEvery(actions.oidcPostlogin, oidcPostloginFunction);\n}\n/*********************************\n *  Preview Sagas\n *********************************/\n\nfunction* loadSSOConfigurationsMock() {\n  yield put(actions.setSSOState({\n    loading: true\n  }));\n  yield delay();\n  yield put(actions.setSSOState({\n    samlConfiguration: samlConfigurationDemo,\n    loading: false,\n    firstLoad: false\n  }));\n}\n\nfunction* saveSSOConfigurationsFileMock({\n  payload: configFile\n}) {\n  const loaderKey = 'saving';\n  yield put(actions.setSSOState({\n    error: undefined,\n    [loaderKey]: true\n  }));\n  const oldSamlConfiguration = yield select(state => state.auth.ssoState.samlConfiguration);\n\n  const newSamlConfiguration = _extends({}, oldSamlConfiguration, {\n    enabled: true\n  }, configFile[0]);\n\n  yield put(actions.setSSOState({\n    samlConfiguration: newSamlConfiguration,\n    error: undefined,\n    [loaderKey]: false\n  }));\n}\n\nfunction* saveSSOConfigurationsMock({\n  payload\n}) {\n  var _samlMetadataDemo$con, _samlMetadataDemo$con2;\n\n  const {\n    callback,\n    samlVendor\n  } = payload,\n        newSamlConfiguration = _objectWithoutPropertiesLoose(payload, _excluded2);\n\n  const oldSamlConfiguration = ssoStateDemo.samlConfiguration;\n\n  const samlConfiguration = _extends({}, oldSamlConfiguration, newSamlConfiguration);\n\n  let loaderKey = 'saving';\n\n  if ((samlConfiguration == null ? void 0 : samlConfiguration.enabled) !== oldSamlConfiguration.enabled) {\n    loaderKey = 'loading';\n  }\n\n  const firstTimeConfigure = !(samlConfiguration != null && samlConfiguration.domain);\n\n  if (firstTimeConfigure) {\n    yield put(actions.setSSOState({\n      samlConfiguration: _extends({}, oldSamlConfiguration, samlConfiguration)\n    }));\n    return;\n  } else {\n    yield put(actions.setSSOState({\n      error: undefined,\n      [loaderKey]: true\n    }));\n  }\n\n  yield delay();\n  samlConfiguration.acsUrl = samlMetadataDemo == null ? void 0 : (_samlMetadataDemo$con = samlMetadataDemo.configuration) == null ? void 0 : _samlMetadataDemo$con.acsUrl;\n  samlConfiguration.spEntityId = samlMetadataDemo == null ? void 0 : (_samlMetadataDemo$con2 = samlMetadataDemo.configuration) == null ? void 0 : _samlMetadataDemo$con2.spEntityId;\n  const updateSamlConfiguration = omitProps(samlConfiguration, ['validated', 'generatedVerification', 'createdAt', 'updatedAt']);\n\n  if ((oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.domain) !== (updateSamlConfiguration == null ? void 0 : updateSamlConfiguration.domain)) {\n    updateSamlConfiguration.ssoEndpoint = '';\n    updateSamlConfiguration.publicCertificate = '';\n    updateSamlConfiguration.signRequest = false;\n  }\n\n  updateSamlConfiguration.type = samlVendor == null ? void 0 : samlVendor.toLowerCase();\n  yield delay();\n  yield put(actions.setSSOState({\n    samlConfiguration: updateSamlConfiguration,\n    error: undefined,\n    [loaderKey]: false\n  }));\n  callback == null ? void 0 : callback(true);\n}\n\nfunction* validateSSODomainMock({\n  payload: {\n    callback\n  } = {}\n}) {\n  const samlConfiguration = ssoStateDemo.samlConfiguration;\n  yield put(actions.setSSOState({\n    error: undefined,\n    saving: true\n  }));\n  yield delay();\n  yield put(actions.setSSOState({\n    samlConfiguration: _extends({}, samlConfiguration, {\n      validated: true\n    }),\n    error: undefined,\n    saving: false\n  }));\n  callback == null ? void 0 : callback(true);\n}\n\nfunction* getAuthorizationRolesMock() {\n  yield delay();\n  const data = {\n    roleIds: ['1', '2', '3']\n  };\n  yield put(actions.setSSOState({\n    authorizationRoles: data.roleIds,\n    error: undefined\n  }));\n}\n\nfunction* updateAuthorizationRolesMock({\n  payload: {\n    callback,\n    authorizationRoles\n  }\n}) {\n  yield put(actions.setSSOState({\n    error: undefined,\n    saving: true\n  }));\n  yield delay();\n  yield put(actions.setSSOState({\n    authorizationRoles,\n    error: undefined,\n    saving: false\n  }));\n  callback == null ? void 0 : callback(true);\n}\n\nexport function* ssoSagasMock() {\n  yield takeEvery(actions.loadSSOConfigurations, loadSSOConfigurationsMock);\n  yield takeEvery(actions.saveSSOConfigurations, saveSSOConfigurationsMock);\n  yield takeEvery(actions.saveSSOConfigurationsFile, saveSSOConfigurationsFileMock);\n  yield takeEvery(actions.validateSSODomain, validateSSODomainMock);\n  yield takeEvery(actions.loadSSOAuthorizationRoles, getAuthorizationRolesMock);\n  yield takeEvery(actions.updateSSOAuthorizationRoles, updateAuthorizationRolesMock);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
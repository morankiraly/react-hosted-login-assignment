{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { SignUpStage } from './interfaces';\nimport { authStoreName } from '../../constants';\nconst signUpState = {\n  loading: false,\n  allowSignUps: false,\n  allowNotVerifiedUsersLogin: false,\n  firstLoad: true,\n  stage: SignUpStage.SignUp\n};\nconst reducers = {\n  setSignUpState: typeReducerForKey('signUpState'),\n  resetSignUpState: resetStateByKey('signUpState', {\n    signUpState\n  })\n};\nconst actions = {\n  signUpUser: createAction(`${authStoreName}/signUpUser`, payload => ({\n    payload\n  })),\n  resetSignUpStateSoft: createAction(`${authStoreName}/resetSignUpStateSoft`)\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { signUpState, reducers as signUpReducers, actions as signUpActions };","map":{"version":3,"names":["createAction","resetStateByKey","typeReducerForKey","SignUpStage","authStoreName","signUpState","loading","allowSignUps","allowNotVerifiedUsersLogin","firstLoad","stage","SignUp","reducers","setSignUpState","resetSignUpState","actions","signUpUser","payload","resetSignUpStateSoft","Matcher","signUpReducers","signUpActions"],"sources":["/Users/sagiittah/Downloads/my-app/node_modules/@frontegg/redux-store/auth/SignUp/index.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { SignUpStage } from './interfaces';\nimport { authStoreName } from '../../constants';\nconst signUpState = {\n  loading: false,\n  allowSignUps: false,\n  allowNotVerifiedUsersLogin: false,\n  firstLoad: true,\n  stage: SignUpStage.SignUp\n};\nconst reducers = {\n  setSignUpState: typeReducerForKey('signUpState'),\n  resetSignUpState: resetStateByKey('signUpState', {\n    signUpState\n  })\n};\nconst actions = {\n  signUpUser: createAction(`${authStoreName}/signUpUser`, payload => ({\n    payload\n  })),\n  resetSignUpStateSoft: createAction(`${authStoreName}/resetSignUpStateSoft`)\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { signUpState, reducers as signUpReducers, actions as signUpActions };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,UAAU;AAC7D,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,KAAK;EACdC,YAAY,EAAE,KAAK;EACnBC,0BAA0B,EAAE,KAAK;EACjCC,SAAS,EAAE,IAAI;EACfC,KAAK,EAAEP,WAAW,CAACQ;AACrB,CAAC;AACD,MAAMC,QAAQ,GAAG;EACfC,cAAc,EAAEX,iBAAiB,CAAC,aAAa,CAAC;EAChDY,gBAAgB,EAAEb,eAAe,CAAC,aAAa,EAAE;IAC/CI;EACF,CAAC;AACH,CAAC;AACD,MAAMU,OAAO,GAAG;EACdC,UAAU,EAAEhB,YAAY,CAAE,GAAEI,aAAc,aAAY,EAAEa,OAAO,KAAK;IAClEA;EACF,CAAC,CAAC,CAAC;EACHC,oBAAoB,EAAElB,YAAY,CAAE,GAAEI,aAAc,uBAAsB;AAC5E,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAMe,OAAO,GAAG,CAAC,CAAC;AAClB,SAASd,WAAW,EAAEO,QAAQ,IAAIQ,cAAc,EAAEL,OAAO,IAAIM,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}
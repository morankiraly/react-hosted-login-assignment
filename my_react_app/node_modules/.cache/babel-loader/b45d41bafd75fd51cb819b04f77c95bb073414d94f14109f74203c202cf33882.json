{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst provisioningState = {\n  loading: false\n};\nconst reducers = {\n  setProvisioningState: typeReducerForKey('provisioningState'),\n  resetProvisioningState: resetStateByKey('provisioningState', {\n    provisioningState\n  })\n};\nconst actions = {\n  loadProvisionConnections: createAction(`${authStoreName}/loadProvisionConnections`),\n  createProvisionConnection: createAction(`${authStoreName}/createProvisionConnection`, payload => ({\n    payload\n  })),\n  deleteProvisionConnection: createAction(`${authStoreName}/deleteProvisionConnection`, payload => ({\n    payload\n  })),\n  updateProvisionConnection: createAction(`${authStoreName}/updateProvisionConnection`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { provisioningState, reducers as provisioningReducers, actions as provisioningActions };","map":{"version":3,"names":["createAction","resetStateByKey","typeReducerForKey","authStoreName","provisioningState","loading","reducers","setProvisioningState","resetProvisioningState","actions","loadProvisionConnections","createProvisionConnection","payload","deleteProvisionConnection","updateProvisionConnection","Matcher","provisioningReducers","provisioningActions"],"sources":["/Users/morank/Documents/my-app/node_modules/@frontegg/redux-store/auth/Provisioning/index.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst provisioningState = {\n  loading: false\n};\nconst reducers = {\n  setProvisioningState: typeReducerForKey('provisioningState'),\n  resetProvisioningState: resetStateByKey('provisioningState', {\n    provisioningState\n  })\n};\nconst actions = {\n  loadProvisionConnections: createAction(`${authStoreName}/loadProvisionConnections`),\n  createProvisionConnection: createAction(`${authStoreName}/createProvisionConnection`, payload => ({\n    payload\n  })),\n  deleteProvisionConnection: createAction(`${authStoreName}/deleteProvisionConnection`, payload => ({\n    payload\n  })),\n  updateProvisionConnection: createAction(`${authStoreName}/updateProvisionConnection`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { provisioningState, reducers as provisioningReducers, actions as provisioningActions };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,UAAU;AAC7D,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,MAAMC,iBAAiB,GAAG;EACxBC,OAAO,EAAE;AACX,CAAC;AACD,MAAMC,QAAQ,GAAG;EACfC,oBAAoB,EAAEL,iBAAiB,CAAC,mBAAmB,CAAC;EAC5DM,sBAAsB,EAAEP,eAAe,CAAC,mBAAmB,EAAE;IAC3DG;EACF,CAAC;AACH,CAAC;AACD,MAAMK,OAAO,GAAG;EACdC,wBAAwB,EAAEV,YAAY,CAAE,GAAEG,aAAc,2BAA0B,CAAC;EACnFQ,yBAAyB,EAAEX,YAAY,CAAE,GAAEG,aAAc,4BAA2B,EAAES,OAAO,KAAK;IAChGA;EACF,CAAC,CAAC,CAAC;EACHC,yBAAyB,EAAEb,YAAY,CAAE,GAAEG,aAAc,4BAA2B,EAAES,OAAO,KAAK;IAChGA;EACF,CAAC,CAAC,CAAC;EACHE,yBAAyB,EAAEd,YAAY,CAAE,GAAEG,aAAc,4BAA2B,EAAES,OAAO,KAAK;IAChGA;EACF,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAMG,OAAO,GAAG,CAAC,CAAC;AAClB,SAASX,iBAAiB,EAAEE,QAAQ,IAAIU,oBAAoB,EAAEP,OAAO,IAAIQ,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
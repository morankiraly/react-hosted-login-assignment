{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst profileState = {\n  loading: false,\n  error: null\n};\nconst reducers = {\n  setProfileState: typeReducerForKey('profileState'),\n  resetProfileState: resetStateByKey('profileState', {\n    profileState\n  })\n};\nconst actions = {\n  loadProfile: createAction(`${authStoreName}/loadProfile`),\n  saveProfile: createAction(`${authStoreName}/saveProfile`, payload => ({\n    payload\n  })),\n  changePassword: createAction(`${authStoreName}/changePassword`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { profileState, reducers as profileReducers, actions as profileActions };","map":{"version":3,"names":["createAction","resetStateByKey","typeReducerForKey","authStoreName","profileState","loading","error","reducers","setProfileState","resetProfileState","actions","loadProfile","saveProfile","payload","changePassword","Matcher","profileReducers","profileActions"],"sources":["/Users/morank/Documents/react-hosted-login-assignment/my-app/node_modules/@frontegg/redux-store/auth/ProfileState/index.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst profileState = {\n  loading: false,\n  error: null\n};\nconst reducers = {\n  setProfileState: typeReducerForKey('profileState'),\n  resetProfileState: resetStateByKey('profileState', {\n    profileState\n  })\n};\nconst actions = {\n  loadProfile: createAction(`${authStoreName}/loadProfile`),\n  saveProfile: createAction(`${authStoreName}/saveProfile`, payload => ({\n    payload\n  })),\n  changePassword: createAction(`${authStoreName}/changePassword`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { profileState, reducers as profileReducers, actions as profileActions };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,UAAU;AAC7D,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AACD,MAAMC,QAAQ,GAAG;EACfC,eAAe,EAAEN,iBAAiB,CAAC,cAAc,CAAC;EAClDO,iBAAiB,EAAER,eAAe,CAAC,cAAc,EAAE;IACjDG;EACF,CAAC;AACH,CAAC;AACD,MAAMM,OAAO,GAAG;EACdC,WAAW,EAAEX,YAAY,CAAE,GAAEG,aAAc,cAAa,CAAC;EACzDS,WAAW,EAAEZ,YAAY,CAAE,GAAEG,aAAc,cAAa,EAAEU,OAAO,KAAK;IACpEA;EACF,CAAC,CAAC,CAAC;EACHC,cAAc,EAAEd,YAAY,CAAE,GAAEG,aAAc,iBAAgB,EAAEU,OAAO,KAAK;IAC1EA;EACF,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAME,OAAO,GAAG,CAAC,CAAC;AAClB,SAASX,YAAY,EAAEG,QAAQ,IAAIS,eAAe,EAAEN,OAAO,IAAIO,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}
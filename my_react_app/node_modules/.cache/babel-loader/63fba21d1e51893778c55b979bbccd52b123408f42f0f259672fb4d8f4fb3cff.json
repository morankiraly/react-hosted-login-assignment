{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst sessionsState = {\n  loading: false,\n  sessions: []\n};\nconst reducers = {\n  setSessionsState: typeReducerForKey('sessionsState'),\n  resetSessionsState: resetStateByKey('sessionsState', {\n    sessionsState\n  })\n};\nconst actions = {\n  loadUserSessions: createAction(`${authStoreName}/loadUserSessions`),\n  loadCurrentUserSession: createAction(`${authStoreName}/loadCurrentUserSession`),\n  deleteUserSession: createAction(`${authStoreName}/deleteUserSession`, payload => ({\n    payload\n  })),\n  deleteAllUserSessions: createAction(`${authStoreName}/deleteAllUserSessions`),\n  revokeUserSessions: createAction(`${authStoreName}/revokeUserSessions`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { sessionsState, reducers as sessionsReducers, actions as sessionsActions };","map":{"version":3,"names":["createAction","resetStateByKey","typeReducerForKey","authStoreName","sessionsState","loading","sessions","reducers","setSessionsState","resetSessionsState","actions","loadUserSessions","loadCurrentUserSession","deleteUserSession","payload","deleteAllUserSessions","revokeUserSessions","Matcher","sessionsReducers","sessionsActions"],"sources":["/Users/morank/Documents/my-app/node_modules/@frontegg/redux-store/auth/SessionsState/index.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst sessionsState = {\n  loading: false,\n  sessions: []\n};\nconst reducers = {\n  setSessionsState: typeReducerForKey('sessionsState'),\n  resetSessionsState: resetStateByKey('sessionsState', {\n    sessionsState\n  })\n};\nconst actions = {\n  loadUserSessions: createAction(`${authStoreName}/loadUserSessions`),\n  loadCurrentUserSession: createAction(`${authStoreName}/loadCurrentUserSession`),\n  deleteUserSession: createAction(`${authStoreName}/deleteUserSession`, payload => ({\n    payload\n  })),\n  deleteAllUserSessions: createAction(`${authStoreName}/deleteAllUserSessions`),\n  revokeUserSessions: createAction(`${authStoreName}/revokeUserSessions`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { sessionsState, reducers as sessionsReducers, actions as sessionsActions };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,UAAU;AAC7D,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,MAAMC,aAAa,GAAG;EACpBC,OAAO,EAAE,KAAK;EACdC,QAAQ,EAAE;AACZ,CAAC;AACD,MAAMC,QAAQ,GAAG;EACfC,gBAAgB,EAAEN,iBAAiB,CAAC,eAAe,CAAC;EACpDO,kBAAkB,EAAER,eAAe,CAAC,eAAe,EAAE;IACnDG;EACF,CAAC;AACH,CAAC;AACD,MAAMM,OAAO,GAAG;EACdC,gBAAgB,EAAEX,YAAY,CAAE,GAAEG,aAAc,mBAAkB,CAAC;EACnES,sBAAsB,EAAEZ,YAAY,CAAE,GAAEG,aAAc,yBAAwB,CAAC;EAC/EU,iBAAiB,EAAEb,YAAY,CAAE,GAAEG,aAAc,oBAAmB,EAAEW,OAAO,KAAK;IAChFA;EACF,CAAC,CAAC,CAAC;EACHC,qBAAqB,EAAEf,YAAY,CAAE,GAAEG,aAAc,wBAAuB,CAAC;EAC7Ea,kBAAkB,EAAEhB,YAAY,CAAE,GAAEG,aAAc,qBAAoB,EAAEW,OAAO,KAAK;IAClFA;EACF,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAMG,OAAO,GAAG,CAAC,CAAC;AAClB,SAASb,aAAa,EAAEG,QAAQ,IAAIW,gBAAgB,EAAER,OAAO,IAAIS,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}
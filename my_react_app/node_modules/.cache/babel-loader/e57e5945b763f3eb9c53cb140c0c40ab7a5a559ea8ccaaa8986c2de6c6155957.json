{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { ForgotPasswordStep } from './interfaces';\nimport { authStoreName } from '../../constants';\nconst forgotPasswordState = {\n  step: ForgotPasswordStep.forgotPassword,\n  loading: false,\n  email: '',\n  passwordConfig: null\n};\nconst reducers = {\n  setForgotPasswordState: typeReducerForKey('forgotPasswordState'),\n  resetForgotPasswordState: resetStateByKey('forgotPasswordState', {\n    forgotPasswordState\n  })\n};\nconst actions = {\n  forgotPassword: createAction(`${authStoreName}/forgotPassword`, payload => ({\n    payload\n  })),\n  resetPassword: createAction(`${authStoreName}/resetPassword`, payload => ({\n    payload\n  })),\n  loadPasswordConfig: createAction(`${authStoreName}/loadPasswordConfig`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { forgotPasswordState, reducers as forgotPasswordReducers, actions as forgotPasswordActions };","map":{"version":3,"names":["createAction","resetStateByKey","typeReducerForKey","ForgotPasswordStep","authStoreName","forgotPasswordState","step","forgotPassword","loading","email","passwordConfig","reducers","setForgotPasswordState","resetForgotPasswordState","actions","payload","resetPassword","loadPasswordConfig","Matcher","forgotPasswordReducers","forgotPasswordActions"],"sources":["/Users/morank/Documents/my-app/node_modules/@frontegg/redux-store/auth/ForgotPasswordState/index.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { ForgotPasswordStep } from './interfaces';\nimport { authStoreName } from '../../constants';\nconst forgotPasswordState = {\n  step: ForgotPasswordStep.forgotPassword,\n  loading: false,\n  email: '',\n  passwordConfig: null\n};\nconst reducers = {\n  setForgotPasswordState: typeReducerForKey('forgotPasswordState'),\n  resetForgotPasswordState: resetStateByKey('forgotPasswordState', {\n    forgotPasswordState\n  })\n};\nconst actions = {\n  forgotPassword: createAction(`${authStoreName}/forgotPassword`, payload => ({\n    payload\n  })),\n  resetPassword: createAction(`${authStoreName}/resetPassword`, payload => ({\n    payload\n  })),\n  loadPasswordConfig: createAction(`${authStoreName}/loadPasswordConfig`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { forgotPasswordState, reducers as forgotPasswordReducers, actions as forgotPasswordActions };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,UAAU;AAC7D,SAASC,kBAAkB,QAAQ,cAAc;AACjD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,MAAMC,mBAAmB,GAAG;EAC1BC,IAAI,EAAEH,kBAAkB,CAACI,cAAc;EACvCC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,EAAE;EACTC,cAAc,EAAE;AAClB,CAAC;AACD,MAAMC,QAAQ,GAAG;EACfC,sBAAsB,EAAEV,iBAAiB,CAAC,qBAAqB,CAAC;EAChEW,wBAAwB,EAAEZ,eAAe,CAAC,qBAAqB,EAAE;IAC/DI;EACF,CAAC;AACH,CAAC;AACD,MAAMS,OAAO,GAAG;EACdP,cAAc,EAAEP,YAAY,CAAE,GAAEI,aAAc,iBAAgB,EAAEW,OAAO,KAAK;IAC1EA;EACF,CAAC,CAAC,CAAC;EACHC,aAAa,EAAEhB,YAAY,CAAE,GAAEI,aAAc,gBAAe,EAAEW,OAAO,KAAK;IACxEA;EACF,CAAC,CAAC,CAAC;EACHE,kBAAkB,EAAEjB,YAAY,CAAE,GAAEI,aAAc,qBAAoB,EAAEW,OAAO,KAAK;IAClFA;EACF,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAMG,OAAO,GAAG,CAAC,CAAC;AAClB,SAASb,mBAAmB,EAAEM,QAAQ,IAAIQ,sBAAsB,EAAEL,OAAO,IAAIM,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n  _excluded2 = [\"id\", \"enabled\"];\n\n/* eslint-disable */\nimport { all, call, put, select, takeEvery, takeLatest } from 'redux-saga/effects';\nimport { actions as connectivityActions } from './reducer';\nimport { channels, channels2Platform, type2ApiGet, type2ApiPost } from './consts';\nimport { api } from '@frontegg/rest-api';\nconst addApi = ['categories', 'channelMap'];\nfunction* loadPlatformData(ch) {\n  return yield call(loadFunction, {\n    payload: {\n      api: ch\n    },\n    type: ''\n  });\n}\nfunction loadDataFunction(_ref2) {\n  let {\n    payload = channels\n  } = _ref2;\n  return function* () {\n    yield put(connectivityActions.setConnectivityState({\n      isLoading: true\n    }));\n    try {\n      // @ts-ignore\n      const values = yield all([\n      // @ts-ignore\n      ...payload.map(loadPlatformData),\n      // @ts-ignore\n      yield loadFunction({\n        payload: {\n          api: 'categories'\n        },\n        type: ''\n      }),\n      // @ts-ignore\n      yield function* () {\n        // @ts-ignore\n        const res = yield all(payload.map(function* (ch) {\n          // @ts-ignore\n          return yield loadFunction({\n            payload: {\n              api: 'channelMap',\n              params: ch\n            },\n            type: ''\n          });\n        }));\n        return res.reduce((acc, curr, idx) => _extends({}, acc, {\n          [`${payload[idx]}`]: curr\n        }), {});\n      }()]); // @ts-ignore\n\n      const webhooks = yield loadFunction({\n        payload: {\n          api: 'webhook'\n        },\n        type: ''\n      });\n      const data = values.reduce((acc, curr, idx) => payload[idx] ? values[values.length - 1][payload[idx]].length ? _extends({}, acc, {\n        [`${payload[idx]}`]: curr,\n        list: [...acc.list, {\n          id: idx,\n          key: payload[idx],\n          events: channels2Platform[payload[idx]].events(curr),\n          active: channels2Platform[payload[idx]].isActive(curr),\n          platform: channels2Platform[payload[idx]].title,\n          image: channels2Platform[payload[idx]].image\n        }]\n      }) : acc : _extends({}, acc, {\n        [`${addApi[idx - payload.length]}`]: curr\n      }), {\n        list: [],\n        webhook: webhooks\n      });\n      yield put(connectivityActions.setConnectivityState(_extends({}, data, {\n        error: undefined,\n        isSaving: false,\n        isLoading: false\n      })));\n    } catch (e) {\n      yield put(connectivityActions.setConnectivityState({\n        isLoading: false\n      }));\n    }\n  }();\n}\nfunction loadFunction(_ref3) {\n  let {\n    payload: {\n      api,\n      params\n    }\n  } = _ref3;\n  return function* () {\n    try {\n      // TODO: [ Refactor Saga ] refactor mapping routes\n      // @ts-ignore\n      return yield call(type2ApiGet[api], params);\n    } catch (e) {\n      return undefined;\n    }\n  }();\n}\nfunction* loadSlackFunction() {\n  try {\n    yield put(connectivityActions.setConnectivityState({\n      slackChannels: {\n        isLoading: true\n      }\n    })); // TODO: [Typescript 4.8] fix @frontegg/rest-api return value\n    // @ts-ignore\n\n    const data = yield call(api.connectivity.getSlackChannels);\n    yield put(connectivityActions.setConnectivityState({\n      error: undefined,\n      slackChannels: {\n        isLoading: false,\n        data\n      }\n    }));\n  } catch (e) {\n    yield put(connectivityActions.setConnectivityState({\n      error: undefined,\n      slackChannels: {\n        isLoading: false\n      }\n    }));\n  }\n}\nfunction* checkNewStatus(platform, data) {\n  const {\n    connectivity: {\n      list\n    }\n  } = yield select();\n  const currPlatform = list.find(_ref4 => {\n    let {\n      key\n    } = _ref4;\n    return key === platform;\n  });\n  if (!currPlatform) return;\n  const newActive = channels2Platform[platform].isActive(data);\n  if (newActive === currPlatform.active) return; //TODO: double check\n\n  yield put(connectivityActions.setConnectivityState({\n    list: list.map(elm => elm.key === platform ? _extends({}, elm, {\n      active: newActive\n    }) : elm)\n  }));\n}\nfunction postDataFunction(_ref5) {\n  let {\n    payload: {\n      platform,\n      data,\n      callback\n    }\n  } = _ref5;\n  return function* () {\n    const {\n      processIds\n    } = yield select(state => state.connectivity);\n    try {\n      yield put(connectivityActions.setConnectivityState({\n        isSaving: true,\n        //@ts-ignore\n        processIds: platform === 'webhook' ? [data._id, ...processIds] : processIds\n      }));\n      if (platform === 'slack') {\n        yield postSlackData({\n          payload: data,\n          type: ''\n        });\n      } else if (['sms', 'email'].includes(platform)) {\n        yield postEmailSMSData({\n          payload: data,\n          type: platform\n        });\n      } else {\n        yield call(type2ApiPost[platform], data);\n      }\n      if (!['sms', 'email'].includes(platform)) {\n        // @ts-ignore\n        const newData = yield loadFunction({\n          payload: {\n            api: platform\n          },\n          type: ''\n        });\n        if (platform === 'webhook') {\n          newData.id = data._id;\n        }\n        yield put(connectivityActions.setConnectivityState({\n          error: undefined,\n          isSaving: false,\n          [`${platform}`]: newData,\n          processIds: newData.id ? processIds.filter(el => el !== newData.id) : processIds\n        }));\n        yield checkNewStatus(platform, newData);\n        callback == null ? void 0 : callback(true);\n      }\n    } catch (e) {\n      var _e$message;\n      yield put(connectivityActions.setConnectivityState({\n        error: (_e$message = e.message) != null ? _e$message : e.toString(),\n        isSaving: false,\n        isLoading: false\n      }));\n    }\n  }();\n}\nfunction postSlackData(_ref6) {\n  let {\n    payload\n  } = _ref6;\n  return function* () {\n    const {\n      connectivity: {\n        slack\n      }\n    } = yield select();\n    if (!slack) {\n      return;\n    }\n    const {\n      slackSubscriptions: stateSlackSubscriptions\n    } = slack;\n    const {\n      slackSubscriptions\n    } = payload;\n    yield all([...slackSubscriptions.reduce((acc, curr) => {\n      var _curr$slackEvents$0$c, _curr$slackEvents$0$c2;\n      if (!curr.id && curr.slackEvents && (_curr$slackEvents$0$c = curr.slackEvents[0].channelIds) != null && _curr$slackEvents$0$c.length) {\n        return [...acc, curr];\n      }\n      const el = stateSlackSubscriptions == null ? void 0 : stateSlackSubscriptions.find(_ref => {\n        let {\n            id\n          } = _ref,\n          props = _objectWithoutPropertiesLoose(_ref, _excluded);\n        return id === curr.id && JSON.stringify(_extends({\n          id\n        }, props)) !== JSON.stringify(curr);\n      });\n      if (el && curr.slackEvents && (_curr$slackEvents$0$c2 = curr.slackEvents[0].channelIds) != null && _curr$slackEvents$0$c2.length) {\n        return [...acc, curr];\n      }\n      return acc;\n    }, []).map(function* (el) {\n      // @ts-ignore\n      return yield call(type2ApiPost.slack, el);\n    }), ...slackSubscriptions.reduce((acc, curr) => {\n      if (curr.id && !curr.slackEvents[0].channelIds.length) {\n        return [...acc, curr];\n      }\n      return acc;\n    }, []).map(function* (el) {\n      // @ts-ignore\n      return yield call(api.connectivity.deleteSlackConfiguration, el);\n    }) // clean the old data\n    // ...stateSlackSubscriptions\n    //   // @ts-ignore\n    //   .reduce((acc, curr) => {\n    //     const el = slackSubscriptions.find(({ id }) => id === curr.id);\n    //     if (!el) {\n    //       return [...acc, curr];\n    //     }\n    //     return acc;\n    //   }, [])\n    //   // @ts-ignore\n    //   .map(function* (el) {\n    //     return yield call(api.connectivity.deleteSlackConfiguration, el as Required<ISlackSubscription>);\n    //   }),\n    ]);\n  }();\n}\n\nfunction postEmailSMSData(_ref7) {\n  let {\n    payload,\n    type\n  } = _ref7;\n  return function* () {\n    const {\n      connectivity\n    } = yield select();\n    const {\n      processIds\n    } = yield select(state => state.connectivity);\n    const stateData = connectivity[type];\n    if (!stateData) return;\n    let actionsResult = [];\n    try {\n      actionsResult = yield all([\n      // create new\n      ...payload.reduce((acc, curr) => {\n        const state = stateData.find(_ref8 => {\n          let {\n            eventKey\n          } = _ref8;\n          return eventKey === curr.eventKey;\n        });\n        if (!state && curr.subscriptions[0].recipients.filter(el => el).length) {\n          return [...acc, curr];\n        }\n        return acc;\n      }, []).map(function* (data) {\n        // TODO: [Typescript 4.8] fix @frontegg/rest-api return value\n        // @ts-ignore\n        return yield call(type === 'email' ? api.connectivity.postEmailConfiguration : api.connectivity.postSMSConfiguration, data);\n      }),\n      // update exists\n      ...payload.reduce((acc, curr) => {\n        const state = stateData.find(_ref9 => {\n          let {\n            eventKey\n          } = _ref9;\n          return eventKey === curr.eventKey;\n        });\n        if (state && JSON.stringify(state) !== JSON.stringify(curr)) {\n          return [...acc, curr];\n        }\n        return acc;\n      }, []).map(function* (data) {\n        const {\n          subscriptions,\n          eventKey\n        } = data;\n        const _subscriptions$ = subscriptions[0],\n          {\n            id = '',\n            enabled\n          } = _subscriptions$,\n          body = _objectWithoutPropertiesLoose(_subscriptions$, _excluded2); // @ts-ignore\n\n        return yield all([\n        // @ts-ignore\n        yield call(type === 'email' ? api.connectivity.patchEmailConfiguration : api.connectivity.patchSMSConfiguration, {\n          eventKey,\n          enabled\n        }),\n        // @ts-ignore\n        yield call(type === 'email' ? api.connectivity.putEmailSubscriptions : api.connectivity.putSMSSubscriptions, id, eventKey, _extends({}, body, {\n          enabled\n        }))]);\n      }),\n      // delete record with empty recipients\n      ...payload.reduce((acc, curr) => {\n        const state = stateData.find(_ref10 => {\n          let {\n            eventKey\n          } = _ref10;\n          return eventKey === curr.eventKey;\n        });\n        if (state && state.subscriptions[0].recipients.length && !curr.subscriptions[0].recipients.filter(el => !!el).length) {\n          return [...acc, curr];\n        }\n        return acc;\n      }, []).map(function (_ref11) {\n        let {\n          eventKey,\n          subscriptions\n        } = _ref11;\n        return function* () {\n          return call(type === 'email' ? api.connectivity.deleteEmailSubscriptions : api.connectivity.deleteSMSSubscriptions, eventKey, subscriptions[0].id || '');\n        }();\n      })]);\n    } catch {}\n    if (actionsResult.length) {\n      // @ts-ignore\n      const newData = yield loadFunction({\n        payload: {\n          api: type\n        },\n        type: ''\n      }); // yield put(connectivityActions.postDataSuccess({ platform: type, data: newData }));\n\n      yield put(connectivityActions.setConnectivityState({\n        error: undefined,\n        isSaving: false,\n        [`${type}`]: newData,\n        processIds: newData.id ? processIds.filter(el => el !== newData.id) : processIds\n      }));\n      yield checkNewStatus(type, newData);\n    } else {\n      // yield put(connectivityActions.postDataSuccess({ platform: type, data: stateData }));\n      yield put(connectivityActions.setConnectivityState({\n        error: undefined,\n        isSaving: false,\n        [`${type}`]: stateData,\n        processIds: processIds\n      }));\n    }\n  }();\n}\nfunction postCodeFunction(_ref12) {\n  let {\n    payload\n  } = _ref12;\n  return function* () {\n    try {\n      yield api.connectivity.postSlackCode(payload);\n    } catch {} // yield put(connectivityActions.postCodeSuccess());\n\n    yield put(connectivityActions.setConnectivityState({\n      error: undefined,\n      isSaving: false\n    }));\n  }();\n}\nfunction* loadSlackPermissions() {\n  const {\n    slackChannels\n  } = yield select(state => state.connectivity);\n  try {\n    yield put(connectivityActions.setConnectivityState({\n      slackChannels: _extends({}, slackChannels, {\n        isLoadingScope: true\n      })\n    }));\n    const {\n      clientId\n    } = yield call(api.connectivity.getSlackScope); // yield put(connectivityActions.loadScopeSuccess(clientId));\n\n    yield put(connectivityActions.setConnectivityState({\n      slackChannels: {\n        error: undefined,\n        clientId,\n        isLoadingScope: false,\n        isLoading: false\n      }\n    }));\n  } catch {\n    // yield put(connectivityActions.loadScopeSuccess(null));\n    yield put(connectivityActions.setConnectivityState({\n      slackChannels: {\n        error: undefined,\n        isLoadingScope: false,\n        isLoading: false\n      }\n    }));\n  }\n}\nfunction deleteWebhookConfigFunction(_ref13) {\n  let {\n    payload\n  } = _ref13;\n  return function* () {\n    const {\n      callback,\n      webhookId\n    } = payload;\n    const {\n      processIds\n    } = yield select(state => state.connectivity);\n    try {\n      yield put(connectivityActions.setConnectivityState({\n        isSaving: true\n      }));\n      yield call(api.connectivity.deleteWebhooksConfiguration, webhookId);\n    } catch (e) {\n      callback == null ? void 0 : callback(null, e.message);\n    } // @ts-ignore\n\n    const newData = yield loadFunction({\n      payload: {\n        api: 'webhook'\n      },\n      type: ''\n    });\n    if (newData) {\n      yield put(connectivityActions.setConnectivityState({\n        error: undefined,\n        isSaving: false,\n        webhook: newData,\n        processIds: newData.id ? processIds.filter(el => el !== newData.id) : processIds\n      }));\n    }\n    callback == null ? void 0 : callback(true);\n  }();\n}\nfunction postWebhookTestFunction(_ref14) {\n  let {\n    payload\n  } = _ref14;\n  return function* () {\n    try {\n      yield put(connectivityActions.setConnectivityState({\n        isTesting: true\n      }));\n      const {\n        statusCode,\n        body\n      } = yield call(api.connectivity.postWebhookTest, payload);\n      if ([201, 200].includes(statusCode)) {\n        // yield put(connectivityActions.postWebhookTestSuccess('success', JSON.stringify(body, null, 2)));\n        const message = JSON.stringify(body, null, 2);\n        yield put(connectivityActions.setConnectivityState({\n          isTesting: false,\n          testResult: {\n            status: 'success',\n            message\n          }\n        }));\n      } else {\n        // yield put(connectivityActions.postWebhookTestSuccess('failed', body.toString()));\n        yield put(connectivityActions.setConnectivityState({\n          isTesting: false,\n          testResult: {\n            status: 'failed'\n          }\n        }));\n      }\n    } catch (e) {\n      // yield put(connectivityActions.postWebhookTestSuccess('failed', e.toString()));\n      yield put(connectivityActions.setConnectivityState({\n        isTesting: false,\n        testResult: {\n          status: 'failed',\n          message: e.toString()\n        }\n      }));\n    }\n  }();\n}\nfunction postWebhookRetryFunction(_ref15) {\n  let {\n    payload\n  } = _ref15;\n  return function* () {\n    try {\n      const {\n        statusCode\n      } = yield call(api.connectivity.postWebhookRetry, payload);\n      yield put(connectivityActions.postWebhookRetryResult({\n        [payload]: {\n          isProcess: false,\n          success: statusCode === 202\n        }\n      }));\n    } catch (e) {\n      yield put(connectivityActions.postWebhookRetryResult({\n        [payload]: {\n          isProcess: false,\n          success: false\n        }\n      }));\n    }\n  }();\n}\nfunction loadWebhookLogsFunction(_ref16) {\n  let {\n    payload: {\n      id,\n      limit,\n      offset\n    }\n  } = _ref16;\n  return function* () {\n    const {\n      webhookLogs\n    } = yield select(state => state.connectivity);\n    try {\n      yield put(connectivityActions.setConnectivityState({\n        webhookLogs: _extends({}, webhookLogs, {\n          isLoading: true\n        })\n      })); //TODO: Fix types\n      //@ts-ignore\n\n      const data = yield call(api.connectivity.getWebhookLog, id, offset, limit); // yield put(connectivityActions.loadWebhookLogsSuccess(data));\n\n      yield put(connectivityActions.setConnectivityState({\n        error: undefined,\n        webhookLogs: _extends({\n          isLoading: false\n        }, data)\n      }));\n    } catch (e) {\n      yield put(connectivityActions.setConnectivityState({\n        error: undefined,\n        webhookLogs: {\n          isLoading: false\n        }\n      }));\n    }\n  }();\n}\nexport function* sagas() {\n  yield takeEvery(connectivityActions.loadDataAction, loadDataFunction);\n  yield takeLatest(connectivityActions.loadSlackActions, loadSlackFunction);\n  yield takeEvery(connectivityActions.postDataAction, postDataFunction);\n  yield takeEvery(connectivityActions.postCodeAction, postCodeFunction);\n  yield takeEvery(connectivityActions.loadScope, loadSlackPermissions);\n  yield takeEvery(connectivityActions.deleteWebhookConfigAction, deleteWebhookConfigFunction);\n  yield takeEvery(connectivityActions.postWebhookTestAction, postWebhookTestFunction);\n  yield takeEvery(connectivityActions.postWebhookRetryAction, postWebhookRetryFunction);\n  yield takeLatest(connectivityActions.loadWebhookLogsAction, loadWebhookLogsFunction);\n}","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_excluded","_excluded2","all","call","put","select","takeEvery","takeLatest","actions","connectivityActions","channels","channels2Platform","type2ApiGet","type2ApiPost","api","addApi","loadPlatformData","ch","loadFunction","payload","type","loadDataFunction","setConnectivityState","isLoading","values","map","res","params","reduce","acc","curr","idx","webhooks","data","length","list","id","key","events","active","isActive","platform","title","image","webhook","error","undefined","isSaving","e","loadSlackFunction","slackChannels","connectivity","getSlackChannels","checkNewStatus","currPlatform","find","newActive","elm","postDataFunction","callback","processIds","state","_id","postSlackData","includes","postEmailSMSData","newData","filter","el","_e$message","message","toString","slack","slackSubscriptions","stateSlackSubscriptions","_curr$slackEvents$0$c","_curr$slackEvents$0$c2","slackEvents","channelIds","_ref","props","JSON","stringify","deleteSlackConfiguration","stateData","actionsResult","eventKey","subscriptions","recipients","postEmailConfiguration","postSMSConfiguration","_subscriptions$","enabled","body","patchEmailConfiguration","patchSMSConfiguration","putEmailSubscriptions","putSMSSubscriptions","deleteEmailSubscriptions","deleteSMSSubscriptions","postCodeFunction","postSlackCode","loadSlackPermissions","isLoadingScope","clientId","getSlackScope","deleteWebhookConfigFunction","webhookId","deleteWebhooksConfiguration","postWebhookTestFunction","isTesting","statusCode","postWebhookTest","testResult","status","postWebhookRetryFunction","postWebhookRetry","postWebhookRetryResult","isProcess","success","loadWebhookLogsFunction","limit","offset","webhookLogs","getWebhookLog","sagas","loadDataAction","loadSlackActions","postDataAction","postCodeAction","loadScope","deleteWebhookConfigAction","postWebhookTestAction","postWebhookRetryAction","loadWebhookLogsAction"],"sources":["/Users/sagiittah/Downloads/my-app/node_modules/@frontegg/redux-store/connectivity/saga.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n      _excluded2 = [\"id\", \"enabled\"];\n\n/* eslint-disable */\nimport { all, call, put, select, takeEvery, takeLatest } from 'redux-saga/effects';\nimport { actions as connectivityActions } from './reducer';\nimport { channels, channels2Platform, type2ApiGet, type2ApiPost } from './consts';\nimport { api } from '@frontegg/rest-api';\nconst addApi = ['categories', 'channelMap'];\n\nfunction* loadPlatformData(ch) {\n  return yield call(loadFunction, {\n    payload: {\n      api: ch\n    },\n    type: ''\n  });\n}\n\nfunction* loadDataFunction({\n  payload = channels\n}) {\n  yield put(connectivityActions.setConnectivityState({\n    isLoading: true\n  }));\n\n  try {\n    // @ts-ignore\n    const values = yield all([// @ts-ignore\n    ...payload.map(loadPlatformData), // @ts-ignore\n    yield loadFunction({\n      payload: {\n        api: 'categories'\n      },\n      type: ''\n    }), // @ts-ignore\n    yield function* () {\n      // @ts-ignore\n      const res = yield all(payload.map(function* (ch) {\n        // @ts-ignore\n        return yield loadFunction({\n          payload: {\n            api: 'channelMap',\n            params: ch\n          },\n          type: ''\n        });\n      }));\n      return res.reduce((acc, curr, idx) => _extends({}, acc, {\n        [`${payload[idx]}`]: curr\n      }), {});\n    }()]); // @ts-ignore\n\n    const webhooks = yield loadFunction({\n      payload: {\n        api: 'webhook'\n      },\n      type: ''\n    });\n    const data = values.reduce((acc, curr, idx) => payload[idx] ? values[values.length - 1][payload[idx]].length ? _extends({}, acc, {\n      [`${payload[idx]}`]: curr,\n      list: [...acc.list, {\n        id: idx,\n        key: payload[idx],\n        events: channels2Platform[payload[idx]].events(curr),\n        active: channels2Platform[payload[idx]].isActive(curr),\n        platform: channels2Platform[payload[idx]].title,\n        image: channels2Platform[payload[idx]].image\n      }]\n    }) : acc : _extends({}, acc, {\n      [`${addApi[idx - payload.length]}`]: curr\n    }), {\n      list: [],\n      webhook: webhooks\n    });\n    yield put(connectivityActions.setConnectivityState(_extends({}, data, {\n      error: undefined,\n      isSaving: false,\n      isLoading: false\n    })));\n  } catch (e) {\n    yield put(connectivityActions.setConnectivityState({\n      isLoading: false\n    }));\n  }\n}\n\nfunction* loadFunction({\n  payload: {\n    api,\n    params\n  }\n}) {\n  try {\n    // TODO: [ Refactor Saga ] refactor mapping routes\n    // @ts-ignore\n    return yield call(type2ApiGet[api], params);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nfunction* loadSlackFunction() {\n  try {\n    yield put(connectivityActions.setConnectivityState({\n      slackChannels: {\n        isLoading: true\n      }\n    })); // TODO: [Typescript 4.8] fix @frontegg/rest-api return value\n    // @ts-ignore\n\n    const data = yield call(api.connectivity.getSlackChannels);\n    yield put(connectivityActions.setConnectivityState({\n      error: undefined,\n      slackChannels: {\n        isLoading: false,\n        data\n      }\n    }));\n  } catch (e) {\n    yield put(connectivityActions.setConnectivityState({\n      error: undefined,\n      slackChannels: {\n        isLoading: false\n      }\n    }));\n  }\n}\n\nfunction* checkNewStatus(platform, data) {\n  const {\n    connectivity: {\n      list\n    }\n  } = yield select();\n  const currPlatform = list.find(({\n    key\n  }) => key === platform);\n  if (!currPlatform) return;\n  const newActive = channels2Platform[platform].isActive(data);\n  if (newActive === currPlatform.active) return; //TODO: double check\n\n  yield put(connectivityActions.setConnectivityState({\n    list: list.map(elm => elm.key === platform ? _extends({}, elm, {\n      active: newActive\n    }) : elm)\n  }));\n}\n\nfunction* postDataFunction({\n  payload: {\n    platform,\n    data,\n    callback\n  }\n}) {\n  const {\n    processIds\n  } = yield select(state => state.connectivity);\n\n  try {\n    yield put(connectivityActions.setConnectivityState({\n      isSaving: true,\n      //@ts-ignore\n      processIds: platform === 'webhook' ? [data._id, ...processIds] : processIds\n    }));\n\n    if (platform === 'slack') {\n      yield postSlackData({\n        payload: data,\n        type: ''\n      });\n    } else if (['sms', 'email'].includes(platform)) {\n      yield postEmailSMSData({\n        payload: data,\n        type: platform\n      });\n    } else {\n      yield call(type2ApiPost[platform], data);\n    }\n\n    if (!['sms', 'email'].includes(platform)) {\n      // @ts-ignore\n      const newData = yield loadFunction({\n        payload: {\n          api: platform\n        },\n        type: ''\n      });\n\n      if (platform === 'webhook') {\n        newData.id = data._id;\n      }\n\n      yield put(connectivityActions.setConnectivityState({\n        error: undefined,\n        isSaving: false,\n        [`${platform}`]: newData,\n        processIds: newData.id ? processIds.filter(el => el !== newData.id) : processIds\n      }));\n      yield checkNewStatus(platform, newData);\n      callback == null ? void 0 : callback(true);\n    }\n  } catch (e) {\n    var _e$message;\n\n    yield put(connectivityActions.setConnectivityState({\n      error: (_e$message = e.message) != null ? _e$message : e.toString(),\n      isSaving: false,\n      isLoading: false\n    }));\n  }\n}\n\nfunction* postSlackData({\n  payload\n}) {\n  const {\n    connectivity: {\n      slack\n    }\n  } = yield select();\n\n  if (!slack) {\n    return;\n  }\n\n  const {\n    slackSubscriptions: stateSlackSubscriptions\n  } = slack;\n  const {\n    slackSubscriptions\n  } = payload;\n  yield all([...slackSubscriptions.reduce((acc, curr) => {\n    var _curr$slackEvents$0$c, _curr$slackEvents$0$c2;\n\n    if (!curr.id && curr.slackEvents && (_curr$slackEvents$0$c = curr.slackEvents[0].channelIds) != null && _curr$slackEvents$0$c.length) {\n      return [...acc, curr];\n    }\n\n    const el = stateSlackSubscriptions == null ? void 0 : stateSlackSubscriptions.find(_ref => {\n      let {\n        id\n      } = _ref,\n          props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return id === curr.id && JSON.stringify(_extends({\n        id\n      }, props)) !== JSON.stringify(curr);\n    });\n\n    if (el && curr.slackEvents && (_curr$slackEvents$0$c2 = curr.slackEvents[0].channelIds) != null && _curr$slackEvents$0$c2.length) {\n      return [...acc, curr];\n    }\n\n    return acc;\n  }, []).map(function* (el) {\n    // @ts-ignore\n    return yield call(type2ApiPost.slack, el);\n  }), ...slackSubscriptions.reduce((acc, curr) => {\n    if (curr.id && !curr.slackEvents[0].channelIds.length) {\n      return [...acc, curr];\n    }\n\n    return acc;\n  }, []).map(function* (el) {\n    // @ts-ignore\n    return yield call(api.connectivity.deleteSlackConfiguration, el);\n  }) // clean the old data\n  // ...stateSlackSubscriptions\n  //   // @ts-ignore\n  //   .reduce((acc, curr) => {\n  //     const el = slackSubscriptions.find(({ id }) => id === curr.id);\n  //     if (!el) {\n  //       return [...acc, curr];\n  //     }\n  //     return acc;\n  //   }, [])\n  //   // @ts-ignore\n  //   .map(function* (el) {\n  //     return yield call(api.connectivity.deleteSlackConfiguration, el as Required<ISlackSubscription>);\n  //   }),\n  ]);\n}\n\nfunction* postEmailSMSData({\n  payload,\n  type\n}) {\n  const {\n    connectivity\n  } = yield select();\n  const {\n    processIds\n  } = yield select(state => state.connectivity);\n  const stateData = connectivity[type];\n  if (!stateData) return;\n  let actionsResult = [];\n\n  try {\n    actionsResult = yield all([// create new\n    ...payload.reduce((acc, curr) => {\n      const state = stateData.find(({\n        eventKey\n      }) => eventKey === curr.eventKey);\n\n      if (!state && curr.subscriptions[0].recipients.filter(el => el).length) {\n        return [...acc, curr];\n      }\n\n      return acc;\n    }, []).map(function* (data) {\n      // TODO: [Typescript 4.8] fix @frontegg/rest-api return value\n      // @ts-ignore\n      return yield call(type === 'email' ? api.connectivity.postEmailConfiguration : api.connectivity.postSMSConfiguration, data);\n    }), // update exists\n    ...payload.reduce((acc, curr) => {\n      const state = stateData.find(({\n        eventKey\n      }) => eventKey === curr.eventKey);\n\n      if (state && JSON.stringify(state) !== JSON.stringify(curr)) {\n        return [...acc, curr];\n      }\n\n      return acc;\n    }, []).map(function* (data) {\n      const {\n        subscriptions,\n        eventKey\n      } = data;\n\n      const _subscriptions$ = subscriptions[0],\n            {\n        id = '',\n        enabled\n      } = _subscriptions$,\n            body = _objectWithoutPropertiesLoose(_subscriptions$, _excluded2); // @ts-ignore\n\n\n      return yield all([// @ts-ignore\n      yield call(type === 'email' ? api.connectivity.patchEmailConfiguration : api.connectivity.patchSMSConfiguration, {\n        eventKey,\n        enabled\n      }), // @ts-ignore\n      yield call(type === 'email' ? api.connectivity.putEmailSubscriptions : api.connectivity.putSMSSubscriptions, id, eventKey, _extends({}, body, {\n        enabled\n      }))]);\n    }), // delete record with empty recipients\n    ...payload.reduce((acc, curr) => {\n      const state = stateData.find(({\n        eventKey\n      }) => eventKey === curr.eventKey);\n\n      if (state && state.subscriptions[0].recipients.length && !curr.subscriptions[0].recipients.filter(el => !!el).length) {\n        return [...acc, curr];\n      }\n\n      return acc;\n    }, []).map(function* ({\n      eventKey,\n      subscriptions\n    }) {\n      return call(type === 'email' ? api.connectivity.deleteEmailSubscriptions : api.connectivity.deleteSMSSubscriptions, eventKey, subscriptions[0].id || '');\n    })]);\n  } catch {}\n\n  if (actionsResult.length) {\n    // @ts-ignore\n    const newData = yield loadFunction({\n      payload: {\n        api: type\n      },\n      type: ''\n    }); // yield put(connectivityActions.postDataSuccess({ platform: type, data: newData }));\n\n    yield put(connectivityActions.setConnectivityState({\n      error: undefined,\n      isSaving: false,\n      [`${type}`]: newData,\n      processIds: newData.id ? processIds.filter(el => el !== newData.id) : processIds\n    }));\n    yield checkNewStatus(type, newData);\n  } else {\n    // yield put(connectivityActions.postDataSuccess({ platform: type, data: stateData }));\n    yield put(connectivityActions.setConnectivityState({\n      error: undefined,\n      isSaving: false,\n      [`${type}`]: stateData,\n      processIds: processIds\n    }));\n  }\n}\n\nfunction* postCodeFunction({\n  payload\n}) {\n  try {\n    yield api.connectivity.postSlackCode(payload);\n  } catch {} // yield put(connectivityActions.postCodeSuccess());\n\n\n  yield put(connectivityActions.setConnectivityState({\n    error: undefined,\n    isSaving: false\n  }));\n}\n\nfunction* loadSlackPermissions() {\n  const {\n    slackChannels\n  } = yield select(state => state.connectivity);\n\n  try {\n    yield put(connectivityActions.setConnectivityState({\n      slackChannels: _extends({}, slackChannels, {\n        isLoadingScope: true\n      })\n    }));\n    const {\n      clientId\n    } = yield call(api.connectivity.getSlackScope); // yield put(connectivityActions.loadScopeSuccess(clientId));\n\n    yield put(connectivityActions.setConnectivityState({\n      slackChannels: {\n        error: undefined,\n        clientId,\n        isLoadingScope: false,\n        isLoading: false\n      }\n    }));\n  } catch {\n    // yield put(connectivityActions.loadScopeSuccess(null));\n    yield put(connectivityActions.setConnectivityState({\n      slackChannels: {\n        error: undefined,\n        isLoadingScope: false,\n        isLoading: false\n      }\n    }));\n  }\n}\n\nfunction* deleteWebhookConfigFunction({\n  payload\n}) {\n  const {\n    callback,\n    webhookId\n  } = payload;\n  const {\n    processIds\n  } = yield select(state => state.connectivity);\n\n  try {\n    yield put(connectivityActions.setConnectivityState({\n      isSaving: true\n    }));\n    yield call(api.connectivity.deleteWebhooksConfiguration, webhookId);\n  } catch (e) {\n    callback == null ? void 0 : callback(null, e.message);\n  } // @ts-ignore\n\n\n  const newData = yield loadFunction({\n    payload: {\n      api: 'webhook'\n    },\n    type: ''\n  });\n\n  if (newData) {\n    yield put(connectivityActions.setConnectivityState({\n      error: undefined,\n      isSaving: false,\n      webhook: newData,\n      processIds: newData.id ? processIds.filter(el => el !== newData.id) : processIds\n    }));\n  }\n\n  callback == null ? void 0 : callback(true);\n}\n\nfunction* postWebhookTestFunction({\n  payload\n}) {\n  try {\n    yield put(connectivityActions.setConnectivityState({\n      isTesting: true\n    }));\n    const {\n      statusCode,\n      body\n    } = yield call(api.connectivity.postWebhookTest, payload);\n\n    if ([201, 200].includes(statusCode)) {\n      // yield put(connectivityActions.postWebhookTestSuccess('success', JSON.stringify(body, null, 2)));\n      const message = JSON.stringify(body, null, 2);\n      yield put(connectivityActions.setConnectivityState({\n        isTesting: false,\n        testResult: {\n          status: 'success',\n          message\n        }\n      }));\n    } else {\n      // yield put(connectivityActions.postWebhookTestSuccess('failed', body.toString()));\n      yield put(connectivityActions.setConnectivityState({\n        isTesting: false,\n        testResult: {\n          status: 'failed'\n        }\n      }));\n    }\n  } catch (e) {\n    // yield put(connectivityActions.postWebhookTestSuccess('failed', e.toString()));\n    yield put(connectivityActions.setConnectivityState({\n      isTesting: false,\n      testResult: {\n        status: 'failed',\n        message: e.toString()\n      }\n    }));\n  }\n}\n\nfunction* postWebhookRetryFunction({\n  payload\n}) {\n  try {\n    const {\n      statusCode\n    } = yield call(api.connectivity.postWebhookRetry, payload);\n    yield put(connectivityActions.postWebhookRetryResult({\n      [payload]: {\n        isProcess: false,\n        success: statusCode === 202\n      }\n    }));\n  } catch (e) {\n    yield put(connectivityActions.postWebhookRetryResult({\n      [payload]: {\n        isProcess: false,\n        success: false\n      }\n    }));\n  }\n}\n\nfunction* loadWebhookLogsFunction({\n  payload: {\n    id,\n    limit,\n    offset\n  }\n}) {\n  const {\n    webhookLogs\n  } = yield select(state => state.connectivity);\n\n  try {\n    yield put(connectivityActions.setConnectivityState({\n      webhookLogs: _extends({}, webhookLogs, {\n        isLoading: true\n      })\n    })); //TODO: Fix types\n    //@ts-ignore\n\n    const data = yield call(api.connectivity.getWebhookLog, id, offset, limit); // yield put(connectivityActions.loadWebhookLogsSuccess(data));\n\n    yield put(connectivityActions.setConnectivityState({\n      error: undefined,\n      webhookLogs: _extends({\n        isLoading: false\n      }, data)\n    }));\n  } catch (e) {\n    yield put(connectivityActions.setConnectivityState({\n      error: undefined,\n      webhookLogs: {\n        isLoading: false\n      }\n    }));\n  }\n}\n\nexport function* sagas() {\n  yield takeEvery(connectivityActions.loadDataAction, loadDataFunction);\n  yield takeLatest(connectivityActions.loadSlackActions, loadSlackFunction);\n  yield takeEvery(connectivityActions.postDataAction, postDataFunction);\n  yield takeEvery(connectivityActions.postCodeAction, postCodeFunction);\n  yield takeEvery(connectivityActions.loadScope, loadSlackPermissions);\n  yield takeEvery(connectivityActions.deleteWebhookConfigAction, deleteWebhookConfigFunction);\n  yield takeEvery(connectivityActions.postWebhookTestAction, postWebhookTestFunction);\n  yield takeEvery(connectivityActions.postWebhookRetryAction, postWebhookRetryFunction);\n  yield takeLatest(connectivityActions.loadWebhookLogsAction, loadWebhookLogsFunction);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { call, delay, put, select, takeEvery } from 'redux-saga/effects';\nimport { subscriptionActions } from './index';\nimport { api, ISubscriptionCancellationPolicy, ISubscriptionStatus } from '@frontegg/rest-api';\nimport { subscriptionResponseMock } from '../../dummy';\nimport { loadSummaries } from '../Information/saga';\nexport function* subscriptionSagas() {\n  yield takeEvery(subscriptionActions.load, loadSubscriptionTenant);\n  yield takeEvery(subscriptionActions.cancelSubscription, cancelSubscription);\n  yield takeEvery(subscriptionActions.renewSubscription, renewSubscription);\n}\nfunction* loadSubscriptionTenant() {\n  const tenantId = yield select(state => {\n    var _state$auth, _state$auth$user;\n    return (_state$auth = state.auth) == null ? void 0 : (_state$auth$user = _state$auth.user) == null ? void 0 : _state$auth$user.tenantId;\n  });\n  yield loadSummaries(tenantId);\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function* loadSubscription() {\n  yield put(subscriptionActions.setLoading(true));\n  try {\n    const [subscription] = yield call(api.subscriptions.getManagedSubscriptions);\n    yield put(subscriptionActions.setState({\n      subscription,\n      fetching: false,\n      loading: false,\n      error: null\n    }));\n  } catch (e) {\n    yield put(subscriptionActions.setError(e));\n  }\n}\nfunction* cancelSubscription() {\n  const {\n    subscription\n  } = yield select(state => state.subscriptions.billing.subscription);\n  if (!subscription) {\n    yield put(subscriptionActions.setCancellationError('Subscription not found.'));\n    return;\n  }\n  if (subscription != null && subscription.externallyManaged) {\n    yield put(subscriptionActions.setCancellationError('Billing is externally managed.'));\n    return;\n  }\n  const {\n    id: subscriptionId,\n    cancellation,\n    status\n  } = subscription || {};\n  const isCancellable = !cancellation && status === ISubscriptionStatus.ACTIVE;\n  if (isCancellable) {\n    try {\n      yield put(subscriptionActions.setCancellationLoading(true));\n      yield call(api.subscriptions.cancelManagedSubscription, subscriptionId);\n      yield loadSubscription();\n      yield put(subscriptionActions.setCancellationLoading(false));\n    } catch (e) {\n      yield put(subscriptionActions.setCancellationError(e.message));\n    }\n  }\n}\nfunction* renewSubscription() {\n  const {\n    subscription\n  } = yield select(state => state.subscriptions.billing.subscription);\n  if (!subscription) {\n    yield put(subscriptionActions.setCancellationError('Subscription not found.'));\n    return;\n  }\n  if (subscription != null && subscription.externallyManaged) {\n    yield put(subscriptionActions.setCancellationError('Billing is externally managed'));\n    return;\n  }\n  const {\n    id: subscriptionId,\n    cancellation\n  } = subscription || {};\n  const renewable = (cancellation == null ? void 0 : cancellation.policy) === ISubscriptionCancellationPolicy.AT_PERIOD_END;\n  if (renewable) {\n    try {\n      yield put(subscriptionActions.setRenewalLoading(true));\n      yield call(api.subscriptions.renewManagedSubscription, subscriptionId);\n      yield loadSubscription();\n      yield put(subscriptionActions.setRenewalLoading(false));\n    } catch (e) {\n      yield put(subscriptionActions.setCancellationError(e.message));\n    }\n  }\n}\n/*********************************\n *  Preview Sagas\n *********************************/\n\nfunction* loadMock() {\n  yield put(subscriptionActions.setLoading(true));\n  yield delay(500);\n  yield put(subscriptionActions.setState({\n    subscription: subscriptionResponseMock,\n    fetching: false,\n    loading: false,\n    error: null\n  }));\n}\nexport function* subscriptionSagasMock() {\n  yield takeEvery(subscriptionActions.load, loadMock);\n}","map":{"version":3,"names":["call","delay","put","select","takeEvery","subscriptionActions","api","ISubscriptionCancellationPolicy","ISubscriptionStatus","subscriptionResponseMock","loadSummaries","subscriptionSagas","load","loadSubscriptionTenant","cancelSubscription","renewSubscription","tenantId","state","_state$auth","_state$auth$user","auth","user","loadSubscription","setLoading","subscription","subscriptions","getManagedSubscriptions","setState","fetching","loading","error","e","setError","billing","setCancellationError","externallyManaged","id","subscriptionId","cancellation","status","isCancellable","ACTIVE","setCancellationLoading","cancelManagedSubscription","message","renewable","policy","AT_PERIOD_END","setRenewalLoading","renewManagedSubscription","loadMock","subscriptionSagasMock"],"sources":["/Users/morank/Documents/react-hosted-login-assignment/my-app/node_modules/@frontegg/redux-store/subscriptions/Billing/Subscription/saga.js"],"sourcesContent":["import { call, delay, put, select, takeEvery } from 'redux-saga/effects';\nimport { subscriptionActions } from './index';\nimport { api, ISubscriptionCancellationPolicy, ISubscriptionStatus } from '@frontegg/rest-api';\nimport { subscriptionResponseMock } from '../../dummy';\nimport { loadSummaries } from '../Information/saga';\nexport function* subscriptionSagas() {\n  yield takeEvery(subscriptionActions.load, loadSubscriptionTenant);\n  yield takeEvery(subscriptionActions.cancelSubscription, cancelSubscription);\n  yield takeEvery(subscriptionActions.renewSubscription, renewSubscription);\n}\n\nfunction* loadSubscriptionTenant() {\n  const tenantId = yield select(state => {\n    var _state$auth, _state$auth$user;\n\n    return (_state$auth = state.auth) == null ? void 0 : (_state$auth$user = _state$auth.user) == null ? void 0 : _state$auth$user.tenantId;\n  });\n  yield loadSummaries(tenantId);\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nexport function* loadSubscription() {\n  yield put(subscriptionActions.setLoading(true));\n\n  try {\n    const [subscription] = yield call(api.subscriptions.getManagedSubscriptions);\n    yield put(subscriptionActions.setState({\n      subscription,\n      fetching: false,\n      loading: false,\n      error: null\n    }));\n  } catch (e) {\n    yield put(subscriptionActions.setError(e));\n  }\n}\n\nfunction* cancelSubscription() {\n  const {\n    subscription\n  } = yield select(state => state.subscriptions.billing.subscription);\n\n  if (!subscription) {\n    yield put(subscriptionActions.setCancellationError('Subscription not found.'));\n    return;\n  }\n\n  if (subscription != null && subscription.externallyManaged) {\n    yield put(subscriptionActions.setCancellationError('Billing is externally managed.'));\n    return;\n  }\n\n  const {\n    id: subscriptionId,\n    cancellation,\n    status\n  } = subscription || {};\n  const isCancellable = !cancellation && status === ISubscriptionStatus.ACTIVE;\n\n  if (isCancellable) {\n    try {\n      yield put(subscriptionActions.setCancellationLoading(true));\n      yield call(api.subscriptions.cancelManagedSubscription, subscriptionId);\n      yield loadSubscription();\n      yield put(subscriptionActions.setCancellationLoading(false));\n    } catch (e) {\n      yield put(subscriptionActions.setCancellationError(e.message));\n    }\n  }\n}\n\nfunction* renewSubscription() {\n  const {\n    subscription\n  } = yield select(state => state.subscriptions.billing.subscription);\n\n  if (!subscription) {\n    yield put(subscriptionActions.setCancellationError('Subscription not found.'));\n    return;\n  }\n\n  if (subscription != null && subscription.externallyManaged) {\n    yield put(subscriptionActions.setCancellationError('Billing is externally managed'));\n    return;\n  }\n\n  const {\n    id: subscriptionId,\n    cancellation\n  } = subscription || {};\n  const renewable = (cancellation == null ? void 0 : cancellation.policy) === ISubscriptionCancellationPolicy.AT_PERIOD_END;\n\n  if (renewable) {\n    try {\n      yield put(subscriptionActions.setRenewalLoading(true));\n      yield call(api.subscriptions.renewManagedSubscription, subscriptionId);\n      yield loadSubscription();\n      yield put(subscriptionActions.setRenewalLoading(false));\n    } catch (e) {\n      yield put(subscriptionActions.setCancellationError(e.message));\n    }\n  }\n}\n/*********************************\n *  Preview Sagas\n *********************************/\n\n\nfunction* loadMock() {\n  yield put(subscriptionActions.setLoading(true));\n  yield delay(500);\n  yield put(subscriptionActions.setState({\n    subscription: subscriptionResponseMock,\n    fetching: false,\n    loading: false,\n    error: null\n  }));\n}\n\nexport function* subscriptionSagasMock() {\n  yield takeEvery(subscriptionActions.load, loadMock);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { call, put, takeEvery, delay } from 'redux-saga/effects';\nimport { subscriptionsPaymentMethodActions } from './index';\nimport { api } from '@frontegg/rest-api';\nimport { paymentMethodsMock } from '../../dummy';\nexport function* subscriptionsPaymentMethodSagas() {\n  yield takeEvery(subscriptionsPaymentMethodActions.loadPaymentMethod, loadPaymentMethod);\n  yield takeEvery(subscriptionsPaymentMethodActions.submitPaymentMethod, submitPaymentMethod);\n  yield takeEvery(subscriptionsPaymentMethodActions.submitPaymentMethodError, submitPaymentMethodError);\n  yield takeEvery(subscriptionsPaymentMethodActions.submitPaymentMethodSuccess, submitPaymentMethodSuccess);\n  yield takeEvery(subscriptionsPaymentMethodActions.updatePaymentMethodBillingDetails, updateBillingDetails);\n}\nexport function* loadPaymentMethod() {\n  yield put(subscriptionsPaymentMethodActions.setLoading(true));\n  try {\n    const paymentMethods = yield call(api.subscriptions.getPaymentMethods);\n    const paymentMethod = paymentMethods[0];\n    yield put(subscriptionsPaymentMethodActions.setState({\n      paymentMethod,\n      loading: false,\n      fetching: false\n    }));\n  } catch (e) {\n    yield put(subscriptionsPaymentMethodActions.setError(e.message));\n  }\n}\nfunction updateBillingDetails(_ref) {\n  let {\n    payload\n  } = _ref;\n  return function* () {\n    yield put(subscriptionsPaymentMethodActions.setLoading(true));\n    const {\n      id,\n      email,\n      address,\n      callback\n    } = payload;\n    try {\n      yield call(api.subscriptions.updatePaymentMethodBillingDetails, id, _extends({\n        email\n      }, address));\n      yield call(loadPaymentMethod);\n      callback == null ? void 0 : callback(true);\n    } catch (e) {\n      yield put(subscriptionsPaymentMethodActions.setError(e.message));\n      callback == null ? void 0 : callback(false);\n    }\n    yield put(subscriptionsPaymentMethodActions.setLoading(false));\n  }();\n}\nfunction* submitPaymentMethod() {\n  yield put(subscriptionsPaymentMethodActions.setLoading(true));\n}\nfunction submitPaymentMethodError(_ref2) {\n  let {\n    payload: error\n  } = _ref2;\n  return function* () {\n    yield put(subscriptionsPaymentMethodActions.setError(error));\n  }();\n}\nfunction* submitPaymentMethodSuccess() {\n  yield put(subscriptionsPaymentMethodActions.loadPaymentMethod());\n}\n/*********************************\n *  Preview Sagas\n *********************************/\n\nfunction* loadPaymentMethodMock() {\n  yield put(subscriptionsPaymentMethodActions.setLoading(true));\n  yield delay(500);\n  const paymentMethod = paymentMethodsMock[0];\n  yield put(subscriptionsPaymentMethodActions.setState({\n    paymentMethod,\n    loading: false,\n    fetching: false\n  }));\n}\nexport function* subscriptionsPaymentMethodSagasMock() {\n  yield takeEvery(subscriptionsPaymentMethodActions.loadPaymentMethod, loadPaymentMethodMock);\n}","map":{"version":3,"names":["_extends","call","put","takeEvery","delay","subscriptionsPaymentMethodActions","api","paymentMethodsMock","subscriptionsPaymentMethodSagas","loadPaymentMethod","submitPaymentMethod","submitPaymentMethodError","submitPaymentMethodSuccess","updatePaymentMethodBillingDetails","updateBillingDetails","setLoading","paymentMethods","subscriptions","getPaymentMethods","paymentMethod","setState","loading","fetching","e","setError","message","payload","id","email","address","callback","error","loadPaymentMethodMock","subscriptionsPaymentMethodSagasMock"],"sources":["/Users/morank/Documents/react-hosted-login-assignment/my-app/node_modules/@frontegg/redux-store/subscriptions/Billing/PaymentMethod/saga.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { call, put, takeEvery, delay } from 'redux-saga/effects';\nimport { subscriptionsPaymentMethodActions } from './index';\nimport { api } from '@frontegg/rest-api';\nimport { paymentMethodsMock } from '../../dummy';\nexport function* subscriptionsPaymentMethodSagas() {\n  yield takeEvery(subscriptionsPaymentMethodActions.loadPaymentMethod, loadPaymentMethod);\n  yield takeEvery(subscriptionsPaymentMethodActions.submitPaymentMethod, submitPaymentMethod);\n  yield takeEvery(subscriptionsPaymentMethodActions.submitPaymentMethodError, submitPaymentMethodError);\n  yield takeEvery(subscriptionsPaymentMethodActions.submitPaymentMethodSuccess, submitPaymentMethodSuccess);\n  yield takeEvery(subscriptionsPaymentMethodActions.updatePaymentMethodBillingDetails, updateBillingDetails);\n}\nexport function* loadPaymentMethod() {\n  yield put(subscriptionsPaymentMethodActions.setLoading(true));\n\n  try {\n    const paymentMethods = yield call(api.subscriptions.getPaymentMethods);\n    const paymentMethod = paymentMethods[0];\n    yield put(subscriptionsPaymentMethodActions.setState({\n      paymentMethod,\n      loading: false,\n      fetching: false\n    }));\n  } catch (e) {\n    yield put(subscriptionsPaymentMethodActions.setError(e.message));\n  }\n}\n\nfunction* updateBillingDetails({\n  payload\n}) {\n  yield put(subscriptionsPaymentMethodActions.setLoading(true));\n  const {\n    id,\n    email,\n    address,\n    callback\n  } = payload;\n\n  try {\n    yield call(api.subscriptions.updatePaymentMethodBillingDetails, id, _extends({\n      email\n    }, address));\n    yield call(loadPaymentMethod);\n    callback == null ? void 0 : callback(true);\n  } catch (e) {\n    yield put(subscriptionsPaymentMethodActions.setError(e.message));\n    callback == null ? void 0 : callback(false);\n  }\n\n  yield put(subscriptionsPaymentMethodActions.setLoading(false));\n}\n\nfunction* submitPaymentMethod() {\n  yield put(subscriptionsPaymentMethodActions.setLoading(true));\n}\n\nfunction* submitPaymentMethodError({\n  payload: error\n}) {\n  yield put(subscriptionsPaymentMethodActions.setError(error));\n}\n\nfunction* submitPaymentMethodSuccess() {\n  yield put(subscriptionsPaymentMethodActions.loadPaymentMethod());\n}\n/*********************************\n *  Preview Sagas\n *********************************/\n\n\nfunction* loadPaymentMethodMock() {\n  yield put(subscriptionsPaymentMethodActions.setLoading(true));\n  yield delay(500);\n  const paymentMethod = paymentMethodsMock[0];\n  yield put(subscriptionsPaymentMethodActions.setState({\n    paymentMethod,\n    loading: false,\n    fetching: false\n  }));\n}\n\nexport function* subscriptionsPaymentMethodSagasMock() {\n  yield takeEvery(subscriptionsPaymentMethodActions.loadPaymentMethod, loadPaymentMethodMock);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
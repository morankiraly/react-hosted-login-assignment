{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createAction } from '@reduxjs/toolkit';\nimport { connectivityStoreName } from '../../constants';\nconst initialState = {\n  isLoading: false,\n  isSaving: false,\n  list: [],\n  processIds: [],\n  slackChannels: {\n    isLoading: false\n  }\n};\nconst reducers = {\n  initData: () => _extends({}, initialState),\n  // Deprecated: use initData instead;\n  // cleanData: () => ({ ...initialState }),\n  setConnectivityState: (state, _ref) => {\n    let {\n      payload\n    } = _ref;\n    return _extends({}, state, payload);\n  },\n  cleanWebhookTestData: state => _extends({}, state, {\n    testResult: undefined\n  }),\n  cleanWebhookLogsData: state => _extends({}, state, {\n    webhookLogs: undefined\n  }),\n  cleanWebhookTestMessage: state => {\n    var _state$testResult;\n    return _extends({}, state, {\n      testResult: {\n        status: (_state$testResult = state.testResult) == null ? void 0 : _state$testResult.status,\n        message: undefined\n      }\n    });\n  },\n  cleanError: state => _extends({}, state, {\n    error: undefined\n  }),\n  cleanSlackData: state => _extends({}, state, {\n    slackChannels: {\n      isLoading: false\n    }\n  }),\n  postWebhookRetryAction: {\n    prepare: logId => ({\n      payload: logId\n    }),\n    reducer: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      return _extends({}, state, {\n        retryResult: _extends({}, state.retryResult, {\n          [payload]: {\n            isProcess: true,\n            success: false\n          }\n        })\n      });\n    }\n  },\n  postWebhookRetryResult: {\n    prepare: payload => ({\n      payload\n    }),\n    reducer: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      return _extends({}, state, {\n        retryResult: _extends({}, state.retryResult, payload)\n      });\n    }\n  }\n};\nconst actions = {\n  loadSlackActions: createAction(`${connectivityStoreName}/loadSlackActions`),\n  loadDataAction: createAction(`${connectivityStoreName}/loadDataAction`, payload => ({\n    payload\n  })),\n  postDataAction: createAction(`${connectivityStoreName}/postDataAction`, payload => ({\n    payload\n  })),\n  postCodeAction: createAction(`${connectivityStoreName}/postCodeAction`, payload => ({\n    payload\n  })),\n  loadScope: createAction(`${connectivityStoreName}/loadScope`),\n  deleteWebhookConfigAction: createAction(`${connectivityStoreName}/deleteWebhookConfigAction`, payload => ({\n    payload\n  })),\n  postWebhookTestAction: createAction(`${connectivityStoreName}/postWebhookTestAction`, payload => ({\n    payload\n  })),\n  loadWebhookLogsAction: createAction(`${connectivityStoreName}/loadWebhookLogsAction`, function (id) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n    return {\n      payload: {\n        id,\n        offset,\n        limit\n      }\n    };\n  })\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\nexport { reducers as connectivityReducers, actions as connectivityActions };","map":{"version":3,"names":["_extends","createAction","connectivityStoreName","initialState","isLoading","isSaving","list","processIds","slackChannels","reducers","initData","setConnectivityState","state","payload","cleanWebhookTestData","testResult","undefined","cleanWebhookLogsData","webhookLogs","cleanWebhookTestMessage","_state$testResult","status","message","cleanError","error","cleanSlackData","postWebhookRetryAction","prepare","logId","reducer","retryResult","isProcess","success","postWebhookRetryResult","actions","loadSlackActions","loadDataAction","postDataAction","postCodeAction","loadScope","deleteWebhookConfigAction","postWebhookTestAction","loadWebhookLogsAction","id","offset","limit","connectivityReducers","connectivityActions"],"sources":["/Users/morank/Documents/my-app/node_modules/@frontegg/redux-store/connectivity/ConnectivityState/index.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createAction } from '@reduxjs/toolkit';\nimport { connectivityStoreName } from '../../constants';\nconst initialState = {\n  isLoading: false,\n  isSaving: false,\n  list: [],\n  processIds: [],\n  slackChannels: {\n    isLoading: false\n  }\n};\nconst reducers = {\n  initData: () => _extends({}, initialState),\n  // Deprecated: use initData instead;\n  // cleanData: () => ({ ...initialState }),\n  setConnectivityState: (state, {\n    payload\n  }) => _extends({}, state, payload),\n  cleanWebhookTestData: state => _extends({}, state, {\n    testResult: undefined\n  }),\n  cleanWebhookLogsData: state => _extends({}, state, {\n    webhookLogs: undefined\n  }),\n  cleanWebhookTestMessage: state => {\n    var _state$testResult;\n\n    return _extends({}, state, {\n      testResult: {\n        status: (_state$testResult = state.testResult) == null ? void 0 : _state$testResult.status,\n        message: undefined\n      }\n    });\n  },\n  cleanError: state => _extends({}, state, {\n    error: undefined\n  }),\n  cleanSlackData: state => _extends({}, state, {\n    slackChannels: {\n      isLoading: false\n    }\n  }),\n  postWebhookRetryAction: {\n    prepare: logId => ({\n      payload: logId\n    }),\n    reducer: (state, {\n      payload\n    }) => _extends({}, state, {\n      retryResult: _extends({}, state.retryResult, {\n        [payload]: {\n          isProcess: true,\n          success: false\n        }\n      })\n    })\n  },\n  postWebhookRetryResult: {\n    prepare: payload => ({\n      payload\n    }),\n    reducer: (state, {\n      payload\n    }) => _extends({}, state, {\n      retryResult: _extends({}, state.retryResult, payload)\n    })\n  }\n};\nconst actions = {\n  loadSlackActions: createAction(`${connectivityStoreName}/loadSlackActions`),\n  loadDataAction: createAction(`${connectivityStoreName}/loadDataAction`, payload => ({\n    payload\n  })),\n  postDataAction: createAction(`${connectivityStoreName}/postDataAction`, payload => ({\n    payload\n  })),\n  postCodeAction: createAction(`${connectivityStoreName}/postCodeAction`, payload => ({\n    payload\n  })),\n  loadScope: createAction(`${connectivityStoreName}/loadScope`),\n  deleteWebhookConfigAction: createAction(`${connectivityStoreName}/deleteWebhookConfigAction`, payload => ({\n    payload\n  })),\n  postWebhookTestAction: createAction(`${connectivityStoreName}/postWebhookTestAction`, payload => ({\n    payload\n  })),\n  loadWebhookLogsAction: createAction(`${connectivityStoreName}/loadWebhookLogsAction`, (id, offset = 0, limit = 10) => ({\n    payload: {\n      id,\n      offset,\n      limit\n    }\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\nexport { reducers as connectivityReducers, actions as connectivityActions };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
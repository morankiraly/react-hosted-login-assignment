{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst tenantsState = {\n  tenants: [],\n  subTenants: [],\n  loading: true,\n  tenantTree: null\n};\nconst reducers = {\n  setTenantsState: typeReducerForKey('tenantsState'),\n  resetTenantsState: resetStateByKey('tenantsState', {\n    tenantsState\n  })\n};\nconst actions = {\n  switchTenant: createAction(`${authStoreName}/switchTenant`, payload => ({\n    payload\n  })),\n  loadTenants: createAction(`${authStoreName}/loadTenants`, payload => ({\n    payload\n  })),\n  loadSubTenants: createAction(`${authStoreName}/loadSubTenants`, payload => ({\n    payload\n  })),\n  loadSubTenantsTree: createAction(`${authStoreName}/loadSubTenantsTree`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { tenantsState, reducers as tenantsReducers, actions as tenantsActions };","map":{"version":3,"names":["createAction","resetStateByKey","typeReducerForKey","authStoreName","tenantsState","tenants","subTenants","loading","tenantTree","reducers","setTenantsState","resetTenantsState","actions","switchTenant","payload","loadTenants","loadSubTenants","loadSubTenantsTree","Matcher","tenantsReducers","tenantsActions"],"sources":["/Users/morank/Documents/my-app/node_modules/@frontegg/redux-store/auth/TenantsState/index.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst tenantsState = {\n  tenants: [],\n  subTenants: [],\n  loading: true,\n  tenantTree: null\n};\nconst reducers = {\n  setTenantsState: typeReducerForKey('tenantsState'),\n  resetTenantsState: resetStateByKey('tenantsState', {\n    tenantsState\n  })\n};\nconst actions = {\n  switchTenant: createAction(`${authStoreName}/switchTenant`, payload => ({\n    payload\n  })),\n  loadTenants: createAction(`${authStoreName}/loadTenants`, payload => ({\n    payload\n  })),\n  loadSubTenants: createAction(`${authStoreName}/loadSubTenants`, payload => ({\n    payload\n  })),\n  loadSubTenantsTree: createAction(`${authStoreName}/loadSubTenantsTree`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { tenantsState, reducers as tenantsReducers, actions as tenantsActions };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,UAAU;AAC7D,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,EAAE;EACXC,UAAU,EAAE,EAAE;EACdC,OAAO,EAAE,IAAI;EACbC,UAAU,EAAE;AACd,CAAC;AACD,MAAMC,QAAQ,GAAG;EACfC,eAAe,EAAER,iBAAiB,CAAC,cAAc,CAAC;EAClDS,iBAAiB,EAAEV,eAAe,CAAC,cAAc,EAAE;IACjDG;EACF,CAAC;AACH,CAAC;AACD,MAAMQ,OAAO,GAAG;EACdC,YAAY,EAAEb,YAAY,CAAE,GAAEG,aAAc,eAAc,EAAEW,OAAO,KAAK;IACtEA;EACF,CAAC,CAAC,CAAC;EACHC,WAAW,EAAEf,YAAY,CAAE,GAAEG,aAAc,cAAa,EAAEW,OAAO,KAAK;IACpEA;EACF,CAAC,CAAC,CAAC;EACHE,cAAc,EAAEhB,YAAY,CAAE,GAAEG,aAAc,iBAAgB,EAAEW,OAAO,KAAK;IAC1EA;EACF,CAAC,CAAC,CAAC;EACHG,kBAAkB,EAAEjB,YAAY,CAAE,GAAEG,aAAc,qBAAoB,EAAEW,OAAO,KAAK;IAClFA;EACF,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAMI,OAAO,GAAG,CAAC,CAAC;AAClB,SAASd,YAAY,EAAEK,QAAQ,IAAIU,eAAe,EAAEP,OAAO,IAAIQ,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { all, call, delay, put, select, takeEvery } from 'redux-saga/effects';\nimport { api, ProviderType } from '@frontegg/rest-api';\nimport { informationActions } from './index';\nimport { SubscriptionStatus } from '../../general.interfaces';\nimport { toSubscriptionCancellation, toSubscriptionStatus } from '../../mapper';\nimport { planResponseMock, subscriptionResponseMock } from '../../dummy';\nimport { loadSubscription } from '../Subscription/saga';\nexport function* subscriptionBillingInformationSagas() {\n  yield takeEvery(informationActions.loadBillingInformation, loadBillingInformation);\n}\nexport function* loadBillingInformation() {\n  yield loadBillingInformationAction(false);\n}\nfunction* loadBillingInformationAction(forceActive) {\n  const paymentProvider = yield select(state => {\n    var _state$subscriptions$;\n    return (_state$subscriptions$ = state.subscriptions.config.config) == null ? void 0 : _state$subscriptions$.paymentProvider;\n  });\n  const tenantId = yield select(state => {\n    var _state$auth, _state$auth$user;\n    return (_state$auth = state.auth) == null ? void 0 : (_state$auth$user = _state$auth.user) == null ? void 0 : _state$auth$user.tenantId;\n  });\n  if (!paymentProvider || !tenantId) {\n    yield put(informationActions.setError(!paymentProvider ? 'Internal feature failure' : 'Not authorized'));\n    return;\n  }\n  yield loadSummaries(tenantId, forceActive);\n}\nexport function* loadSummaries(tenantId, forceActive) {\n  yield put(informationActions.setLoading(true));\n  try {\n    var _planResponse$price, _planResponse$price2;\n    const summary = yield call(api.subscriptions.getSubscriptionSummaries, tenantId);\n    const {\n      currentPlanId,\n      externallyManaged\n    } = summary;\n    let subscriptionResponse = null;\n    let planResponse;\n    if (!externallyManaged) {\n      [, planResponse] = yield all([call(loadSubscription), call(api.subscriptions.getSubscriptionPlan, currentPlanId)]);\n      subscriptionResponse = yield select(state => state.subscriptions.billing.subscription.subscription || null);\n    } else {\n      planResponse = yield call(api.subscriptions.getSubscriptionPlan, currentPlanId);\n    }\n    yield put(informationActions.setState(_extends({\n      loading: false,\n      fetching: false,\n      summary\n    }, subscriptionResponse ? {\n      subscription: {\n        id: subscriptionResponse.id,\n        externalId: subscriptionResponse.externalId,\n        startDate: subscriptionResponse.startDate,\n        currentPeriodStart: subscriptionResponse.currentPeriodStart,\n        currentPeriodEnd: subscriptionResponse.currentPeriodEnd,\n        status: forceActive ? SubscriptionStatus.ACTIVE : toSubscriptionStatus(subscriptionResponse.status),\n        cancellation: subscriptionResponse.cancellation && toSubscriptionCancellation(subscriptionResponse.cancellation),\n        trialEnd: subscriptionResponse.trialEnd ? subscriptionResponse.trialEnd : null\n      }\n    } : {}, planResponse ? {\n      plan: {\n        id: planResponse.id,\n        name: planResponse.name,\n        description: planResponse.description,\n        price: ((_planResponse$price = planResponse.price) == null ? void 0 : _planResponse$price.amount) || 0,\n        currency: ((_planResponse$price2 = planResponse.price) == null ? void 0 : _planResponse$price2.currency) || 'usd',\n        recurringInterval: 'month',\n        slug: planResponse.slug\n      }\n    } : {})));\n  } catch (e) {\n    yield put(informationActions.setError(e.message));\n  }\n}\n/*********************************\n *  Preview Sagas\n *********************************/\n\nfunction* loadBillingInformationMock() {\n  yield loadSummariesMock();\n}\nexport function* loadSummariesMock() {\n  var _planResponseMock$0$p, _planResponseMock$0$p2;\n  yield put(informationActions.setLoading(true));\n  yield delay(500);\n  yield put(informationActions.setState({\n    loading: false,\n    fetching: false,\n    summary: {\n      subscriptionId: subscriptionResponseMock.id,\n      paymentMethodId: 'mockPaymentMethodId',\n      tenantConfigurationId: 'mockTenantConfigurationId',\n      providerType: ProviderType.Stripe,\n      externallyManaged: false,\n      currentPlanId: planResponseMock[0].id,\n      defaultPlanId: planResponseMock[0].id\n    },\n    plan: _extends({}, planResponseMock[0], {\n      price: (_planResponseMock$0$p = planResponseMock[0].price) == null ? void 0 : _planResponseMock$0$p.amount,\n      currency: (_planResponseMock$0$p2 = planResponseMock[0].price) == null ? void 0 : _planResponseMock$0$p2.currency,\n      recurringInterval: 'month'\n    })\n  }));\n}\nexport function* subscriptionBillingInformationSagasMock() {\n  yield takeEvery(informationActions.loadBillingInformation, loadBillingInformationMock);\n}","map":{"version":3,"names":["_extends","all","call","delay","put","select","takeEvery","api","ProviderType","informationActions","SubscriptionStatus","toSubscriptionCancellation","toSubscriptionStatus","planResponseMock","subscriptionResponseMock","loadSubscription","subscriptionBillingInformationSagas","loadBillingInformation","loadBillingInformationAction","forceActive","paymentProvider","state","_state$subscriptions$","subscriptions","config","tenantId","_state$auth","_state$auth$user","auth","user","setError","loadSummaries","setLoading","_planResponse$price","_planResponse$price2","summary","getSubscriptionSummaries","currentPlanId","externallyManaged","subscriptionResponse","planResponse","getSubscriptionPlan","billing","subscription","setState","loading","fetching","id","externalId","startDate","currentPeriodStart","currentPeriodEnd","status","ACTIVE","cancellation","trialEnd","plan","name","description","price","amount","currency","recurringInterval","slug","e","message","loadBillingInformationMock","loadSummariesMock","_planResponseMock$0$p","_planResponseMock$0$p2","subscriptionId","paymentMethodId","tenantConfigurationId","providerType","Stripe","defaultPlanId","subscriptionBillingInformationSagasMock"],"sources":["/Users/morank/Documents/react-hosted-login-assignment/my-app/node_modules/@frontegg/redux-store/subscriptions/Billing/Information/saga.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { all, call, delay, put, select, takeEvery } from 'redux-saga/effects';\nimport { api, ProviderType } from '@frontegg/rest-api';\nimport { informationActions } from './index';\nimport { SubscriptionStatus } from '../../general.interfaces';\nimport { toSubscriptionCancellation, toSubscriptionStatus } from '../../mapper';\nimport { planResponseMock, subscriptionResponseMock } from '../../dummy';\nimport { loadSubscription } from '../Subscription/saga';\nexport function* subscriptionBillingInformationSagas() {\n  yield takeEvery(informationActions.loadBillingInformation, loadBillingInformation);\n}\nexport function* loadBillingInformation() {\n  yield loadBillingInformationAction(false);\n}\n\nfunction* loadBillingInformationAction(forceActive) {\n  const paymentProvider = yield select(state => {\n    var _state$subscriptions$;\n\n    return (_state$subscriptions$ = state.subscriptions.config.config) == null ? void 0 : _state$subscriptions$.paymentProvider;\n  });\n  const tenantId = yield select(state => {\n    var _state$auth, _state$auth$user;\n\n    return (_state$auth = state.auth) == null ? void 0 : (_state$auth$user = _state$auth.user) == null ? void 0 : _state$auth$user.tenantId;\n  });\n\n  if (!paymentProvider || !tenantId) {\n    yield put(informationActions.setError(!paymentProvider ? 'Internal feature failure' : 'Not authorized'));\n    return;\n  }\n\n  yield loadSummaries(tenantId, forceActive);\n}\n\nexport function* loadSummaries(tenantId, forceActive) {\n  yield put(informationActions.setLoading(true));\n\n  try {\n    var _planResponse$price, _planResponse$price2;\n\n    const summary = yield call(api.subscriptions.getSubscriptionSummaries, tenantId);\n    const {\n      currentPlanId,\n      externallyManaged\n    } = summary;\n    let subscriptionResponse = null;\n    let planResponse;\n\n    if (!externallyManaged) {\n      [, planResponse] = yield all([call(loadSubscription), call(api.subscriptions.getSubscriptionPlan, currentPlanId)]);\n      subscriptionResponse = yield select(state => state.subscriptions.billing.subscription.subscription || null);\n    } else {\n      planResponse = yield call(api.subscriptions.getSubscriptionPlan, currentPlanId);\n    }\n\n    yield put(informationActions.setState(_extends({\n      loading: false,\n      fetching: false,\n      summary\n    }, subscriptionResponse ? {\n      subscription: {\n        id: subscriptionResponse.id,\n        externalId: subscriptionResponse.externalId,\n        startDate: subscriptionResponse.startDate,\n        currentPeriodStart: subscriptionResponse.currentPeriodStart,\n        currentPeriodEnd: subscriptionResponse.currentPeriodEnd,\n        status: forceActive ? SubscriptionStatus.ACTIVE : toSubscriptionStatus(subscriptionResponse.status),\n        cancellation: subscriptionResponse.cancellation && toSubscriptionCancellation(subscriptionResponse.cancellation),\n        trialEnd: subscriptionResponse.trialEnd ? subscriptionResponse.trialEnd : null\n      }\n    } : {}, planResponse ? {\n      plan: {\n        id: planResponse.id,\n        name: planResponse.name,\n        description: planResponse.description,\n        price: ((_planResponse$price = planResponse.price) == null ? void 0 : _planResponse$price.amount) || 0,\n        currency: ((_planResponse$price2 = planResponse.price) == null ? void 0 : _planResponse$price2.currency) || 'usd',\n        recurringInterval: 'month',\n        slug: planResponse.slug\n      }\n    } : {})));\n  } catch (e) {\n    yield put(informationActions.setError(e.message));\n  }\n}\n/*********************************\n *  Preview Sagas\n *********************************/\n\nfunction* loadBillingInformationMock() {\n  yield loadSummariesMock();\n}\n\nexport function* loadSummariesMock() {\n  var _planResponseMock$0$p, _planResponseMock$0$p2;\n\n  yield put(informationActions.setLoading(true));\n  yield delay(500);\n  yield put(informationActions.setState({\n    loading: false,\n    fetching: false,\n    summary: {\n      subscriptionId: subscriptionResponseMock.id,\n      paymentMethodId: 'mockPaymentMethodId',\n      tenantConfigurationId: 'mockTenantConfigurationId',\n      providerType: ProviderType.Stripe,\n      externallyManaged: false,\n      currentPlanId: planResponseMock[0].id,\n      defaultPlanId: planResponseMock[0].id\n    },\n    plan: _extends({}, planResponseMock[0], {\n      price: (_planResponseMock$0$p = planResponseMock[0].price) == null ? void 0 : _planResponseMock$0$p.amount,\n      currency: (_planResponseMock$0$p2 = planResponseMock[0].price) == null ? void 0 : _planResponseMock$0$p2.currency,\n      recurringInterval: 'month'\n    })\n  }));\n}\nexport function* subscriptionBillingInformationSagasMock() {\n  yield takeEvery(informationActions.loadBillingInformation, loadBillingInformationMock);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
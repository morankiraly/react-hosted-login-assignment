{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst sessionsPolicyState = {\n  loading: false,\n  configurations: {}\n};\nconst reducers = {\n  setSessionsPolicyState: typeReducerForKey('sessionsPolicyState'),\n  resetSessionsPolicyState: resetStateByKey('sessionsPolicyState', {\n    sessionsPolicyState\n  })\n};\nconst actions = {\n  loadSessionsPolicy: createAction(`${authStoreName}/loadSessionsPolicy`),\n  createOrUpdateSessionsPolicy: createAction(`${authStoreName}/createOrUpdateSessionsPolicy`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { sessionsPolicyState, reducers as sessionsPolicyReducers, actions as sessionsPolicyActions };","map":{"version":3,"names":["createAction","resetStateByKey","typeReducerForKey","authStoreName","sessionsPolicyState","loading","configurations","reducers","setSessionsPolicyState","resetSessionsPolicyState","actions","loadSessionsPolicy","createOrUpdateSessionsPolicy","payload","Matcher","sessionsPolicyReducers","sessionsPolicyActions"],"sources":["/Users/morank/Documents/my-app/node_modules/@frontegg/redux-store/auth/SessionsPolicyState/index.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst sessionsPolicyState = {\n  loading: false,\n  configurations: {}\n};\nconst reducers = {\n  setSessionsPolicyState: typeReducerForKey('sessionsPolicyState'),\n  resetSessionsPolicyState: resetStateByKey('sessionsPolicyState', {\n    sessionsPolicyState\n  })\n};\nconst actions = {\n  loadSessionsPolicy: createAction(`${authStoreName}/loadSessionsPolicy`),\n  createOrUpdateSessionsPolicy: createAction(`${authStoreName}/createOrUpdateSessionsPolicy`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { sessionsPolicyState, reducers as sessionsPolicyReducers, actions as sessionsPolicyActions };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,UAAU;AAC7D,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,MAAMC,mBAAmB,GAAG;EAC1BC,OAAO,EAAE,KAAK;EACdC,cAAc,EAAE,CAAC;AACnB,CAAC;AACD,MAAMC,QAAQ,GAAG;EACfC,sBAAsB,EAAEN,iBAAiB,CAAC,qBAAqB,CAAC;EAChEO,wBAAwB,EAAER,eAAe,CAAC,qBAAqB,EAAE;IAC/DG;EACF,CAAC;AACH,CAAC;AACD,MAAMM,OAAO,GAAG;EACdC,kBAAkB,EAAEX,YAAY,CAAE,GAAEG,aAAc,qBAAoB,CAAC;EACvES,4BAA4B,EAAEZ,YAAY,CAAE,GAAEG,aAAc,+BAA8B,EAAEU,OAAO,KAAK;IACtGA;EACF,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,CAAC,CAAC;AAClB,SAASV,mBAAmB,EAAEG,QAAQ,IAAIQ,sBAAsB,EAAEL,OAAO,IAAIM,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
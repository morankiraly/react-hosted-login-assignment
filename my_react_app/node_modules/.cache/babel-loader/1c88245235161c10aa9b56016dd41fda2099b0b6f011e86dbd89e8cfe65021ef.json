{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { ResetPhoneNumberStep } from './interfaces';\nimport { authStoreName } from '../../constants';\nconst resetPhoneNumberState = {\n  step: ResetPhoneNumberStep.ResetPhoneNumber,\n  loading: false\n};\nconst reducers = {\n  setResetPhoneNumberState: typeReducerForKey('resetPhoneNumberState'),\n  resetResetPhoneNumberState: resetStateByKey('resetPhoneNumberState', {\n    resetPhoneNumberState\n  })\n};\nconst actions = {\n  resetPhoneNumber: createAction(`${authStoreName}/resetPhoneNumber`, payload => ({\n    payload\n  })),\n  verifyResetPhoneNumber: createAction(`${authStoreName}/verifyResetPhoneNumber`, payload => ({\n    payload\n  })),\n  changePhoneNumber: createAction(`${authStoreName}/changePhoneNumber`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { resetPhoneNumberState, reducers as resetPhoneNumberReducers, actions as resetPhoneNumberActions };","map":{"version":3,"names":["createAction","resetStateByKey","typeReducerForKey","ResetPhoneNumberStep","authStoreName","resetPhoneNumberState","step","ResetPhoneNumber","loading","reducers","setResetPhoneNumberState","resetResetPhoneNumberState","actions","resetPhoneNumber","payload","verifyResetPhoneNumber","changePhoneNumber","Matcher","resetPhoneNumberReducers","resetPhoneNumberActions"],"sources":["/Users/sagiittah/Downloads/my-app/node_modules/@frontegg/redux-store/auth/ResetPhoneNumberState/index.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { ResetPhoneNumberStep } from './interfaces';\nimport { authStoreName } from '../../constants';\nconst resetPhoneNumberState = {\n  step: ResetPhoneNumberStep.ResetPhoneNumber,\n  loading: false\n};\nconst reducers = {\n  setResetPhoneNumberState: typeReducerForKey('resetPhoneNumberState'),\n  resetResetPhoneNumberState: resetStateByKey('resetPhoneNumberState', {\n    resetPhoneNumberState\n  })\n};\nconst actions = {\n  resetPhoneNumber: createAction(`${authStoreName}/resetPhoneNumber`, payload => ({\n    payload\n  })),\n  verifyResetPhoneNumber: createAction(`${authStoreName}/verifyResetPhoneNumber`, payload => ({\n    payload\n  })),\n  changePhoneNumber: createAction(`${authStoreName}/changePhoneNumber`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { resetPhoneNumberState, reducers as resetPhoneNumberReducers, actions as resetPhoneNumberActions };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,UAAU;AAC7D,SAASC,oBAAoB,QAAQ,cAAc;AACnD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,MAAMC,qBAAqB,GAAG;EAC5BC,IAAI,EAAEH,oBAAoB,CAACI,gBAAgB;EAC3CC,OAAO,EAAE;AACX,CAAC;AACD,MAAMC,QAAQ,GAAG;EACfC,wBAAwB,EAAER,iBAAiB,CAAC,uBAAuB,CAAC;EACpES,0BAA0B,EAAEV,eAAe,CAAC,uBAAuB,EAAE;IACnEI;EACF,CAAC;AACH,CAAC;AACD,MAAMO,OAAO,GAAG;EACdC,gBAAgB,EAAEb,YAAY,CAAE,GAAEI,aAAc,mBAAkB,EAAEU,OAAO,KAAK;IAC9EA;EACF,CAAC,CAAC,CAAC;EACHC,sBAAsB,EAAEf,YAAY,CAAE,GAAEI,aAAc,yBAAwB,EAAEU,OAAO,KAAK;IAC1FA;EACF,CAAC,CAAC,CAAC;EACHE,iBAAiB,EAAEhB,YAAY,CAAE,GAAEI,aAAc,oBAAmB,EAAEU,OAAO,KAAK;IAChFA;EACF,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAMG,OAAO,GAAG,CAAC,CAAC;AAClB,SAASZ,qBAAqB,EAAEI,QAAQ,IAAIS,wBAAwB,EAAEN,OAAO,IAAIO,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
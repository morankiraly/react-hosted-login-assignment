{"ast":null,"code":"import { takeLatest, put, call, select, takeEvery } from 'redux-saga/effects';\nimport { api } from '@frontegg/rest-api';\nimport { actions } from '../reducer';\nimport { sessionsMock } from '../dummy';\nfunction* loadCurrentUserSessions() {\n  yield put(actions.setSessionsState({\n    loading: true,\n    error: null\n  }));\n  try {\n    const sessions = yield call(api.auth.getCurrentUserSessions);\n    yield put(actions.setSessionsState({\n      sessions,\n      loading: false\n    }));\n  } catch (e) {\n    yield put(actions.setSessionsState({\n      error: e,\n      loading: false\n    }));\n  }\n}\nfunction* loadCurrentUserSession() {\n  yield put(actions.setSessionsState({\n    loading: true,\n    error: null\n  }));\n  try {\n    const session = yield call(api.auth.getCurrentUserSession);\n    yield put(actions.setSessionsState({\n      currentSession: session,\n      loading: false\n    }));\n  } catch (e) {\n    yield put(actions.setSessionsState({\n      error: e,\n      loading: false\n    }));\n  }\n}\nfunction deleteUserSession(_ref) {\n  let {\n    payload: {\n      id\n    }\n  } = _ref;\n  return function* () {\n    yield put(actions.setSessionsState({\n      loading: true,\n      error: null\n    }));\n    try {\n      yield call(api.auth.deleteSessionForUser, id);\n      yield put(actions.loadUserSessions());\n    } catch (e) {\n      yield put(actions.setSessionsState({\n        error: e,\n        loading: false\n      }));\n    }\n  }();\n}\nfunction revokeUserSessions(_ref2) {\n  let {\n    payload: {\n      callback,\n      userId\n    }\n  } = _ref2;\n  return function* () {\n    yield put(actions.setSessionsState({\n      loading: true,\n      error: null\n    }));\n    try {\n      yield call(api.auth.revokeSessionsForUser, userId);\n      callback == null ? void 0 : callback(true);\n    } catch (e) {\n      yield put(actions.setSessionsState({\n        error: e,\n        loading: false\n      }));\n      callback == null ? void 0 : callback(false);\n    }\n  }();\n}\nfunction* deleteAllUserSessions() {\n  yield put(actions.setSessionsState({\n    loading: true,\n    error: null\n  }));\n  try {\n    yield call(api.auth.deleteAllSessionsForUser);\n    yield put(actions.loadUserSessions());\n  } catch (e) {\n    yield put(actions.setSessionsState({\n      error: e,\n      loading: false\n    }));\n  }\n}\nexport function* sessionsSaga() {\n  yield takeLatest(actions.loadUserSessions, loadCurrentUserSessions);\n  yield takeLatest(actions.deleteUserSession, deleteUserSession);\n  yield takeLatest(actions.deleteAllUserSessions, deleteAllUserSessions);\n  yield takeLatest(actions.loadCurrentUserSession, loadCurrentUserSession);\n  yield takeEvery(actions.revokeUserSessions, revokeUserSessions);\n}\n/*********************************\n *  Preview Sagas\n *********************************/\n\nfunction* loadCurrentUserSessionsMock() {\n  yield put(actions.setSessionsState({\n    loading: true,\n    error: null\n  }));\n  yield put(actions.setSessionsState({\n    sessions: sessionsMock,\n    loading: false\n  }));\n}\nfunction deleteUserSessionMock(_ref3) {\n  let {\n    payload: {\n      id\n    }\n  } = _ref3;\n  return function* () {\n    yield put(actions.setSessionsState({\n      loading: true,\n      error: null\n    }));\n    const currentSessions = yield select(state => {\n      var _state$auth$sessionsS;\n      return (_state$auth$sessionsS = state.auth.sessionsState.sessions) != null ? _state$auth$sessionsS : [];\n    });\n    const newSessions = currentSessions.filter(s => s.id !== id);\n    yield put(actions.setSessionsState({\n      sessions: newSessions,\n      loading: false\n    }));\n  }();\n}\nfunction* deleteAllUserSessionsMock() {\n  yield put(actions.setSessionsState({\n    loading: true,\n    error: null\n  }));\n  const newSessions = sessionsMock.filter(s => s.current);\n  yield put(actions.setSessionsState({\n    sessions: newSessions,\n    loading: false\n  }));\n}\nexport function* sessionsSagaMock() {\n  yield takeLatest(actions.loadUserSessions, loadCurrentUserSessionsMock);\n  yield takeLatest(actions.deleteUserSession, deleteUserSessionMock);\n  yield takeLatest(actions.deleteAllUserSessions, deleteAllUserSessionsMock);\n}","map":{"version":3,"names":["takeLatest","put","call","select","takeEvery","api","actions","sessionsMock","loadCurrentUserSessions","setSessionsState","loading","error","sessions","auth","getCurrentUserSessions","e","loadCurrentUserSession","session","getCurrentUserSession","currentSession","deleteUserSession","payload","id","deleteSessionForUser","loadUserSessions","revokeUserSessions","callback","userId","revokeSessionsForUser","deleteAllUserSessions","deleteAllSessionsForUser","sessionsSaga","loadCurrentUserSessionsMock","deleteUserSessionMock","currentSessions","state","_state$auth$sessionsS","sessionsState","newSessions","filter","s","deleteAllUserSessionsMock","current","sessionsSagaMock"],"sources":["/Users/morank/Documents/my-app/node_modules/@frontegg/redux-store/auth/SessionsState/saga.js"],"sourcesContent":["import { takeLatest, put, call, select, takeEvery } from 'redux-saga/effects';\nimport { api } from '@frontegg/rest-api';\nimport { actions } from '../reducer';\nimport { sessionsMock } from '../dummy';\n\nfunction* loadCurrentUserSessions() {\n  yield put(actions.setSessionsState({\n    loading: true,\n    error: null\n  }));\n\n  try {\n    const sessions = yield call(api.auth.getCurrentUserSessions);\n    yield put(actions.setSessionsState({\n      sessions,\n      loading: false\n    }));\n  } catch (e) {\n    yield put(actions.setSessionsState({\n      error: e,\n      loading: false\n    }));\n  }\n}\n\nfunction* loadCurrentUserSession() {\n  yield put(actions.setSessionsState({\n    loading: true,\n    error: null\n  }));\n\n  try {\n    const session = yield call(api.auth.getCurrentUserSession);\n    yield put(actions.setSessionsState({\n      currentSession: session,\n      loading: false\n    }));\n  } catch (e) {\n    yield put(actions.setSessionsState({\n      error: e,\n      loading: false\n    }));\n  }\n}\n\nfunction* deleteUserSession({\n  payload: {\n    id\n  }\n}) {\n  yield put(actions.setSessionsState({\n    loading: true,\n    error: null\n  }));\n\n  try {\n    yield call(api.auth.deleteSessionForUser, id);\n    yield put(actions.loadUserSessions());\n  } catch (e) {\n    yield put(actions.setSessionsState({\n      error: e,\n      loading: false\n    }));\n  }\n}\n\nfunction* revokeUserSessions({\n  payload: {\n    callback,\n    userId\n  }\n}) {\n  yield put(actions.setSessionsState({\n    loading: true,\n    error: null\n  }));\n\n  try {\n    yield call(api.auth.revokeSessionsForUser, userId);\n    callback == null ? void 0 : callback(true);\n  } catch (e) {\n    yield put(actions.setSessionsState({\n      error: e,\n      loading: false\n    }));\n    callback == null ? void 0 : callback(false);\n  }\n}\n\nfunction* deleteAllUserSessions() {\n  yield put(actions.setSessionsState({\n    loading: true,\n    error: null\n  }));\n\n  try {\n    yield call(api.auth.deleteAllSessionsForUser);\n    yield put(actions.loadUserSessions());\n  } catch (e) {\n    yield put(actions.setSessionsState({\n      error: e,\n      loading: false\n    }));\n  }\n}\n\nexport function* sessionsSaga() {\n  yield takeLatest(actions.loadUserSessions, loadCurrentUserSessions);\n  yield takeLatest(actions.deleteUserSession, deleteUserSession);\n  yield takeLatest(actions.deleteAllUserSessions, deleteAllUserSessions);\n  yield takeLatest(actions.loadCurrentUserSession, loadCurrentUserSession);\n  yield takeEvery(actions.revokeUserSessions, revokeUserSessions);\n}\n/*********************************\n *  Preview Sagas\n *********************************/\n\nfunction* loadCurrentUserSessionsMock() {\n  yield put(actions.setSessionsState({\n    loading: true,\n    error: null\n  }));\n  yield put(actions.setSessionsState({\n    sessions: sessionsMock,\n    loading: false\n  }));\n}\n\nfunction* deleteUserSessionMock({\n  payload: {\n    id\n  }\n}) {\n  yield put(actions.setSessionsState({\n    loading: true,\n    error: null\n  }));\n  const currentSessions = yield select(state => {\n    var _state$auth$sessionsS;\n\n    return (_state$auth$sessionsS = state.auth.sessionsState.sessions) != null ? _state$auth$sessionsS : [];\n  });\n  const newSessions = currentSessions.filter(s => s.id !== id);\n  yield put(actions.setSessionsState({\n    sessions: newSessions,\n    loading: false\n  }));\n}\n\nfunction* deleteAllUserSessionsMock() {\n  yield put(actions.setSessionsState({\n    loading: true,\n    error: null\n  }));\n  const newSessions = sessionsMock.filter(s => s.current);\n  yield put(actions.setSessionsState({\n    sessions: newSessions,\n    loading: false\n  }));\n}\n\nexport function* sessionsSagaMock() {\n  yield takeLatest(actions.loadUserSessions, loadCurrentUserSessionsMock);\n  yield takeLatest(actions.deleteUserSession, deleteUserSessionMock);\n  yield takeLatest(actions.deleteAllUserSessions, deleteAllUserSessionsMock);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { typeReducerForKey } from '../utils';\nimport { createAction } from '@reduxjs/toolkit';\nimport { auditsStoreName } from '../../constants';\nconst auditLogsState = {\n  loading: true,\n  pageOffset: 0,\n  pageSize: 20,\n  logs: [],\n  sort: [],\n  filter: [],\n  totalPages: 0,\n  isDownloadingCsv: false\n};\nconst reducers = {\n  setAuditLogsState: typeReducerForKey('auditLogsState'),\n  resetAuditLogsState: state => _extends({}, state, {\n    auditLogsState\n  })\n};\nconst actions = {\n  exportAuditsCsv: createAction(`${auditsStoreName}/exportAuditsCsv`),\n  loadAuditLogs: createAction(`${auditsStoreName}/loadAuditLogs`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { auditLogsState, reducers as auditLogsReducers, actions as auditLogsActions };","map":{"version":3,"names":["_extends","typeReducerForKey","createAction","auditsStoreName","auditLogsState","loading","pageOffset","pageSize","logs","sort","filter","totalPages","isDownloadingCsv","reducers","setAuditLogsState","resetAuditLogsState","state","actions","exportAuditsCsv","loadAuditLogs","payload","Matcher","auditLogsReducers","auditLogsActions"],"sources":["/Users/morank/Documents/my-app/node_modules/@frontegg/redux-store/audits/AuditLogsState/index.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { typeReducerForKey } from '../utils';\nimport { createAction } from '@reduxjs/toolkit';\nimport { auditsStoreName } from '../../constants';\nconst auditLogsState = {\n  loading: true,\n  pageOffset: 0,\n  pageSize: 20,\n  logs: [],\n  sort: [],\n  filter: [],\n  totalPages: 0,\n  isDownloadingCsv: false\n};\nconst reducers = {\n  setAuditLogsState: typeReducerForKey('auditLogsState'),\n  resetAuditLogsState: state => _extends({}, state, {\n    auditLogsState\n  })\n};\nconst actions = {\n  exportAuditsCsv: createAction(`${auditsStoreName}/exportAuditsCsv`),\n  loadAuditLogs: createAction(`${auditsStoreName}/loadAuditLogs`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { auditLogsState, reducers as auditLogsReducers, actions as auditLogsActions };"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,SAASC,iBAAiB,QAAQ,UAAU;AAC5C,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,eAAe,QAAQ,iBAAiB;AACjD,MAAMC,cAAc,GAAG;EACrBC,OAAO,EAAE,IAAI;EACbC,UAAU,EAAE,CAAC;EACbC,QAAQ,EAAE,EAAE;EACZC,IAAI,EAAE,EAAE;EACRC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAE,EAAE;EACVC,UAAU,EAAE,CAAC;EACbC,gBAAgB,EAAE;AACpB,CAAC;AACD,MAAMC,QAAQ,GAAG;EACfC,iBAAiB,EAAEb,iBAAiB,CAAC,gBAAgB,CAAC;EACtDc,mBAAmB,EAAEC,KAAK,IAAIhB,QAAQ,CAAC,CAAC,CAAC,EAAEgB,KAAK,EAAE;IAChDZ;EACF,CAAC;AACH,CAAC;AACD,MAAMa,OAAO,GAAG;EACdC,eAAe,EAAEhB,YAAY,CAAE,GAAEC,eAAgB,kBAAiB,CAAC;EACnEgB,aAAa,EAAEjB,YAAY,CAAE,GAAEC,eAAgB,gBAAe,EAAEiB,OAAO,KAAK;IAC1EA;EACF,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,CAAC,CAAC;AAClB,SAASjB,cAAc,EAAES,QAAQ,IAAIS,iBAAiB,EAAEL,OAAO,IAAIM,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { all, call, put, select, takeEvery } from 'redux-saga/effects';\nimport { checkoutActions } from './index';\nimport { api, ISubscriptionStatus } from '@frontegg/rest-api';\nimport { subscriptionActions } from '../Billing/Subscription';\nimport { loadBillingInformation } from '../Billing/Information/saga';\nimport { loadPaymentMethod } from '../Billing/PaymentMethod/saga';\nimport { loadInvoices } from '../Billing/Invoices/saga';\nexport function* checkoutSagas() {\n  yield takeEvery(checkoutActions.loadCheckout, loadCheckout);\n  yield takeEvery(checkoutActions.resetCheckout, resetCheckout);\n  yield takeEvery(checkoutActions.submitCheckout, submitCheckout);\n  yield takeEvery(checkoutActions.confirmCheckout, confirmPlan);\n  yield takeEvery(checkoutActions.errorCheckout, errorCheckout);\n}\nfunction* loadCheckout() {\n  yield put(checkoutActions.setState({\n    fetching: false,\n    loading: false,\n    error: null,\n    confirmed: false\n  }));\n}\nfunction* resetCheckout() {\n  yield put(checkoutActions.setState({\n    loading: false,\n    error: null,\n    confirmed: false\n  }));\n}\n/**\n * Based on payment provider type\n */\n\nfunction* submitCheckout() {\n  yield put(checkoutActions.setState({\n    loading: true,\n    error: null\n  }));\n}\nfunction confirmPlan(_ref) {\n  let {\n    payload: {\n      paymentMethodId,\n      planId\n    }\n  } = _ref;\n  return function* () {\n    const subscription = yield select(state => state.subscriptions.billing.subscription.subscription);\n    const summary = yield select(state => state.subscriptions.billing.information.summary);\n    const isTrialing = (subscription == null ? void 0 : subscription.status) === ISubscriptionStatus.TRIALING;\n    const hasPaymentMethod = !!(summary != null && summary.paymentMethodId);\n    if (!subscription) {\n      yield put(checkoutActions.setState({\n        loading: false,\n        error: 'Subscription not found'\n      }));\n      return;\n    }\n    yield put(checkoutActions.setState({\n      loading: true,\n      error: null\n    }));\n    if (isTrialing && hasPaymentMethod) {\n      yield confirmCheckout();\n      yield put(subscriptionActions.setState({\n        subscription: _extends({}, subscription, {\n          status: ISubscriptionStatus.ACTIVE\n        })\n      }));\n      return;\n    }\n    try {\n      yield call(api.subscriptions.updateManagedSubscription, subscription.id, {\n        paymentMethodId,\n        planId\n      });\n      yield all([loadBillingInformation(), loadPaymentMethod(), loadInvoices()]);\n      yield confirmCheckout();\n    } catch (e) {\n      yield put(checkoutActions.setState({\n        loading: false,\n        error: e.message\n      }));\n    }\n  }();\n}\nfunction* confirmCheckout() {\n  yield put(checkoutActions.setState({\n    loading: false,\n    error: null,\n    confirmed: true\n  }));\n}\nfunction errorCheckout(_ref2) {\n  let {\n    payload\n  } = _ref2;\n  return function* () {\n    yield put(checkoutActions.setState({\n      loading: false,\n      error: payload\n    }));\n  }();\n}\n/*********************************\n *  Preview Sagas\n *********************************/\n\nexport function* checkoutSagasMock() {\n  yield takeEvery(checkoutActions.resetCheckout, resetCheckout);\n}","map":{"version":3,"names":["_extends","all","call","put","select","takeEvery","checkoutActions","api","ISubscriptionStatus","subscriptionActions","loadBillingInformation","loadPaymentMethod","loadInvoices","checkoutSagas","loadCheckout","resetCheckout","submitCheckout","confirmCheckout","confirmPlan","errorCheckout","setState","fetching","loading","error","confirmed","payload","paymentMethodId","planId","subscription","state","subscriptions","billing","summary","information","isTrialing","status","TRIALING","hasPaymentMethod","ACTIVE","updateManagedSubscription","id","e","message","checkoutSagasMock"],"sources":["/Users/morank/Documents/my-app/node_modules/@frontegg/redux-store/subscriptions/Checkout/saga.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { all, call, put, select, takeEvery } from 'redux-saga/effects';\nimport { checkoutActions } from './index';\nimport { api, ISubscriptionStatus } from '@frontegg/rest-api';\nimport { subscriptionActions } from '../Billing/Subscription';\nimport { loadBillingInformation } from '../Billing/Information/saga';\nimport { loadPaymentMethod } from '../Billing/PaymentMethod/saga';\nimport { loadInvoices } from '../Billing/Invoices/saga';\nexport function* checkoutSagas() {\n  yield takeEvery(checkoutActions.loadCheckout, loadCheckout);\n  yield takeEvery(checkoutActions.resetCheckout, resetCheckout);\n  yield takeEvery(checkoutActions.submitCheckout, submitCheckout);\n  yield takeEvery(checkoutActions.confirmCheckout, confirmPlan);\n  yield takeEvery(checkoutActions.errorCheckout, errorCheckout);\n}\n\nfunction* loadCheckout() {\n  yield put(checkoutActions.setState({\n    fetching: false,\n    loading: false,\n    error: null,\n    confirmed: false\n  }));\n}\n\nfunction* resetCheckout() {\n  yield put(checkoutActions.setState({\n    loading: false,\n    error: null,\n    confirmed: false\n  }));\n}\n/**\n * Based on payment provider type\n */\n\n\nfunction* submitCheckout() {\n  yield put(checkoutActions.setState({\n    loading: true,\n    error: null\n  }));\n}\n\nfunction* confirmPlan({\n  payload: {\n    paymentMethodId,\n    planId\n  }\n}) {\n  const subscription = yield select(state => state.subscriptions.billing.subscription.subscription);\n  const summary = yield select(state => state.subscriptions.billing.information.summary);\n  const isTrialing = (subscription == null ? void 0 : subscription.status) === ISubscriptionStatus.TRIALING;\n  const hasPaymentMethod = !!(summary != null && summary.paymentMethodId);\n\n  if (!subscription) {\n    yield put(checkoutActions.setState({\n      loading: false,\n      error: 'Subscription not found'\n    }));\n    return;\n  }\n\n  yield put(checkoutActions.setState({\n    loading: true,\n    error: null\n  }));\n\n  if (isTrialing && hasPaymentMethod) {\n    yield confirmCheckout();\n    yield put(subscriptionActions.setState({\n      subscription: _extends({}, subscription, {\n        status: ISubscriptionStatus.ACTIVE\n      })\n    }));\n    return;\n  }\n\n  try {\n    yield call(api.subscriptions.updateManagedSubscription, subscription.id, {\n      paymentMethodId,\n      planId\n    });\n    yield all([loadBillingInformation(), loadPaymentMethod(), loadInvoices()]);\n    yield confirmCheckout();\n  } catch (e) {\n    yield put(checkoutActions.setState({\n      loading: false,\n      error: e.message\n    }));\n  }\n}\n\nfunction* confirmCheckout() {\n  yield put(checkoutActions.setState({\n    loading: false,\n    error: null,\n    confirmed: true\n  }));\n}\n\nfunction* errorCheckout({\n  payload\n}) {\n  yield put(checkoutActions.setState({\n    loading: false,\n    error: payload\n  }));\n}\n/*********************************\n *  Preview Sagas\n *********************************/\n\n\nexport function* checkoutSagasMock() {\n  yield takeEvery(checkoutActions.resetCheckout, resetCheckout);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { call, put, takeEvery, delay } from 'redux-saga/effects';\nimport { configActions } from './index';\nimport { api, ProviderType } from '@frontegg/rest-api';\nimport { PaymentProvider } from '../interfaces';\nexport function* configSagas() {\n  yield takeEvery(configActions.loadPaymentConfiguration, loadPaymentConfiguration);\n}\nfunction* loadPaymentConfiguration() {\n  yield put(configActions.setLoading(true));\n  try {\n    const response = yield call(api.subscriptions.getPaymentProviders) || [];\n    const stripePaymentProvider = response.find(paymentProvider => paymentProvider.status === '1' && paymentProvider.providerType === ProviderType.Stripe);\n    if (stripePaymentProvider) {\n      yield loadStripePaymentConfiguration();\n    } else {\n      yield put(configActions.setError('Payment provider not configured'));\n    }\n  } catch (e) {\n    yield put(configActions.setError(e.message));\n  }\n}\nfunction* loadStripePaymentConfiguration() {\n  yield put(configActions.setLoading(true));\n  try {\n    const response = yield call(api.subscriptions.getStripePaymentProviderConfiguration);\n    yield put(configActions.setState({\n      loading: false,\n      fetching: false,\n      config: {\n        paymentProvider: PaymentProvider.STRIPE,\n        apiKey: response.publishableKey\n      }\n    }));\n  } catch (e) {\n    yield put(configActions.setError(e.message));\n  }\n}\n/*********************************\n *  Preview Sagas\n *********************************/\n\nfunction* loadPaymentConfigurationMock() {\n  yield put(configActions.setLoading(true));\n  yield delay(500);\n  yield put(configActions.setState({\n    loading: false,\n    fetching: false,\n    config: {\n      paymentProvider: PaymentProvider.STRIPE,\n      apiKey: ''\n    }\n  }));\n}\nexport function* configSagasMock() {\n  yield takeEvery(configActions.loadPaymentConfiguration, loadPaymentConfigurationMock);\n}","map":{"version":3,"names":["call","put","takeEvery","delay","configActions","api","ProviderType","PaymentProvider","configSagas","loadPaymentConfiguration","setLoading","response","subscriptions","getPaymentProviders","stripePaymentProvider","find","paymentProvider","status","providerType","Stripe","loadStripePaymentConfiguration","setError","e","message","getStripePaymentProviderConfiguration","setState","loading","fetching","config","STRIPE","apiKey","publishableKey","loadPaymentConfigurationMock","configSagasMock"],"sources":["/Users/morank/Documents/react-hosted-login-assignment/my-app/node_modules/@frontegg/redux-store/subscriptions/Config/saga.js"],"sourcesContent":["import { call, put, takeEvery, delay } from 'redux-saga/effects';\nimport { configActions } from './index';\nimport { api, ProviderType } from '@frontegg/rest-api';\nimport { PaymentProvider } from '../interfaces';\nexport function* configSagas() {\n  yield takeEvery(configActions.loadPaymentConfiguration, loadPaymentConfiguration);\n}\n\nfunction* loadPaymentConfiguration() {\n  yield put(configActions.setLoading(true));\n\n  try {\n    const response = yield call(api.subscriptions.getPaymentProviders) || [];\n    const stripePaymentProvider = response.find(paymentProvider => paymentProvider.status === '1' && paymentProvider.providerType === ProviderType.Stripe);\n\n    if (stripePaymentProvider) {\n      yield loadStripePaymentConfiguration();\n    } else {\n      yield put(configActions.setError('Payment provider not configured'));\n    }\n  } catch (e) {\n    yield put(configActions.setError(e.message));\n  }\n}\n\nfunction* loadStripePaymentConfiguration() {\n  yield put(configActions.setLoading(true));\n\n  try {\n    const response = yield call(api.subscriptions.getStripePaymentProviderConfiguration);\n    yield put(configActions.setState({\n      loading: false,\n      fetching: false,\n      config: {\n        paymentProvider: PaymentProvider.STRIPE,\n        apiKey: response.publishableKey\n      }\n    }));\n  } catch (e) {\n    yield put(configActions.setError(e.message));\n  }\n}\n/*********************************\n *  Preview Sagas\n *********************************/\n\n\nfunction* loadPaymentConfigurationMock() {\n  yield put(configActions.setLoading(true));\n  yield delay(500);\n  yield put(configActions.setState({\n    loading: false,\n    fetching: false,\n    config: {\n      paymentProvider: PaymentProvider.STRIPE,\n      apiKey: ''\n    }\n  }));\n}\n\nexport function* configSagasMock() {\n  yield takeEvery(configActions.loadPaymentConfiguration, loadPaymentConfigurationMock);\n}"],"mappings":"AAAA,SAASA,IAAI,EAAEC,GAAG,EAAEC,SAAS,EAAEC,KAAK,QAAQ,oBAAoB;AAChE,SAASC,aAAa,QAAQ,SAAS;AACvC,SAASC,GAAG,EAAEC,YAAY,QAAQ,oBAAoB;AACtD,SAASC,eAAe,QAAQ,eAAe;AAC/C,OAAO,UAAUC,WAAW,GAAG;EAC7B,MAAMN,SAAS,CAACE,aAAa,CAACK,wBAAwB,EAAEA,wBAAwB,CAAC;AACnF;AAEA,UAAUA,wBAAwB,GAAG;EACnC,MAAMR,GAAG,CAACG,aAAa,CAACM,UAAU,CAAC,IAAI,CAAC,CAAC;EAEzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMX,IAAI,CAACK,GAAG,CAACO,aAAa,CAACC,mBAAmB,CAAC,IAAI,EAAE;IACxE,MAAMC,qBAAqB,GAAGH,QAAQ,CAACI,IAAI,CAACC,eAAe,IAAIA,eAAe,CAACC,MAAM,KAAK,GAAG,IAAID,eAAe,CAACE,YAAY,KAAKZ,YAAY,CAACa,MAAM,CAAC;IAEtJ,IAAIL,qBAAqB,EAAE;MACzB,MAAMM,8BAA8B,EAAE;IACxC,CAAC,MAAM;MACL,MAAMnB,GAAG,CAACG,aAAa,CAACiB,QAAQ,CAAC,iCAAiC,CAAC,CAAC;IACtE;EACF,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,MAAMrB,GAAG,CAACG,aAAa,CAACiB,QAAQ,CAACC,CAAC,CAACC,OAAO,CAAC,CAAC;EAC9C;AACF;AAEA,UAAUH,8BAA8B,GAAG;EACzC,MAAMnB,GAAG,CAACG,aAAa,CAACM,UAAU,CAAC,IAAI,CAAC,CAAC;EAEzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMX,IAAI,CAACK,GAAG,CAACO,aAAa,CAACY,qCAAqC,CAAC;IACpF,MAAMvB,GAAG,CAACG,aAAa,CAACqB,QAAQ,CAAC;MAC/BC,OAAO,EAAE,KAAK;MACdC,QAAQ,EAAE,KAAK;MACfC,MAAM,EAAE;QACNZ,eAAe,EAAET,eAAe,CAACsB,MAAM;QACvCC,MAAM,EAAEnB,QAAQ,CAACoB;MACnB;IACF,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOT,CAAC,EAAE;IACV,MAAMrB,GAAG,CAACG,aAAa,CAACiB,QAAQ,CAACC,CAAC,CAACC,OAAO,CAAC,CAAC;EAC9C;AACF;AACA;AACA;AACA;;AAGA,UAAUS,4BAA4B,GAAG;EACvC,MAAM/B,GAAG,CAACG,aAAa,CAACM,UAAU,CAAC,IAAI,CAAC,CAAC;EACzC,MAAMP,KAAK,CAAC,GAAG,CAAC;EAChB,MAAMF,GAAG,CAACG,aAAa,CAACqB,QAAQ,CAAC;IAC/BC,OAAO,EAAE,KAAK;IACdC,QAAQ,EAAE,KAAK;IACfC,MAAM,EAAE;MACNZ,eAAe,EAAET,eAAe,CAACsB,MAAM;MACvCC,MAAM,EAAE;IACV;EACF,CAAC,CAAC,CAAC;AACL;AAEA,OAAO,UAAUG,eAAe,GAAG;EACjC,MAAM/B,SAAS,CAACE,aAAa,CAACK,wBAAwB,EAAEuB,4BAA4B,CAAC;AACvF"},"metadata":{},"sourceType":"module","externalDependencies":[]}
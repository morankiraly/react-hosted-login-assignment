{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { AcceptInvitationStep } from './interfaces';\nimport { authStoreName } from '../../constants';\nconst acceptInvitationState = {\n  step: AcceptInvitationStep.validate\n};\nconst reducers = {\n  setAcceptInvitationState: typeReducerForKey('acceptInvitationState'),\n  resetAcceptInvitationState: resetStateByKey('acceptInvitationState', {\n    acceptInvitationState\n  })\n};\nconst actions = {\n  acceptInvitation: createAction(`${authStoreName}/acceptInvitation`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { acceptInvitationState, reducers as acceptInvitationReducers, actions as acceptInvitationActions };","map":{"version":3,"names":["createAction","resetStateByKey","typeReducerForKey","AcceptInvitationStep","authStoreName","acceptInvitationState","step","validate","reducers","setAcceptInvitationState","resetAcceptInvitationState","actions","acceptInvitation","payload","Matcher","acceptInvitationReducers","acceptInvitationActions"],"sources":["/Users/morank/Documents/my-app/node_modules/@frontegg/redux-store/auth/AcceptInvitationState/index.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { AcceptInvitationStep } from './interfaces';\nimport { authStoreName } from '../../constants';\nconst acceptInvitationState = {\n  step: AcceptInvitationStep.validate\n};\nconst reducers = {\n  setAcceptInvitationState: typeReducerForKey('acceptInvitationState'),\n  resetAcceptInvitationState: resetStateByKey('acceptInvitationState', {\n    acceptInvitationState\n  })\n};\nconst actions = {\n  acceptInvitation: createAction(`${authStoreName}/acceptInvitation`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { acceptInvitationState, reducers as acceptInvitationReducers, actions as acceptInvitationActions };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,UAAU;AAC7D,SAASC,oBAAoB,QAAQ,cAAc;AACnD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,MAAMC,qBAAqB,GAAG;EAC5BC,IAAI,EAAEH,oBAAoB,CAACI;AAC7B,CAAC;AACD,MAAMC,QAAQ,GAAG;EACfC,wBAAwB,EAAEP,iBAAiB,CAAC,uBAAuB,CAAC;EACpEQ,0BAA0B,EAAET,eAAe,CAAC,uBAAuB,EAAE;IACnEI;EACF,CAAC;AACH,CAAC;AACD,MAAMM,OAAO,GAAG;EACdC,gBAAgB,EAAEZ,YAAY,CAAE,GAAEI,aAAc,mBAAkB,EAAES,OAAO,KAAK;IAC9EA;EACF,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,CAAC,CAAC;AAClB,SAAST,qBAAqB,EAAEG,QAAQ,IAAIO,wBAAwB,EAAEJ,OAAO,IAAIK,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst socialLoginState = {\n  firstLoad: true,\n  loading: false,\n  error: ''\n};\nconst reducers = {\n  setSocialLoginsState: typeReducerForKey('socialLoginState'),\n  resetSocialLoginsState: resetStateByKey('socialLoginState', {\n    socialLoginState\n  })\n};\nconst actions = {\n  loadSocialLoginsConfiguration: createAction(`${authStoreName}/loadSocialLoginsConfiguration`),\n  loadSocialLoginsConfigurationV2: createAction(`${authStoreName}/loadSocialLoginsConfigurationV2`),\n  loginViaSocialLogin: createAction(`${authStoreName}/loginViaSocialLogin`, payload => ({\n    payload\n  })),\n  setSocialLoginError: createAction(`${authStoreName}/setSocialLoginError`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { socialLoginState, reducers as socialLoginsReducer, actions as socialLoginsActions };","map":{"version":3,"names":["createAction","resetStateByKey","typeReducerForKey","authStoreName","socialLoginState","firstLoad","loading","error","reducers","setSocialLoginsState","resetSocialLoginsState","actions","loadSocialLoginsConfiguration","loadSocialLoginsConfigurationV2","loginViaSocialLogin","payload","setSocialLoginError","Matcher","socialLoginsReducer","socialLoginsActions"],"sources":["/Users/sagiittah/Downloads/my-app/node_modules/@frontegg/redux-store/auth/SocialLogins/index.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst socialLoginState = {\n  firstLoad: true,\n  loading: false,\n  error: ''\n};\nconst reducers = {\n  setSocialLoginsState: typeReducerForKey('socialLoginState'),\n  resetSocialLoginsState: resetStateByKey('socialLoginState', {\n    socialLoginState\n  })\n};\nconst actions = {\n  loadSocialLoginsConfiguration: createAction(`${authStoreName}/loadSocialLoginsConfiguration`),\n  loadSocialLoginsConfigurationV2: createAction(`${authStoreName}/loadSocialLoginsConfigurationV2`),\n  loginViaSocialLogin: createAction(`${authStoreName}/loginViaSocialLogin`, payload => ({\n    payload\n  })),\n  setSocialLoginError: createAction(`${authStoreName}/setSocialLoginError`, payload => ({\n    payload\n  }))\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { socialLoginState, reducers as socialLoginsReducer, actions as socialLoginsActions };"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,UAAU;AAC7D,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,MAAMC,gBAAgB,GAAG;EACvBC,SAAS,EAAE,IAAI;EACfC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AACD,MAAMC,QAAQ,GAAG;EACfC,oBAAoB,EAAEP,iBAAiB,CAAC,kBAAkB,CAAC;EAC3DQ,sBAAsB,EAAET,eAAe,CAAC,kBAAkB,EAAE;IAC1DG;EACF,CAAC;AACH,CAAC;AACD,MAAMO,OAAO,GAAG;EACdC,6BAA6B,EAAEZ,YAAY,CAAE,GAAEG,aAAc,gCAA+B,CAAC;EAC7FU,+BAA+B,EAAEb,YAAY,CAAE,GAAEG,aAAc,kCAAiC,CAAC;EACjGW,mBAAmB,EAAEd,YAAY,CAAE,GAAEG,aAAc,sBAAqB,EAAEY,OAAO,KAAK;IACpFA;EACF,CAAC,CAAC,CAAC;EACHC,mBAAmB,EAAEhB,YAAY,CAAE,GAAEG,aAAc,sBAAqB,EAAEY,OAAO,KAAK;IACpFA;EACF,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAME,OAAO,GAAG,CAAC,CAAC;AAClB,SAASb,gBAAgB,EAAEI,QAAQ,IAAIU,mBAAmB,EAAEP,OAAO,IAAIQ,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey, typeReducerNestedKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst securityPolicyState = {\n  globalPolicy: {\n    loading: true\n  },\n  publicPolicy: {\n    loading: false\n  },\n  vendorMfaPolicy: {\n    loading: true\n  },\n  mfaPolicy: {\n    loading: true\n  },\n  vendorLockoutPolicy: {\n    loading: true\n  },\n  lockoutPolicy: {\n    loading: true\n  },\n  captchaPolicy: {\n    loading: true\n  },\n  passwordHistoryPolicy: {\n    loading: true\n  },\n  passwordPolicy: {\n    loading: true\n  },\n  vendorPasswordHistoryPolicy: {\n    loading: true\n  },\n  publicAuthStrategyPolicy: {\n    loading: true\n  }\n};\nconst reducers = {\n  setSecurityPolicyState: typeReducerForKey('securityPolicyState'),\n  setSecurityPolicyGlobalState: typeReducerNestedKey('securityPolicyState', 'globalPolicy'),\n  setSecurityPolicyPublicState: typeReducerNestedKey('securityPolicyState', 'publicPolicy'),\n  setSecurityPolicyAuthStrategyPublicState: typeReducerNestedKey('securityPolicyState', 'publicAuthStrategyPolicy'),\n  setSecurityPolicyMfaState: typeReducerNestedKey('securityPolicyState', 'mfaPolicy'),\n  setSecurityPolicyVendorMfaState: typeReducerNestedKey('securityPolicyState', 'vendorMfaPolicy'),\n  setSecurityPolicyVendorLockoutState: typeReducerNestedKey('securityPolicyState', 'vendorLockoutPolicy'),\n  setSecurityPolicyVendorPasswordHistoryState: typeReducerNestedKey('securityPolicyState', 'vendorPasswordHistoryPolicy'),\n  setSecurityPolicyLockoutState: typeReducerNestedKey('securityPolicyState', 'lockoutPolicy'),\n  setSecurityPolicyCaptchaState: typeReducerNestedKey('securityPolicyState', 'captchaPolicy'),\n  setSecurityPolicyPasswordHistoryState: typeReducerNestedKey('securityPolicyState', 'passwordHistoryPolicy'),\n  setSecurityPolicyPasswordState: typeReducerNestedKey('securityPolicyState', 'passwordPolicy'),\n  resetSecurityPolicyState: resetStateByKey('securityPolicyState', {\n    securityPolicyState\n  })\n};\nconst actions = {\n  loadSecurityPolicy: createAction(`${authStoreName}/loadSecurityPolicy`),\n  loadPublicSecurityPolicy: createAction(`${authStoreName}/loadPublicSecurityPolicy`),\n  loadSecurityPolicyMfa: createAction(`${authStoreName}/loadSecurityPolicyMfa`),\n  loadSecurityPolicyVendorMfa: createAction(`${authStoreName}/loadSecurityPolicyVendorMfa`),\n  saveSecurityPolicyMfa: createAction(`${authStoreName}/saveSecurityPolicyMfa`, payload => ({\n    payload\n  })),\n  loadSecurityPolicyLockout: createAction(`${authStoreName}/loadSecurityPolicyLockout`),\n  loadSecurityPolicyVendorLockout: createAction(`${authStoreName}/loadSecurityPolicyVendorLockout`),\n  saveSecurityPolicyLockout: createAction(`${authStoreName}/saveSecurityPolicyLockout`, payload => ({\n    payload\n  })),\n  loadSecurityPolicyCaptcha: createAction(`${authStoreName}/loadSecurityPolicyCaptcha`),\n  loadSecurityPolicyPasswordHistory: createAction(`${authStoreName}/loadSecurityPolicyPasswordHistory`),\n  loadSecurityPolicyVendorPasswordHistory: createAction(`${authStoreName}/loadSecurityPolicyVendorPasswordHistory`),\n  saveSecurityPolicyPasswordHistory: createAction(`${authStoreName}/saveSecurityPolicyPasswordHistory`, payload => ({\n    payload\n  })),\n  loadVendorPasswordConfig: createAction(`${authStoreName}/loadVendorPasswordConfig`),\n  loadPublicAuthStrategiesPolicy: createAction(`${authStoreName}/loadPublicAuthStrategiesPolicy`)\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { securityPolicyState, reducers as securityPolicyReducers, actions as securityPolicyActions };","map":{"version":3,"names":["createAction","resetStateByKey","typeReducerForKey","typeReducerNestedKey","authStoreName","securityPolicyState","globalPolicy","loading","publicPolicy","vendorMfaPolicy","mfaPolicy","vendorLockoutPolicy","lockoutPolicy","captchaPolicy","passwordHistoryPolicy","passwordPolicy","vendorPasswordHistoryPolicy","publicAuthStrategyPolicy","reducers","setSecurityPolicyState","setSecurityPolicyGlobalState","setSecurityPolicyPublicState","setSecurityPolicyAuthStrategyPublicState","setSecurityPolicyMfaState","setSecurityPolicyVendorMfaState","setSecurityPolicyVendorLockoutState","setSecurityPolicyVendorPasswordHistoryState","setSecurityPolicyLockoutState","setSecurityPolicyCaptchaState","setSecurityPolicyPasswordHistoryState","setSecurityPolicyPasswordState","resetSecurityPolicyState","actions","loadSecurityPolicy","loadPublicSecurityPolicy","loadSecurityPolicyMfa","loadSecurityPolicyVendorMfa","saveSecurityPolicyMfa","payload","loadSecurityPolicyLockout","loadSecurityPolicyVendorLockout","saveSecurityPolicyLockout","loadSecurityPolicyCaptcha","loadSecurityPolicyPasswordHistory","loadSecurityPolicyVendorPasswordHistory","saveSecurityPolicyPasswordHistory","loadVendorPasswordConfig","loadPublicAuthStrategiesPolicy","Matcher","securityPolicyReducers","securityPolicyActions"],"sources":["/Users/sagiittah/Downloads/my-app/node_modules/@frontegg/redux-store/auth/SecurityPolicyState/index.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { resetStateByKey, typeReducerForKey, typeReducerNestedKey } from '../utils';\nimport { authStoreName } from '../../constants';\nconst securityPolicyState = {\n  globalPolicy: {\n    loading: true\n  },\n  publicPolicy: {\n    loading: false\n  },\n  vendorMfaPolicy: {\n    loading: true\n  },\n  mfaPolicy: {\n    loading: true\n  },\n  vendorLockoutPolicy: {\n    loading: true\n  },\n  lockoutPolicy: {\n    loading: true\n  },\n  captchaPolicy: {\n    loading: true\n  },\n  passwordHistoryPolicy: {\n    loading: true\n  },\n  passwordPolicy: {\n    loading: true\n  },\n  vendorPasswordHistoryPolicy: {\n    loading: true\n  },\n  publicAuthStrategyPolicy: {\n    loading: true\n  }\n};\nconst reducers = {\n  setSecurityPolicyState: typeReducerForKey('securityPolicyState'),\n  setSecurityPolicyGlobalState: typeReducerNestedKey('securityPolicyState', 'globalPolicy'),\n  setSecurityPolicyPublicState: typeReducerNestedKey('securityPolicyState', 'publicPolicy'),\n  setSecurityPolicyAuthStrategyPublicState: typeReducerNestedKey('securityPolicyState', 'publicAuthStrategyPolicy'),\n  setSecurityPolicyMfaState: typeReducerNestedKey('securityPolicyState', 'mfaPolicy'),\n  setSecurityPolicyVendorMfaState: typeReducerNestedKey('securityPolicyState', 'vendorMfaPolicy'),\n  setSecurityPolicyVendorLockoutState: typeReducerNestedKey('securityPolicyState', 'vendorLockoutPolicy'),\n  setSecurityPolicyVendorPasswordHistoryState: typeReducerNestedKey('securityPolicyState', 'vendorPasswordHistoryPolicy'),\n  setSecurityPolicyLockoutState: typeReducerNestedKey('securityPolicyState', 'lockoutPolicy'),\n  setSecurityPolicyCaptchaState: typeReducerNestedKey('securityPolicyState', 'captchaPolicy'),\n  setSecurityPolicyPasswordHistoryState: typeReducerNestedKey('securityPolicyState', 'passwordHistoryPolicy'),\n  setSecurityPolicyPasswordState: typeReducerNestedKey('securityPolicyState', 'passwordPolicy'),\n  resetSecurityPolicyState: resetStateByKey('securityPolicyState', {\n    securityPolicyState\n  })\n};\nconst actions = {\n  loadSecurityPolicy: createAction(`${authStoreName}/loadSecurityPolicy`),\n  loadPublicSecurityPolicy: createAction(`${authStoreName}/loadPublicSecurityPolicy`),\n  loadSecurityPolicyMfa: createAction(`${authStoreName}/loadSecurityPolicyMfa`),\n  loadSecurityPolicyVendorMfa: createAction(`${authStoreName}/loadSecurityPolicyVendorMfa`),\n  saveSecurityPolicyMfa: createAction(`${authStoreName}/saveSecurityPolicyMfa`, payload => ({\n    payload\n  })),\n  loadSecurityPolicyLockout: createAction(`${authStoreName}/loadSecurityPolicyLockout`),\n  loadSecurityPolicyVendorLockout: createAction(`${authStoreName}/loadSecurityPolicyVendorLockout`),\n  saveSecurityPolicyLockout: createAction(`${authStoreName}/saveSecurityPolicyLockout`, payload => ({\n    payload\n  })),\n  loadSecurityPolicyCaptcha: createAction(`${authStoreName}/loadSecurityPolicyCaptcha`),\n  loadSecurityPolicyPasswordHistory: createAction(`${authStoreName}/loadSecurityPolicyPasswordHistory`),\n  loadSecurityPolicyVendorPasswordHistory: createAction(`${authStoreName}/loadSecurityPolicyVendorPasswordHistory`),\n  saveSecurityPolicyPasswordHistory: createAction(`${authStoreName}/saveSecurityPolicyPasswordHistory`, payload => ({\n    payload\n  })),\n  loadVendorPasswordConfig: createAction(`${authStoreName}/loadVendorPasswordConfig`),\n  loadPublicAuthStrategiesPolicy: createAction(`${authStoreName}/loadPublicAuthStrategiesPolicy`)\n};\n/**\n *  To be used for actions types after dispatch, and should contains\n *  the reducers and actions as standalone function\n */\n\n// noinspection JSUnusedLocalSymbols\n\n/**\n *  if you see error in matcher that's mean the DispatchAction does not\n *  contains the same functions in reducers and actions\n */\nconst Matcher = {};\nexport { securityPolicyState, reducers as securityPolicyReducers, actions as securityPolicyActions };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
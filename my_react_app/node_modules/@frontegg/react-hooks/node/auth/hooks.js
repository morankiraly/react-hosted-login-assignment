"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stateHookGenerator = exports.sliceReducerActionsBy = exports.reducerActionsGenerator = void 0;
exports.useAuth = useAuth;
exports.useOnRedirectTo = exports.useLoginWithRedirect = exports.useIsAuthenticated = exports.useAuthUserOrNull = exports.useAuthUser = exports.useAuthRoutes = exports.useAuthActions = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = require("react");

var _reduxStore = require("@frontegg/redux-store");

var _reactRedux = require("react-redux");

var _FronteggStoreContext = require("../FronteggStoreContext");

var _restApi = require("@frontegg/rest-api");

var _common = require("../common");

const defaultMapper = {
  state: state => state,
  actions: actions => actions
};

function useAuth(stateMapper = defaultMapper.state) {
  return (0, _FronteggStoreContext.useSelector)(state => stateMapper(state[_reduxStore.authStoreName]), _reactRedux.shallowEqual);
}
/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const { isAuthenticated, user } = useAuth();
 *   const loginWithRedirect = useLoginWithRedirect();
 *
 *   if (!isAuthenticated) {
 *     loginWithRedirect();
 *     return <></>;
 *   }
 *
 *   return (<div>Hello User {user.name}</div>);
 * }
 * ```
 *
 * use this frontegg hook function to get if user is "Authenticated"
 */


const useLoginWithRedirect = () => {
  const dispatch = (0, _FronteggStoreContext.useDispatch)();
  return (0, _react.useMemo)(() => (0, _reduxStore.bindActionCreators)(_reduxStore.authActions.requestHostedLoginAuthorize, dispatch), [_reduxStore.authActions.requestHostedLoginAuthorize]);
};

exports.useLoginWithRedirect = useLoginWithRedirect;

const useAuthActions = () => {
  const dispatch = (0, _FronteggStoreContext.useDispatch)();
  return (0, _react.useMemo)(() => (0, _reduxStore.bindActionCreators)(_reduxStore.authActions, dispatch), [_reduxStore.authActions]);
};

exports.useAuthActions = useAuthActions;

const useOnRedirectTo = () => {
  var _context$onRedirectTo;

  const context = (0, _react.useContext)(_common.ShadowDomContext);
  return (_context$onRedirectTo = context == null ? void 0 : context.onRedirectTo) != null ? _context$onRedirectTo : _restApi.ContextHolder.onRedirectTo;
};

exports.useOnRedirectTo = useOnRedirectTo;

const useAuthRoutes = () => useAuth(state => (0, _extends2.default)({}, state.routes));
/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const isAuthenticated  = useIsAuthenticated();
 *   return isAuthenticated ? <div>Hello User</div> : <Redirect to={'/login'}/>
 * }
 * ```
 *
 * use this frontegg hook function to get if user is "Authenticated"
 */


exports.useAuthRoutes = useAuthRoutes;

const useIsAuthenticated = () => (0, _FronteggStoreContext.useSelector)(({
  [_reduxStore.authStoreName]: {
    isAuthenticated
  }
}) => isAuthenticated, _reactRedux.shallowEqual);
/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const user = useAuthUser();
 *   return user ? <div>Hello {user.name}!</div> : <div>Hello Guest!</div>
 * }
 * ```
 *
 * use this frontegg hook function to get the authenticated user
 * the return user is null if not authenticated
 */


exports.useIsAuthenticated = useIsAuthenticated;

const useAuthUser = () => {
  const routes = useAuthRoutes();
  const onRedirectTo = useOnRedirectTo();
  const user = useAuthUserOrNull();
  const isSSR = typeof window === 'undefined';
  const noUser = {};

  if (user == null && !isSSR) {
    onRedirectTo(routes.loginUrl, {
      refresh: true
    });
    return noUser;
  }

  return user || noUser;
};

exports.useAuthUser = useAuthUser;

const useAuthUserOrNull = () => {
  const {
    user
  } = (0, _FronteggStoreContext.useSelector)(({
    [_reduxStore.authStoreName]: {
      user
    }
  }) => ({
    user
  }), _reactRedux.shallowEqual);
  return user || null;
};
/**
 * hooks helpers
 */


exports.useAuthUserOrNull = useAuthUserOrNull;

const sliceReducerActionsBy = reducer => {
  const reducerKeys = Object.keys(reducer);
  const reducerActions = reducerKeys.map(key => ({
    [key]: _reduxStore.authActions[key]
  }));
  return reducerActions.reduce((p, n) => (0, _extends2.default)({}, p, n), {});
};

exports.sliceReducerActionsBy = sliceReducerActionsBy;

const stateHookGenerator = (stateMapper, subState) => {
  return (0, _FronteggStoreContext.useSelector)(state => {
    var _stateMapper;

    return (_stateMapper = stateMapper == null ? void 0 : stateMapper(state[_reduxStore.authStoreName][subState])) != null ? _stateMapper : state[_reduxStore.authStoreName][subState];
  }, _reactRedux.shallowEqual);
};

exports.stateHookGenerator = stateHookGenerator;

const reducerActionsGenerator = (actions, reducers) => {
  const dispatch = (0, _FronteggStoreContext.useDispatch)();
  return (0, _react.useMemo)(() => (0, _reduxStore.bindActionCreators)((0, _extends2.default)({}, actions, sliceReducerActionsBy(reducers)), dispatch), [dispatch]);
};

exports.reducerActionsGenerator = reducerActionsGenerator;
import { CaseReducerActions, SliceCaseReducers } from '@frontegg/redux-store';
import { AuthActions, AuthPageRoutes, AuthState, User } from '@frontegg/redux-store';
import { RedirectOptions } from '@frontegg/rest-api';
export declare type AuthMapper = {
    state: (state: AuthState) => any;
    actions: (actions: AuthActions) => any;
};
export declare type StateHookFunction<T> = (() => T) & (<S extends {}>(mapper: (state: T) => S) => S);
export declare type AuthStateMapper<S> = (state: AuthState) => S;
export declare function useAuth(): AuthState;
export declare function useAuth<S>(stateMapper: AuthStateMapper<S>): S;
/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const { isAuthenticated, user } = useAuth();
 *   const loginWithRedirect = useLoginWithRedirect();
 *
 *   if (!isAuthenticated) {
 *     loginWithRedirect();
 *     return <></>;
 *   }
 *
 *   return (<div>Hello User {user.name}</div>);
 * }
 * ```
 *
 * use this frontegg hook function to get if user is "Authenticated"
 */
export declare const useLoginWithRedirect: () => AuthActions['requestHostedLoginAuthorize'];
export declare const useAuthActions: () => AuthActions;
export declare const useOnRedirectTo: () => (path: string, opts?: RedirectOptions | undefined) => void;
export declare const useAuthRoutes: () => AuthPageRoutes;
/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const isAuthenticated  = useIsAuthenticated();
 *   return isAuthenticated ? <div>Hello User</div> : <Redirect to={'/login'}/>
 * }
 * ```
 *
 * use this frontegg hook function to get if user is "Authenticated"
 */
export declare const useIsAuthenticated: () => boolean;
/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const user = useAuthUser();
 *   return user ? <div>Hello {user.name}!</div> : <div>Hello Guest!</div>
 * }
 * ```
 *
 * use this frontegg hook function to get the authenticated user
 * the return user is null if not authenticated
 */
export declare const useAuthUser: () => User;
export declare const useAuthUserOrNull: () => User | null;
/**
 * hooks helpers
 */
export declare const sliceReducerActionsBy: <T extends SliceCaseReducers<any>>(reducer: T) => CaseReducerActions<T>;
export declare const stateHookGenerator: (stateMapper: any, subState: keyof AuthState) => any;
export declare const reducerActionsGenerator: (actions: any, reducers: SliceCaseReducers<any>) => any;

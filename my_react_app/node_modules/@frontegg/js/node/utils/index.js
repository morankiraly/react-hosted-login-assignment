"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  formatName: true,
  createElement: true,
  waitThemeSetter: true
};
exports.waitThemeSetter = exports.formatName = exports.createElement = void 0;

var _mockFlagsList = require("./mockFlagsList");

Object.keys(_mockFlagsList).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _mockFlagsList[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _mockFlagsList[key];
    }
  });
});

var formatName = function formatName(name) {
  return name.replace(/\W+/g, ' ').split(/ |\B(?=[A-Z])/).map(function (word) {
    return word.toLowerCase();
  }).join('');
};

exports.formatName = formatName;

var createElement = function createElement(container, type) {
  var attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var el = document.createElement(type);
  Object.keys(attrs).forEach(function (key) {
    return el.setAttribute(key, attrs[key]);
  });
  container.appendChild(el);
  return el;
};

exports.createElement = createElement;

var waitThemeSetter = function waitThemeSetter(instance) {
  return new Promise(function (resolve, reject) {
    var timeout = 4000;
    var interval = setInterval(function () {
      if (instance.themeSetter != null) {
        clearInterval(interval);
        resolve(true);
        return;
      }

      if (timeout < 0) {
        reject('Failed to load Renderer with themeSetter');
        clearInterval(interval);
        return;
      }

      timeout -= 50;
    }, 50);
  });
};

exports.waitThemeSetter = waitThemeSetter;
import { EnhancedStore } from '@frontegg/redux-store';
import { FronteggAppOptions, FronteggCheckoutDialogOptions, LocalizationsOverrides } from '@frontegg/types';
import * as FronteggRestApi from '@frontegg/rest-api';
declare type FronteggAppContainers = {
    adminPortalEl: HTMLElement;
    loginBoxEl: HTMLElement;
    checkoutDialogEl: HTMLElement;
    adminPortalContainer: HTMLElement;
    loginBoxContainer: HTMLElement;
    checkoutDialogContainer: HTMLElement;
};
export declare class FronteggApp {
    readonly name: string;
    readonly iframeRendering: boolean;
    options: FronteggAppOptions;
    loading: boolean;
    cdnUrl: string;
    customElementName: string;
    adminPortalEl?: HTMLElement;
    adminPortalRenderer?: any;
    loginBoxEl?: HTMLElement;
    checkoutDialogEl?: HTMLElement;
    checkoutDialogRenderer?: any;
    adminPortalContainer?: HTMLElement;
    loginBoxContainer?: HTMLElement;
    checkoutDialogContainer?: HTMLElement;
    loginBoxRenderer?: any;
    store: EnhancedStore;
    flags: FronteggRestApi.IFeatureFlagsAttributes;
    loadingListeners: (() => void)[];
    updateLocalizations?: (localizations: LocalizationsOverrides) => void;
    constructor(_options: FronteggAppOptions, name: string, iframeRendering?: boolean);
    loadAdminBoxMetadata: () => Promise<void>;
    requestAuthorize: () => Promise<void>;
    loadFeatureFlags: () => Promise<void>;
    initContainers(elements: FronteggAppContainers): Promise<void>;
    updateLocalizationsSetter: (localizationUpdateFn: (localizations: LocalizationsOverrides) => void) => void;
    updateMetadata(metadata: FronteggAppOptions['metadata']): void;
    addOnLoadedListener(listener: () => void): void;
    ready(listener: () => void): void;
    loginWithRedirect(): void;
    logout(): void;
    loadScript(component: string): Promise<unknown>;
    loadLoginBox(): Promise<void>;
    showAdminPortal(): Promise<void>;
    hideAdminPortal(): void;
    showCheckoutDialog(opts: FronteggCheckoutDialogOptions): Promise<void>;
    hideCheckoutDialog(): void;
    close(): void;
}
export {};

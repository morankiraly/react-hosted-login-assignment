import _extends from "@babel/runtime/helpers/esm/extends";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { createFronteggStore } from '@frontegg/redux-store';
import { Metadata } from '@frontegg/types';
import { formatName, mockFlagsList } from '../utils';
import { AppHolder } from '../AppHolder';
import { fetch as FronteggFetch } from '@frontegg/rest-api';
import * as FronteggRestApi from '@frontegg/rest-api';
import * as FronteggTypes from '@frontegg/types';
import versions from '../version';
export var FronteggApp = /*#__PURE__*/function () {
  function FronteggApp(_options, name) {
    var _this = this,
        _this$options$authOpt,
        _this$options$store,
        _this$options$authOpt2,
        _this$options$auditsO;

    var iframeRendering = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    _classCallCheck(this, FronteggApp);

    this.name = void 0;
    this.iframeRendering = void 0;
    this.options = void 0;
    this.loading = true;
    this.cdnUrl = "https://assets.frontegg.com/admin-box/".concat(versions.cdnVersion);
    this.customElementName = '';
    this.adminPortalEl = void 0;
    this.adminPortalRenderer = void 0;
    this.loginBoxEl = void 0;
    this.checkoutDialogEl = void 0;
    this.checkoutDialogRenderer = void 0;
    this.adminPortalContainer = void 0;
    this.loginBoxContainer = void 0;
    this.checkoutDialogContainer = void 0;
    this.loginBoxRenderer = void 0;
    this.store = void 0;
    this.flags = {};
    this.loadingListeners = [];
    this.updateLocalizations = void 0;
    this.loadAdminBoxMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var Get, _data$rows$0$configur, _data$rows, _data$rows$, data;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              Get = FronteggFetch.Get;

              if (_this.options.metadata) {
                _context.next = 12;
                break;
              }

              _context.prev = 2;
              _context.next = 5;
              return Get("/metadata", {
                entityName: 'adminBox'
              });

            case 5:
              data = _context.sent;
              _this.options.metadata = (_data$rows$0$configur = data == null ? void 0 : (_data$rows = data.rows) == null ? void 0 : (_data$rows$ = _data$rows[0]) == null ? void 0 : _data$rows$.configuration) != null ? _data$rows$0$configur : {};
              _context.next = 12;
              break;

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](2);
              console.error('failed to get admin portal metadata', _context.t0);

            case 12:
              Metadata.set(_this.options.metadata, _this.name);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[2, 9]]);
    }));
    this.requestAuthorize = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!_this.options.hostedLoginBox && !_this.options.builderMode && _this.options.framework !== 'nextjs') {
                _this.store.dispatch({
                  type: 'auth/requestAuthorize',
                  payload: true
                });
              }

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    this.loadFeatureFlags = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(_this.options.previewMode || _this.options.builderMode)) {
                _context3.next = 4;
                break;
              }

              _this.flags = mockFlagsList;
              _context3.next = 13;
              break;

            case 4:
              _context3.prev = 4;
              _context3.next = 7;
              return FronteggRestApi.loadFeatureFlags();

            case 7:
              _this.flags = _context3.sent;
              _context3.next = 13;
              break;

            case 10:
              _context3.prev = 10;
              _context3.t0 = _context3["catch"](4);
              console.error('failed to get admin portal feature flags', _context3.t0);

            case 13:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[4, 10]]);
    }));

    this.updateLocalizationsSetter = function (localizationUpdateFn) {
      _this.updateLocalizations = localizationUpdateFn;
    };

    var appName = formatName(name);
    var customElementName = "frontegg-app-".concat(appName);
    this.iframeRendering = iframeRendering;
    this.name = appName;
    this.options = _extends({}, _options, {
      contextOptions: _extends({
        requestCredentials: 'include'
      }, _options.contextOptions)
    });

    if (this.options.cdnUrl) {
      this.cdnUrl = this.options.cdnUrl;
    }

    this.customElementName = customElementName;
    var authOptions = this.options.authOptions ? _extends({}, this.options.authOptions, {
      hostedLoginBox: this.options.hostedLoginBox
    }) : {
      hostedLoginBox: this.options.hostedLoginBox
    };
    authOptions.disableSilentRefresh = (_this$options$authOpt = this.options.authOptions) == null ? void 0 : _this$options$authOpt.disableSilentRefresh;
    this.store = (_this$options$store = this.options.store) != null ? _this$options$store : createFronteggStore({
      context: this.options.contextOptions
    }, this, this.options.previewMode, authOptions, {
      auth: (_this$options$authOpt2 = this.options.authOptions) != null ? _this$options$authOpt2 : {},
      audits: (_this$options$auditsO = this.options.auditsOptions) != null ? _this$options$auditsO : {}
    }, false, this.options.urlStrategy);
    AppHolder.setInstance(appName, this);
  }

  _createClass(FronteggApp, [{
    key: "initContainers",
    value: function () {
      var _initContainers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(elements) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.adminPortalEl = elements.adminPortalEl;
                this.loginBoxEl = elements.loginBoxEl;
                this.checkoutDialogEl = elements.checkoutDialogEl;
                this.adminPortalContainer = elements.adminPortalContainer;
                this.loginBoxContainer = elements.loginBoxContainer;
                this.checkoutDialogContainer = elements.checkoutDialogContainer;

                try {
                  if (this.options.framework !== 'nextjs') {
                    document.body.classList.add('frontegg-loading');
                  }
                } catch (e) {}

                _context4.next = 9;
                return Promise.all([this.loadAdminBoxMetadata(), this.requestAuthorize(), this.loadFeatureFlags()]);

              case 9:
                if (!this.options.previewMode && !this.options.customLoginBox) {
                  this.loadLoginBox();
                }

                this.loadScript('FronteggAdminPortal');

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function initContainers(_x) {
        return _initContainers.apply(this, arguments);
      }

      return initContainers;
    }()
  }, {
    key: "updateMetadata",
    value: function updateMetadata(metadata) {
      Metadata.set(metadata, this.name);

      if (metadata != null && metadata.localizations) {
        var _this$updateLocalizat;

        (_this$updateLocalizat = this.updateLocalizations) == null ? void 0 : _this$updateLocalizat.call(this, metadata.localizations);
      }
    }
  }, {
    key: "addOnLoadedListener",
    value: function addOnLoadedListener(listener) {
      if (!this.loading) {
        listener();
        return;
      }

      this.loadingListeners.push(listener);
    }
  }, {
    key: "ready",
    value: function ready(listener) {
      if (this.loading) {
        listener();
      } else {
        this.addOnLoadedListener(listener);
      }
    }
  }, {
    key: "loginWithRedirect",
    value: function loginWithRedirect() {
      this.store.dispatch({
        type: 'auth/setState',
        payload: {
          isLoading: true
        }
      });
      this.store.dispatch({
        type: 'auth/requestHostedLoginAuthorize'
      });
    }
  }, {
    key: "logout",
    value: function logout() {
      this.store.dispatch({
        type: 'auth/setState',
        payload: {
          isLoading: true
        }
      });
      this.store.dispatch({
        type: 'auth/logout'
      });
    }
  }, {
    key: "loadScript",
    value: function loadScript(component) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        // TODO: prevent this behavior if development
        if (window[component]) {
          resolve(window[component]);
          return;
        }
        


        var entries = {
          FronteggLoginBox: 'login-box/index.js',
          FronteggAdminPortal: 'admin-portal/index.js'
        };
        var script = document.createElement('script');
        script.src = "".concat(_this2.cdnUrl, "/").concat(entries[component]);
        script.setAttribute('id', "".concat(component, "Script"));
        script.setAttribute('cdn-url', _this2.cdnUrl);

        script.onload = function () {
          if (window["".concat(component, "Init")]) {
            resolve(window["".concat(component, "Init")]({
              FronteggRestApi: FronteggRestApi,
              FronteggTypes: FronteggTypes
            }));
          } else {
            resolve(window[component]);
          }
        };

        script.onerror = function (e) {
          console.log('Profile page error', e);
          reject(e);
        };

        document.body.append(script);
      });
    }
  }, {
    key: "loadLoginBox",
    value: function () {
      var _loadLoginBox = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var FronteggLoginBox;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.loadScript('FronteggLoginBox');

              case 2:
                FronteggLoginBox = _context5.sent;
                FronteggLoginBox.render(this.loginBoxEl, {
                  injector: this,
                  options: this.options
                });
                this.loading = false;
                this.loadingListeners.forEach(function (listener) {
                  try {
                    listener();
                  } catch (e) {}
                });
                this.loadingListeners = [];

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function loadLoginBox() {
        return _loadLoginBox.apply(this, arguments);
      }

      return loadLoginBox;
    }()
  }, {
    key: "showAdminPortal",
    value: function () {
      var _showAdminPortal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var FronteggAdminPortal;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.loadScript('FronteggAdminPortal');

              case 2:
                FronteggAdminPortal = _context6.sent;
                this.adminPortalRenderer = FronteggAdminPortal.render(this.adminPortalEl, {
                  injector: this,
                  options: this.options
                });

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function showAdminPortal() {
        return _showAdminPortal.apply(this, arguments);
      }

      return showAdminPortal;
    }()
  }, {
    key: "hideAdminPortal",
    value: function hideAdminPortal() {
      try {
        var _this$adminPortalRend;

        (_this$adminPortalRend = this.adminPortalRenderer) == null ? void 0 : _this$adminPortalRend.unmount();
      } catch (e) {
        console.error('Failed to unmount admin portal', e);
      }
    }
  }, {
    key: "showCheckoutDialog",
    value: function () {
      var _showCheckoutDialog = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(opts) {
        var FronteggAdminPortal;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.loadScript('FronteggAdminPortal');

              case 2:
                FronteggAdminPortal = _context7.sent;
                this.checkoutDialogRenderer = FronteggAdminPortal.renderCheckoutDialog(this.checkoutDialogEl, _extends({
                  injector: this
                }, opts, {
                  options: this.options
                }));

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function showCheckoutDialog(_x2) {
        return _showCheckoutDialog.apply(this, arguments);
      }

      return showCheckoutDialog;
    }()
  }, {
    key: "hideCheckoutDialog",
    value: function hideCheckoutDialog() {
      try {
        var _this$checkoutDialogR;

        (_this$checkoutDialogR = this.checkoutDialogRenderer) == null ? void 0 : _this$checkoutDialogR.unmount();
      } catch (e) {
        console.error('Failed to unmount checkout dialog', e);
      }
    }
  }, {
    key: "close",
    value: function close() {
      this.hideAdminPortal();
      this.hideCheckoutDialog();
    }
  }]);

  return FronteggApp;
}();
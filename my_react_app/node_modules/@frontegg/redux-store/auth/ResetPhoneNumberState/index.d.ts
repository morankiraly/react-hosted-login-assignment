import { ChangePhoneNumberPayload, ResetPhoneNumberState } from './interfaces';
import { WithCallback } from '../../interfaces';
import { IResetPhoneNumber, IVerifyResetPhoneNumber } from '@frontegg/rest-api';
declare const resetPhoneNumberState: ResetPhoneNumberState;
declare const reducers: {
    setResetPhoneNumberState: {
        prepare: (payload: Partial<ResetPhoneNumberState>) => {
            payload: Partial<ResetPhoneNumberState>;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: Partial<ResetPhoneNumberState>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            userIp?: string | undefined;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            user?: import("..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            loginState: import("..").LoginState;
            activateState: import("..").ActivateAccountState;
            acceptInvitationState: import("..").AcceptInvitationState;
            forgotPasswordState: import("..").ForgotPasswordState;
            resetPhoneNumberState: ResetPhoneNumberState;
            ssoState: import("..").SSOState;
            profileState: import("..").ProfileState;
            mfaState: import("..").MFAState;
            teamState: import("..").TeamState;
            socialLoginState: import("..").SocialLoginState;
            signUpState: import("..").SignUpState;
            apiTokensState: import("..").ApiTokensState;
            securityPolicyState: import("..").SecurityPolicyState;
            restrictionsState: import("..").RestrictionsState;
            provisioningState: import("..").ProvisioningState;
            accountSettingsState: import("..").AccountSettingsState;
            tenantsState: import("..").TenantsState;
            rolesState: import("..").RolesState;
            sessionsState: import("..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            disableSilentRefresh?: boolean | undefined;
            sessionsPolicyState: import("..").SessionsPolicyState;
            impersonateState?: import("..").ImpersonateState | undefined;
            routes: import("..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
    resetResetPhoneNumberState: (state: import("..").AuthState) => {
        onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
        error?: any;
        isAuthenticated: boolean;
        userIp?: string | undefined;
        isLoading: boolean;
        keepSessionAlive?: boolean | undefined;
        user?: import("..").User | null | undefined;
        isSSOAuth: boolean;
        ssoACS?: string | undefined;
        loginState: import("..").LoginState;
        activateState: import("..").ActivateAccountState;
        acceptInvitationState: import("..").AcceptInvitationState;
        forgotPasswordState: import("..").ForgotPasswordState;
        resetPhoneNumberState: ResetPhoneNumberState;
        ssoState: import("..").SSOState;
        profileState: import("..").ProfileState;
        mfaState: import("..").MFAState;
        teamState: import("..").TeamState;
        socialLoginState: import("..").SocialLoginState;
        signUpState: import("..").SignUpState;
        apiTokensState: import("..").ApiTokensState;
        securityPolicyState: import("..").SecurityPolicyState;
        restrictionsState: import("..").RestrictionsState;
        provisioningState: import("..").ProvisioningState;
        accountSettingsState: import("..").AccountSettingsState;
        tenantsState: import("..").TenantsState;
        rolesState: import("..").RolesState;
        sessionsState: import("..").SessionsState;
        hostedLoginBox?: boolean | undefined;
        disableSilentRefresh?: boolean | undefined;
        sessionsPolicyState: import("..").SessionsPolicyState;
        impersonateState?: import("..").ImpersonateState | undefined;
        routes: import("..").AuthPageRoutes;
        header?: any;
        loaderComponent?: any;
    };
};
declare const actions: {
    resetPhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IResetPhoneNumber, boolean>], WithCallback<IResetPhoneNumber, boolean>, string, never, never>;
    verifyResetPhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IVerifyResetPhoneNumber, boolean>], WithCallback<IVerifyResetPhoneNumber, boolean>, string, never, never>;
    changePhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<import("@frontegg/rest-api").IChangePhoneNumber & {
        recaptchaToken: string;
        email: string;
    }, boolean>], WithCallback<import("@frontegg/rest-api").IChangePhoneNumber & {
        recaptchaToken: string;
        email: string;
    }, boolean>, string, never, never>;
};
/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
declare type DispatchedActions = {
    setResetPhoneNumberState: (state: Partial<ResetPhoneNumberState>) => void;
    resetResetPhoneNumberState: () => void;
    resetPhoneNumber: (payload: WithCallback<IResetPhoneNumber>) => void;
    verifyResetPhoneNumber: (payload: WithCallback<IVerifyResetPhoneNumber>) => void;
    changePhoneNumber: (payload: ChangePhoneNumberPayload) => void;
};
export declare type ResetPhoneNumberActions = DispatchedActions;
export { resetPhoneNumberState, reducers as resetPhoneNumberReducers, actions as resetPhoneNumberActions };

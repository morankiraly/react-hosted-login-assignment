import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["authorizationUrl"],
      _excluded2 = ["events", "url"];
import { api, fetch } from '@frontegg/rest-api';
import { call, put, select, takeLatest, takeLeading } from 'redux-saga/effects';
import { refreshToken } from '../LoginState/saga';
import { actions } from '../reducer';
import { AuthenticationTypes } from '../../index';
import { UserVeirifedOriginTypes } from '../interfaces';
export function* loadSocialLoginsConfigurations() {
  try {
    yield put(actions.setSocialLoginsState({
      loading: true
    }));
    const socialLoginsConfig = yield call(api.auth.getSocialLoginProviders);
    yield put(actions.setSocialLoginsState({
      socialLoginsConfig,
      loading: false,
      firstLoad: false
    }));
  } catch (e) {
    yield put(actions.setSocialLoginsState({
      error: e.message,
      loading: false,
      firstLoad: false
    }));
  }
}
export function* loadSocialLoginsConfigurationsV2() {
  try {
    const context = yield select(state => state.root.context);
    yield put(actions.setSocialLoginsState({
      loading: true
    }));
    const socialLoginsConfigV2 = yield call(api.auth.getSocialLoginProvidersV2);
    const socialLoginsConfigWithFullUrl = socialLoginsConfigV2.map(_ref => {
      let {
        authorizationUrl
      } = _ref,
          config = _objectWithoutPropertiesLoose(_ref, _excluded);

      const baseUrl = fetch.getBaseUrl(context, authorizationUrl != null ? authorizationUrl : '');
      return _extends({}, config, {
        authorizationUrl: authorizationUrl ? `${baseUrl}${authorizationUrl}` : null
      });
    });
    yield put(actions.setSocialLoginsState({
      socialLoginsConfigV2: socialLoginsConfigWithFullUrl,
      loading: false,
      firstLoad: false
    }));
  } catch (e) {
    yield put(actions.setSocialLoginsState({
      error: e.message,
      loading: false,
      firstLoad: false
    }));
  }
}

function* loginViaSocialLogin(_ref2) {
  let {
    payload: {
      events,
      url
    }
  } = _ref2,
      payload = _objectWithoutPropertiesLoose(_ref2.payload, _excluded2);

  try {
    yield put(actions.setSocialLoginsState({
      loading: true
    }));
    const {
      email,
      isNewUser,
      userId,
      tenantId,
      name
    } = yield call(api.auth.loginViaSocialLogin, payload);

    if (isNewUser) {
      var _events$signUpComplet, _events$userVerified;

      events == null ? void 0 : (_events$signUpComplet = events.signUpComplete) == null ? void 0 : _events$signUpComplet.call(events, {
        email,
        url,
        authenticationType: AuthenticationTypes.SOCIAL_LOGIN,
        createdAt: new Date(),
        id: userId,
        socialProvider: payload.provider,
        tenantId
      });
      events == null ? void 0 : (_events$userVerified = events.userVerified) == null ? void 0 : _events$userVerified.call(events, {
        email,
        origin: UserVeirifedOriginTypes.SOCIAL_LOGIN,
        createdAt: new Date(),
        id: userId,
        url,
        tenantId,
        name
      });
    }

    if (userId) {
      localStorage.setItem('userId', userId);
    }

    yield put(actions.setLoginState({
      email,
      isNewUser
    }));
    yield refreshToken();
    localStorage.removeItem('register-quick-login');
    yield put(actions.setSocialLoginsState({
      loading: false
    }));
  } catch (e) {
    var _e$message;

    yield put(actions.setSocialLoginsState({
      loading: false,
      error: (_e$message = e.message) != null ? _e$message : 'Failed to authenticate',
      firstLoad: false
    }));
  }
}

function* setSocialLoginError({
  payload
}) {
  yield put(actions.setSocialLoginsState({
    error: payload.error,
    loading: false,
    firstLoad: false
  }));
}

export function* socialLoginsSaga() {
  yield takeLeading(actions.loadSocialLoginsConfiguration, loadSocialLoginsConfigurations);
  yield takeLeading(actions.loadSocialLoginsConfigurationV2, loadSocialLoginsConfigurationsV2);
  yield takeLeading(actions.loginViaSocialLogin, loginViaSocialLogin);
  yield takeLatest(actions.setSocialLoginError, setSocialLoginError);
}
import { ITeamUserRole, ITeamUser, QuerySort, QueryFilter, ITeamUserPermission, ISubTenantUser } from '@frontegg/rest-api';
import { LoaderIndicatorState, WithCallback } from '../../interfaces';
export declare enum TeamStateKeys {
    USERS = "USERS",
    STATS = "STATS",
    UPDATE_USER = "UPDATE_USER",
    DELETE_USER = "DELETE_USER",
    RESEND_ACTIVATE_LINK = "RESEND_ACTIVATE_LINK",
    RESEND_INVITATION_LINK = "RESEND_INVITATION_LINK",
    ROLES_AND_PERMISSIONS = "ROLES_AND_PERMISSIONS",
    CREATE_TOKEN_LINK = "CREATE_TOKEN_LINK",
    GET_TOKEN_LINK = "GET_TOKEN_LINK",
    UPDATE_TOKEN_LINK = "UPDATE_TOKEN_LINK",
    DELETE_TOKEN_LINK = "DELETE_TOKEN_LINK",
    CONFIG_TOKEN_LINK = "CONFIG_TOKEN_LINK"
}
export declare type TeamStateIndicator = {
    key: TeamStateKeys;
    value: string | boolean;
};
declare type BaseDialogState = {
    open?: boolean;
    onClose?: (data?: any) => void;
};
export declare type AddUserDialogState = BaseDialogState & {
    loading?: boolean;
    error?: boolean;
};
export declare type ISetAddUserDialog = Omit<AddUserDialogState, 'loading' | 'error' | 'open'>;
export declare type DeleteUserDialogState = BaseDialogState & {
    loading?: boolean;
    error?: boolean;
    userId?: string;
    email?: string;
};
export declare type ISetDeleteUserDialog = Omit<DeleteUserDialogState, 'loading' | 'error' | 'open'>;
export declare type LoadRolesAndPermissionsPayload = WithCallback<{}, {
    roles: ITeamUserRole[];
    permissions: ITeamUserPermission[];
}>;
export interface TeamState {
    loaders: LoaderIndicatorState<TeamStateKeys>;
    errors: LoaderIndicatorState<TeamStateKeys>;
    users: ITeamUser[];
    allUsers: ISubTenantUser[];
    allUsersQueryParams: {
        _offset: number;
        _limit: number;
        _filter: string | null;
        _sortBy: string;
        _order: 'ASC' | 'DESC';
    };
    pageOffset: number;
    pageSize: number;
    totalPages: number;
    roles: ITeamUserRole[];
    permissions: ITeamUserPermission[];
    filter: QueryFilter[];
    sort: QuerySort[];
    totalItems?: number;
    addedThisWeek?: number;
    addUserDialogState: AddUserDialogState;
    deleteUserDialogState: DeleteUserDialogState;
    lockUserDialogState: DeleteUserDialogState;
    inviteTokenState?: InviteTokenState;
}
export interface InviteTokenState {
    id?: string;
    vendorId?: string;
    tenantId?: string;
    userId?: string;
    token?: string;
    expires?: Date;
    shouldSendEmail?: boolean;
    tenantInvitationsAllowed?: boolean;
    emailsEnabled?: boolean;
}
export interface IAddUsers {
    emails: string[];
    roleIds: string[];
}
export interface BulkInvintationData {
    unallowedEmails: string[];
    allowedEmails: string[];
}
export {};

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forgotPasswordSagas = forgotPasswordSagas;
exports.loadPasswordConfig = loadPasswordConfig;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _effects = require("redux-saga/effects");

var _restApi = require("@frontegg/rest-api");

var _reducer = require("../reducer");

var _interfaces = require("./interfaces");

const _excluded = ["callback"];

function* forgotPassword({
  payload
}) {
  yield (0, _effects.put)(_reducer.actions.setForgotPasswordState({
    loading: true
  }));

  try {
    yield (0, _effects.call)(_restApi.api.auth.forgotPassword, payload);
    yield (0, _effects.put)(_reducer.actions.setForgotPasswordState({
      loading: false,
      error: undefined,
      step: _interfaces.ForgotPasswordStep.success
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setForgotPasswordState({
      loading: false,
      error: e.message || 'Unknown error occurred'
    }));
  }
}

function* resetPassword(_ref) {
  let {
    payload: {
      callback
    }
  } = _ref,
      body = (0, _objectWithoutPropertiesLoose2.default)(_ref.payload, _excluded);
  yield (0, _effects.put)(_reducer.actions.setForgotPasswordState({
    loading: true
  }));

  try {
    yield (0, _effects.call)(_restApi.api.auth.resetPassword, body);
    yield (0, _effects.put)(_reducer.actions.setForgotPasswordState({
      loading: false,
      error: undefined,
      step: _interfaces.ForgotPasswordStep.success
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setForgotPasswordState({
      loading: false,
      error: e.message
    }));
    callback == null ? void 0 : callback(false);
  }
}

function* loadPasswordConfig({
  payload
}) {
  yield (0, _effects.put)(_reducer.actions.setForgotPasswordState({
    loading: true
  }));

  try {
    const passwordConfig = yield (0, _effects.call)(_restApi.api.auth.loadPasswordConfig, payload);
    yield (0, _effects.put)(_reducer.actions.setForgotPasswordState({
      loading: false,
      passwordConfig
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setForgotPasswordState({
      loading: false,
      error: e.message
    }));
  }
}

function* forgotPasswordSagas() {
  yield (0, _effects.takeLeading)(_reducer.actions.forgotPassword, forgotPassword);
  yield (0, _effects.takeLeading)(_reducer.actions.resetPassword, resetPassword);
  yield (0, _effects.takeLeading)(_reducer.actions.loadPasswordConfig, loadPasswordConfig);
}
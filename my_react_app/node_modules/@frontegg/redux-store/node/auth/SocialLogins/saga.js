"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadSocialLoginsConfigurations = loadSocialLoginsConfigurations;
exports.loadSocialLoginsConfigurationsV2 = loadSocialLoginsConfigurationsV2;
exports.socialLoginsSaga = socialLoginsSaga;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _restApi = require("@frontegg/rest-api");

var _effects = require("redux-saga/effects");

var _saga = require("../LoginState/saga");

var _reducer = require("../reducer");

var _index = require("../../index");

var _interfaces = require("../interfaces");

const _excluded = ["authorizationUrl"],
      _excluded2 = ["events", "url"];

function* loadSocialLoginsConfigurations() {
  try {
    yield (0, _effects.put)(_reducer.actions.setSocialLoginsState({
      loading: true
    }));
    const socialLoginsConfig = yield (0, _effects.call)(_restApi.api.auth.getSocialLoginProviders);
    yield (0, _effects.put)(_reducer.actions.setSocialLoginsState({
      socialLoginsConfig,
      loading: false,
      firstLoad: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSocialLoginsState({
      error: e.message,
      loading: false,
      firstLoad: false
    }));
  }
}

function* loadSocialLoginsConfigurationsV2() {
  try {
    const context = yield (0, _effects.select)(state => state.root.context);
    yield (0, _effects.put)(_reducer.actions.setSocialLoginsState({
      loading: true
    }));
    const socialLoginsConfigV2 = yield (0, _effects.call)(_restApi.api.auth.getSocialLoginProvidersV2);
    const socialLoginsConfigWithFullUrl = socialLoginsConfigV2.map(_ref => {
      let {
        authorizationUrl
      } = _ref,
          config = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);

      const baseUrl = _restApi.fetch.getBaseUrl(context, authorizationUrl != null ? authorizationUrl : '');

      return (0, _extends2.default)({}, config, {
        authorizationUrl: authorizationUrl ? `${baseUrl}${authorizationUrl}` : null
      });
    });
    yield (0, _effects.put)(_reducer.actions.setSocialLoginsState({
      socialLoginsConfigV2: socialLoginsConfigWithFullUrl,
      loading: false,
      firstLoad: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSocialLoginsState({
      error: e.message,
      loading: false,
      firstLoad: false
    }));
  }
}

function* loginViaSocialLogin(_ref2) {
  let {
    payload: {
      events,
      url
    }
  } = _ref2,
      payload = (0, _objectWithoutPropertiesLoose2.default)(_ref2.payload, _excluded2);

  try {
    yield (0, _effects.put)(_reducer.actions.setSocialLoginsState({
      loading: true
    }));
    const {
      email,
      isNewUser,
      userId,
      tenantId,
      name
    } = yield (0, _effects.call)(_restApi.api.auth.loginViaSocialLogin, payload);

    if (isNewUser) {
      var _events$signUpComplet, _events$userVerified;

      events == null ? void 0 : (_events$signUpComplet = events.signUpComplete) == null ? void 0 : _events$signUpComplet.call(events, {
        email,
        url,
        authenticationType: _index.AuthenticationTypes.SOCIAL_LOGIN,
        createdAt: new Date(),
        id: userId,
        socialProvider: payload.provider,
        tenantId
      });
      events == null ? void 0 : (_events$userVerified = events.userVerified) == null ? void 0 : _events$userVerified.call(events, {
        email,
        origin: _interfaces.UserVeirifedOriginTypes.SOCIAL_LOGIN,
        createdAt: new Date(),
        id: userId,
        url,
        tenantId,
        name
      });
    }

    if (userId) {
      localStorage.setItem('userId', userId);
    }

    yield (0, _effects.put)(_reducer.actions.setLoginState({
      email,
      isNewUser
    }));
    yield (0, _saga.refreshToken)();
    localStorage.removeItem('register-quick-login');
    yield (0, _effects.put)(_reducer.actions.setSocialLoginsState({
      loading: false
    }));
  } catch (e) {
    var _e$message;

    yield (0, _effects.put)(_reducer.actions.setSocialLoginsState({
      loading: false,
      error: (_e$message = e.message) != null ? _e$message : 'Failed to authenticate',
      firstLoad: false
    }));
  }
}

function* setSocialLoginError({
  payload
}) {
  yield (0, _effects.put)(_reducer.actions.setSocialLoginsState({
    error: payload.error,
    loading: false,
    firstLoad: false
  }));
}

function* socialLoginsSaga() {
  yield (0, _effects.takeLeading)(_reducer.actions.loadSocialLoginsConfiguration, loadSocialLoginsConfigurations);
  yield (0, _effects.takeLeading)(_reducer.actions.loadSocialLoginsConfigurationV2, loadSocialLoginsConfigurationsV2);
  yield (0, _effects.takeLeading)(_reducer.actions.loginViaSocialLogin, loginViaSocialLogin);
  yield (0, _effects.takeLatest)(_reducer.actions.setSocialLoginError, setSocialLoginError);
}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadAllowSignUps = loadAllowSignUps;
exports.resetSignUpStateSoft = resetSignUpStateSoft;
exports.signUpSaga = signUpSaga;
exports.signUpUser = signUpUser;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _effects = require("redux-saga/effects");

var _restApi = require("@frontegg/rest-api");

var _reducer = require("../reducer");

var _interfaces = require("./interfaces");

var _interfaces2 = require("../interfaces");

var _saga = require("../LoginState/saga");

const _excluded = ["events", "url"];

function* loadAllowSignUps() {
  yield (0, _effects.put)(_reducer.actions.setSignUpState({
    loading: true
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.getVendorConfig);
    const {
      allowSignups: allowSignUps,
      allowNotVerifiedUsersLogin
    } = policy;
    yield (0, _effects.put)(_reducer.actions.setSignUpState({
      loading: false,
      allowSignUps,
      allowNotVerifiedUsersLogin,
      firstLoad: false
    }));
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPublicState({
      policy,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSignUpState({
      loading: false,
      error: e.message,
      firstLoad: false
    }));
  }
}

function* signUpUser(_ref) {
  let {
    payload: {
      events,
      url
    }
  } = _ref,
      payload = (0, _objectWithoutPropertiesLoose2.default)(_ref.payload, _excluded);
  yield (0, _effects.put)(_reducer.actions.setSignUpState({
    loading: true
  }));

  try {
    const {
      routes,
      onRedirectTo
    } = yield (0, _effects.select)(state => state.auth);
    const {
      shouldActivate,
      user,
      tenantId,
      userId
    } = yield (0, _effects.call)(_restApi.api.auth.signUpUser, payload);

    if (!payload.invitationToken) {
      var _events$signUpComplet;

      const {
        email,
        name,
        companyName
      } = payload;
      events == null ? void 0 : (_events$signUpComplet = events.signUpComplete) == null ? void 0 : _events$signUpComplet.call(events, {
        email,
        name,
        companyName,
        url,
        authenticationType: _interfaces2.AuthenticationTypes.PASSWORD,
        id: userId,
        tenantId,
        createdAt: new Date()
      });
    }

    _restApi.ContextHolder.setAccessToken(user == null ? void 0 : user.accessToken);

    _restApi.ContextHolder.setUser(user);

    if (!shouldActivate && user && (0, _saga.isMfaRequired)(user)) {
      const mfaRequiredState = yield (0, _saga.getMfaRequiredState)(user);
      yield (0, _effects.put)(_reducer.actions.setState(mfaRequiredState));
      onRedirectTo(routes.loginUrl);
    } else {
      yield (0, _effects.put)(_reducer.actions.setSignUpState({
        loading: false,
        shouldActivate,
        stage: _interfaces.SignUpStage.SignUpSuccess
      }));
      yield (0, _effects.put)(_reducer.actions.setState({
        user,
        isAuthenticated: !!(user != null && user.accessToken)
      }));

      if (!shouldActivate) {
        yield (0, _effects.put)(_reducer.actions.loadTenants());
      }
    }
  } catch (e) {
    _restApi.ContextHolder.setAccessToken(null);

    _restApi.ContextHolder.setUser(null);

    yield (0, _effects.put)(_reducer.actions.setSignUpState({
      loading: false,
      error: e.message
    }));
  }

  yield (0, _effects.put)(_reducer.actions.setSignUpState({
    loading: false
  }));
}

function* resetSignUpStateSoft() {
  const {
    allowSignUps,
    allowNotVerifiedUsersLogin
  } = yield (0, _effects.select)(state => state.auth.signUpState);
  yield (0, _effects.put)(_reducer.actions.resetSignUpState());
  yield (0, _effects.put)(_reducer.actions.setSignUpState({
    allowSignUps,
    allowNotVerifiedUsersLogin
  }));
}

function* signUpSaga() {
  yield (0, _effects.takeLeading)(_reducer.actions.signUpUser, signUpUser);
  yield (0, _effects.takeLeading)(_reducer.actions.resetSignUpStateSoft, resetSignUpStateSoft);
}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadPublicAuthStrategiesPolicy = loadPublicAuthStrategiesPolicy;
exports.loadPublicSecurityPolicy = loadPublicSecurityPolicy;
exports.loadPublicSecurityPolicyMock = loadPublicSecurityPolicyMock;
exports.securityPolicySagas = securityPolicySagas;
exports.securityPolicySagasMock = securityPolicySagasMock;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _effects = require("redux-saga/effects");

var _restApi = require("@frontegg/rest-api");

var _reducer = require("../reducer");

var _utils = require("../utils");

var _dummy = require("../dummy");

const _excluded = ["callback"],
      _excluded2 = ["callback"],
      _excluded3 = ["callback"],
      _excluded4 = ["callback"],
      _excluded5 = ["callback"],
      _excluded6 = ["callback"];

function* loadSecurityPolicy() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyGlobalState({
    loading: true,
    error: null
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.getGlobalSecurityPolicy);
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyGlobalState({
      policy,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyGlobalState({
      error: e.message,
      loading: false
    }));
  }

  yield (0, _effects.put)(_reducer.actions.loadSecurityPolicyMfa());
  yield (0, _effects.put)(_reducer.actions.loadSecurityPolicyVendorMfa());
  yield (0, _effects.put)(_reducer.actions.loadSecurityPolicyLockout());
  yield (0, _effects.put)(_reducer.actions.loadSecurityPolicyVendorLockout());
  yield (0, _effects.put)(_reducer.actions.loadSecurityPolicyVendorPasswordHistory());
  yield (0, _effects.put)(_reducer.actions.loadSecurityPolicyCaptcha());
  yield (0, _effects.put)(_reducer.actions.loadPublicAuthStrategiesPolicy());
}

function* loadPublicSecurityPolicy() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPublicState({
    loading: true,
    error: null
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.getVendorConfig);
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPublicState({
      policy,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPublicState({
      error: e.message,
      loading: false
    }));
  }
}

function* loadPublicAuthStrategiesPolicy() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyAuthStrategyPublicState({
    loading: true,
    error: null
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.getVendorPublicAuthStrategiesConfig);
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyAuthStrategyPublicState({
      policy,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyAuthStrategyPublicState({
      error: e.message,
      loading: false
    }));
  }
}

function* loadSecurityPolicyMfa() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyMfaState({
    loading: true,
    error: null
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.getMfaPolicy);
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyMfaState({
      policy,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyMfaState({
      error: e.message,
      loading: false
    }));
  }
}

function* loadSecurityPolicyVendorMfa() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyMfaState({
    loading: true,
    error: null
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.getVendorMfaPolicy);
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyVendorMfaState({
      policy,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyVendorMfaState({
      error: e.message,
      loading: false
    }));
  }
}

function* saveSecurityPolicyMfa(_ref) {
  let {
    payload: {
      callback
    }
  } = _ref,
      newSecurityPolicy = (0, _objectWithoutPropertiesLoose2.default)(_ref.payload, _excluded);
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyMfaState({
    saving: true,
    error: null
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.saveMfaPolicy, newSecurityPolicy);
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyMfaState({
      policy,
      saving: false
    }));
    callback == null ? void 0 : callback(policy);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyMfaState({
      saving: false,
      error: e.message
    }));
    callback == null ? void 0 : callback(null, e);
  }
}

function* loadSecurityPolicyLockout() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyLockoutState({
    loading: true,
    error: null
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.getLockoutPolicy);
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyLockoutState({
      policy,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyLockoutState({
      error: e.message,
      loading: false
    }));
  }
}

function* saveSecurityPolicyLockout(_ref2) {
  let {
    payload: {
      callback
    }
  } = _ref2,
      newSecurityPolicy = (0, _objectWithoutPropertiesLoose2.default)(_ref2.payload, _excluded2);
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyLockoutState({
    saving: true,
    error: null
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.saveLockoutPolicy, newSecurityPolicy);
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyLockoutState({
      policy,
      saving: false
    }));
    callback == null ? void 0 : callback(policy);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyLockoutState({
      saving: false,
      error: e.message
    }));
    callback == null ? void 0 : callback(null, e);
  }
}

function* loadSecurityPolicyVendorLockout() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyVendorLockoutState({
    loading: true,
    error: null
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.getVendorLockoutPolicy);
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyVendorLockoutState({
      policy,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyVendorLockoutState({
      error: e.message,
      loading: false
    }));
  }
}

function* loadSecurityPolicyCaptcha() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyLockoutState({
    loading: true,
    error: null
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.getCaptchaPolicy);
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyCaptchaState({
      policy,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyCaptchaState({
      error: e.message,
      loading: false
    }));
  }
}

function* loadSecurityPolicyPasswordHistory() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPasswordHistoryState({
    loading: true,
    error: null
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.getPasswordHistoryPolicy);
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPasswordHistoryState({
      policy,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPasswordHistoryState({
      error: e.message,
      loading: false
    }));
  }
}

function* loadSecurityPolicyVendorPasswordHistory() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyVendorPasswordHistoryState({
    loading: true,
    error: null
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.getVendorPasswordHistoryPolicy);
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyVendorPasswordHistoryState({
      policy,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyVendorPasswordHistoryState({
      error: e.message,
      loading: false
    }));
  }
}

function* saveSecurityPolicyPasswordHistory(_ref3) {
  let {
    payload: {
      callback
    }
  } = _ref3,
      newSecurityPolicy = (0, _objectWithoutPropertiesLoose2.default)(_ref3.payload, _excluded3);
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPasswordHistoryState({
    saving: true,
    error: null
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.savePasswordHistoryPolicy, newSecurityPolicy);
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPasswordHistoryState({
      policy,
      saving: false
    }));
    callback == null ? void 0 : callback(policy);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPasswordHistoryState({
      saving: false,
      error: e.message
    }));
    callback == null ? void 0 : callback(null, e);
  }
}

function* loadVendorPasswordConfig() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPasswordState({
    loading: true,
    error: null
  }));

  try {
    const policy = yield (0, _effects.call)(_restApi.api.auth.getPasswordConfigPolicy);
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPasswordState({
      policy,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPasswordState({
      error: e.message,
      loading: false
    }));
  }
}

function* securityPolicySagas() {
  yield (0, _effects.takeLeading)(_reducer.actions.loadSecurityPolicy, loadSecurityPolicy);
  yield (0, _effects.takeEvery)(_reducer.actions.saveSecurityPolicyMfa, saveSecurityPolicyMfa);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSecurityPolicyMfa, loadSecurityPolicyMfa);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSecurityPolicyVendorMfa, loadSecurityPolicyVendorMfa);
  yield (0, _effects.takeEvery)(_reducer.actions.saveSecurityPolicyLockout, saveSecurityPolicyLockout);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSecurityPolicyLockout, loadSecurityPolicyLockout);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSecurityPolicyVendorLockout, loadSecurityPolicyVendorLockout);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSecurityPolicyCaptcha, loadSecurityPolicyCaptcha);
  yield (0, _effects.takeEvery)(_reducer.actions.saveSecurityPolicyPasswordHistory, saveSecurityPolicyPasswordHistory);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSecurityPolicyPasswordHistory, loadSecurityPolicyPasswordHistory);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSecurityPolicyVendorPasswordHistory, loadSecurityPolicyVendorPasswordHistory);
  yield (0, _effects.takeEvery)(_reducer.actions.loadVendorPasswordConfig, loadVendorPasswordConfig);
  yield (0, _effects.takeEvery)(_reducer.actions.loadPublicSecurityPolicy, loadPublicSecurityPolicy);
  yield (0, _effects.takeEvery)(_reducer.actions.loadPublicAuthStrategiesPolicy, loadPublicAuthStrategiesPolicy);
}
/*********************************
 *  Preview Sagas
 *********************************/


function* loadPublicSecurityPolicyMock() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPublicState({
    loading: true,
    error: null
  }));

  try {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPublicState({
      policy: _dummy.publicSecurityPolicy,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPublicState({
      error: e.message,
      loading: false
    }));
  }
}

function* loadSecurityPolicyMock() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyGlobalState({
    loading: true,
    error: null
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyGlobalState({
    policy: _dummy.policyDemo,
    loading: false
  }));
  yield (0, _effects.put)(_reducer.actions.loadSecurityPolicyMfa());
  yield (0, _effects.put)(_reducer.actions.loadSecurityPolicyVendorMfa());
  yield (0, _effects.put)(_reducer.actions.loadSecurityPolicyLockout());
  yield (0, _effects.put)(_reducer.actions.loadSecurityPolicyVendorLockout());
  yield (0, _effects.put)(_reducer.actions.loadSecurityPolicyPasswordHistory());
  yield (0, _effects.put)(_reducer.actions.loadSecurityPolicyVendorPasswordHistory());
  yield (0, _effects.put)(_reducer.actions.loadSecurityPolicyCaptcha());
}

function* loadSecurityPolicyMfaMock() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyMfaState({
    loading: true,
    error: null
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyMfaState({
    policy: _dummy.policyMfaDemo,
    loading: false
  }));
}

function* loadSecurityPolicyVendorMfaMock() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyVendorMfaState({
    loading: true,
    error: null
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyVendorMfaState({
    policy: _dummy.policyMfaDemo,
    loading: false
  }));
}

function* saveSecurityPolicyMfaMock(_ref4) {
  var _newSecurityPolicy$id;

  let {
    payload: {
      callback
    }
  } = _ref4,
      newSecurityPolicy = (0, _objectWithoutPropertiesLoose2.default)(_ref4.payload, _excluded4);
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyMfaState({
    saving: true,
    error: null
  }));
  const policy = (0, _extends2.default)({}, _dummy.policyLockoutDemo, {
    id: (_newSecurityPolicy$id = newSecurityPolicy.id) != null ? _newSecurityPolicy$id : _dummy.policyLockoutDemo.id,
    enforceMFAType: newSecurityPolicy.enforceMFAType
  });
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyMfaState({
    policy,
    saving: false
  }));
  callback == null ? void 0 : callback(policy);
}

function* loadSecurityPolicyLockoutMock() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyLockoutState({
    loading: true,
    error: null
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyLockoutState({
    policy: _dummy.policyLockoutDemo,
    loading: false
  }));
}

function* loadSecurityPolicyVendorLockoutMock() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyVendorLockoutState({
    loading: true,
    error: null
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyVendorLockoutState({
    policy: _dummy.policyLockoutDemo,
    loading: false
  }));
}

function* saveSecurityPolicyLockoutMock(_ref5) {
  let {
    payload: {
      callback
    }
  } = _ref5,
      newSecurityPolicy = (0, _objectWithoutPropertiesLoose2.default)(_ref5.payload, _excluded5);
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyLockoutState({
    saving: true,
    error: null
  }));
  yield (0, _utils.delay)();
  const policy = (0, _extends2.default)({}, _dummy.policyLockoutDemo, newSecurityPolicy, {
    id: newSecurityPolicy.id ? newSecurityPolicy.id : _dummy.policyLockoutDemo.id
  });
  callback == null ? void 0 : callback(policy);
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyLockoutState({
    policy,
    saving: false
  }));
}

function* loadSecurityPolicyCaptchaMock() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyLockoutState({
    loading: true,
    error: null
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyLockoutState({
    policy: _dummy.policyLockoutDemo,
    loading: false
  }));
}

function* loadSecurityPolicyPasswordHistoryMock() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPasswordHistoryState({
    loading: true,
    error: null
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPasswordHistoryState({
    policy: _dummy.policyPasswordHistoryDemo,
    loading: false
  }));
}

function* loadSecurityPolicyVendorPasswordHistoryMock() {
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyVendorPasswordHistoryState({
    loading: true,
    error: null
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyVendorPasswordHistoryState({
    policy: _dummy.policyPasswordHistoryDemo,
    loading: false
  }));
}

function* saveSecurityPolicyPasswordHistoryMock(_ref6) {
  let {
    payload: {
      callback
    }
  } = _ref6,
      newSecurityPolicy = (0, _objectWithoutPropertiesLoose2.default)(_ref6.payload, _excluded6);
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPasswordHistoryState({
    saving: true,
    error: null
  }));
  yield (0, _utils.delay)();
  const policy = (0, _extends2.default)({}, _dummy.policyPasswordHistoryDemo, newSecurityPolicy, {
    id: newSecurityPolicy.id ? newSecurityPolicy.id : _dummy.policyPasswordHistoryDemo.id
  });
  callback == null ? void 0 : callback(policy);
  yield (0, _effects.put)(_reducer.actions.setSecurityPolicyPasswordHistoryState({
    policy,
    saving: false
  }));
}

function* securityPolicySagasMock() {
  yield (0, _effects.takeLeading)(_reducer.actions.loadSecurityPolicy, loadSecurityPolicyMock);
  yield (0, _effects.takeEvery)(_reducer.actions.loadPublicSecurityPolicy, loadPublicSecurityPolicyMock);
  yield (0, _effects.takeEvery)(_reducer.actions.saveSecurityPolicyMfa, saveSecurityPolicyMfaMock);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSecurityPolicyMfa, loadSecurityPolicyMfaMock);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSecurityPolicyVendorMfa, loadSecurityPolicyVendorMfaMock);
  yield (0, _effects.takeEvery)(_reducer.actions.saveSecurityPolicyLockout, saveSecurityPolicyLockoutMock);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSecurityPolicyLockout, loadSecurityPolicyLockoutMock);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSecurityPolicyVendorLockout, loadSecurityPolicyVendorLockoutMock);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSecurityPolicyCaptcha, loadSecurityPolicyCaptchaMock);
  yield (0, _effects.takeEvery)(_reducer.actions.saveSecurityPolicyPasswordHistory, saveSecurityPolicyPasswordHistoryMock);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSecurityPolicyPasswordHistory, loadSecurityPolicyPasswordHistoryMock);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSecurityPolicyVendorPasswordHistory, loadSecurityPolicyVendorPasswordHistoryMock);
}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.activateSagas = activateSagas;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _effects = require("redux-saga/effects");

var _restApi = require("@frontegg/rest-api");

var _reducer = require("../reducer");

var _saga = require("../LoginState/saga");

var _interfaces = require("../interfaces");

var _interfaces2 = require("./interfaces");

var _interfaces3 = require("../TeamState/interfaces");

const _excluded = ["callback", "events"],
      _excluded2 = ["callback"],
      _excluded3 = ["callback"];

function* preActivateAccount({
  payload: {
    userId,
    token
  }
}) {
  yield (0, _effects.put)(_reducer.actions.setActivateState({
    loading: true,
    step: _interfaces2.ActivateAccountStep.activating
  }));

  try {
    const {
      isAuthenticated
    } = yield (0, _effects.select)(state => state.auth);

    if (isAuthenticated) {
      yield (0, _effects.put)(_reducer.actions.silentLogout());
    }

    const strategy = yield (0, _effects.call)(_restApi.api.auth.getActivateAccountStrategy, {
      userId,
      token
    });
    yield (0, _effects.put)(_reducer.actions.setActivateStrategyState({
      strategy,
      loading: false,
      error: undefined
    }));

    if (strategy.shouldSetPassword) {
      yield (0, _effects.put)(_reducer.actions.setActivateState({
        loading: false,
        step: _interfaces2.ActivateAccountStep.activatingForm
      }));
    }
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setActivateState({
      loading: false,
      error: e.message
    }));
  }
}

function* activateAccount(_ref) {
  let {
    payload: {
      callback,
      events
    }
  } = _ref,
      payload = (0, _objectWithoutPropertiesLoose2.default)(_ref.payload, _excluded);
  yield (0, _effects.put)(_reducer.actions.setActivateState({
    loading: true
  }));

  try {
    const onRedirectTo = _restApi.ContextHolder.onRedirectTo;
    const {
      routes
    } = yield (0, _effects.select)(state => state.auth);
    const data = yield (0, _effects.call)(_restApi.api.auth.activateAccount, payload);

    if (data.redirectLocation) {
      window.location.href = data.redirectLocation;
      return;
    }

    if ((0, _saga.isMfaRequired)(data)) {
      yield (0, _effects.put)(_reducer.actions.setActivateState({
        step: _interfaces2.ActivateAccountStep.success
      }));
      const mfaRequiredState = yield (0, _saga.getMfaRequiredState)(data);
      yield (0, _effects.put)(_reducer.actions.setState(mfaRequiredState));
      yield (0, _effects.delay)(1000);
      onRedirectTo(routes.loginUrl, {
        preserveQueryParams: true
      });
    } else {
      var _events$userVerified;

      yield (0, _effects.put)(_reducer.actions.setActivateState({
        step: _interfaces2.ActivateAccountStep.success
      }));
      const {
        user,
        tenants
      } = yield (0, _effects.call)(_restApi.api.auth.generateLoginResponseV2, data);
      events == null ? void 0 : (_events$userVerified = events.userVerified) == null ? void 0 : _events$userVerified.call(events, {
        email: user.email,
        origin: _interfaces.UserVeirifedOriginTypes.ACTIVATION_LINK,
        id: user.id,
        tenantId: user.tenantId,
        name: user.name,
        createdAt: new Date()
      });
      yield (0, _effects.put)(_reducer.actions.setTenantsState({
        tenants,
        loading: false
      }));
      yield (0, _effects.put)(_reducer.actions.setState({
        user,
        isAuthenticated: true
      }));
      yield (0, _effects.delay)(1000);
      yield (0, _saga.afterAuthNavigation)();
      yield (0, _effects.put)(_reducer.actions.resetActivateState());
    }

    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setActivateState({
      loading: false,
      error: e.message
    }));
  }
}

function* getActivateAccountStrategy({
  payload
}) {
  const {
    callback
  } = payload,
        params = (0, _objectWithoutPropertiesLoose2.default)(payload, _excluded2);
  yield (0, _effects.put)(_reducer.actions.setActivateStrategyState({
    loading: true
  }));

  try {
    const strategy = yield (0, _effects.call)(_restApi.api.auth.getActivateAccountStrategy, params);
    yield (0, _effects.put)(_reducer.actions.setActivateStrategyState({
      strategy,
      loading: false,
      error: undefined
    }));
    callback == null ? void 0 : callback(strategy);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setActivateStrategyState({
      loading: false,
      error: e.message
    }));
  }
}

function* resendActivationEmailFunction({
  payload
}) {
  const {
    callback
  } = payload,
        body = (0, _objectWithoutPropertiesLoose2.default)(payload, _excluded3);
  yield (0, _effects.put)(_reducer.actions.setTeamLoader({
    key: _interfaces3.TeamStateKeys.RESEND_ACTIVATE_LINK,
    value: body.email
  }));
  yield (0, _effects.put)(_reducer.actions.setActivateState({
    loading: true
  }));

  try {
    yield (0, _effects.call)(_restApi.api.auth.resendActivationEmail, body);
    yield (0, _effects.put)(_reducer.actions.setActivateState({
      loading: false,
      error: undefined,
      resentEmail: true
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setActivateState({
      loading: false,
      error: e.message
    }));
    yield (0, _effects.put)(_reducer.actions.setTeamError({
      key: _interfaces3.TeamStateKeys.RESEND_ACTIVATE_LINK,
      value: e.message
    }));
    callback == null ? void 0 : callback(null, e.message);
  }

  yield (0, _effects.put)(_reducer.actions.setTeamLoader({
    key: _interfaces3.TeamStateKeys.RESEND_ACTIVATE_LINK,
    value: false
  }));
}

function* activateSagas() {
  yield (0, _effects.takeLeading)(_reducer.actions.activateAccount, activateAccount);
  yield (0, _effects.takeLeading)(_reducer.actions.preActivateAccount, preActivateAccount);
  yield (0, _effects.takeLeading)(_reducer.actions.getActivateAccountStrategy, getActivateAccountStrategy);
  yield (0, _effects.takeLeading)(_reducer.actions.resendActivationEmail, resendActivationEmailFunction);
}